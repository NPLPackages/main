<?xml version="1.0" encoding="utf-8" ?>

<doc>
	<tables>
		<table name="BlockEngine" src="script/apps/Aries/Creator/Game/block_engine.lua">
			<function line="80" name="SetGameLogic">
				<summary>function BlockEngine:SetGameLogic(game_logic)&#13;&#10;set the current game logic to use. 
				</summary>
				<parameter name="game_logic"/>
			</function>
			<function line="86" name="Connect">
				<summary>function BlockEngine:Connect()&#13;&#10;call this function to connect the block engine with the current low level game engine's block terrain world. &#13;&#10;call this function when one enters the block based game.
				</summary>
			</function>
			<function line="143" name="OnBeforeLoadBlockRegion">
				<summary>function BlockEngine.OnBeforeLoadBlockRegion()&#13;&#10;&#13;&#10; &#32; @return 0 or nil to proceed loading the region in async mode. &#13;&#10;return 1 to prevent the region from loaded
				</summary>
				<returns>return or nil to proceed loading the region in async mode. &#13;&#10;return 1 to prevent the region from loaded
				</returns>
			</function>
			<function line="154" name="OnSaveBlockRegion">
				<summary>function BlockEngine.OnSaveBlockRegion()&#13;&#10;
				</summary>
			</function>
			<function line="160" name="IsRegionLoaded">
				<summary>function BlockEngine.IsRegionLoaded(regionX, regionY)&#13;&#10;
				</summary>
				<parameter name="regionX"/>
				<parameter name="regionY"/>
			</function>
			<function line="165" name="SetRegionLoaded">
				<summary>function BlockEngine.SetRegionLoaded(regionX, regionY, bLoaded)&#13;&#10;
				</summary>
				<parameter name="regionX"/>
				<parameter name="regionY"/>
				<parameter name="bLoaded"/>
			</function>
			<function line="170" name="OnLoadBlockRegion">
				<summary>function BlockEngine.OnLoadBlockRegion()&#13;&#10;
				</summary>
			</function>
			<function line="215" name="OnUnLoadBlockRegion">
				<summary>function BlockEngine.OnUnLoadBlockRegion()&#13;&#10;
				</summary>
			</function>
			<function line="226" name="OnGeneratorScript">
				<summary>function BlockEngine.OnGeneratorScript()&#13;&#10;
				</summary>
			</function>
			<function line="242" name="Disconnect">
				<summary>function BlockEngine:Disconnect()&#13;&#10;disconnect the block engine, so that no computation occurs afterwards. &#13;&#10;call this function when one exit the block based game
				</summary>
			</function>
			<function line="250" name="SetOffsetY">
				<summary>function BlockEngine:SetOffsetY(y)&#13;&#10;
				</summary>
				<parameter name="y"/>
			</function>
			<function line="260" name="GetBlockTypeInCache">
				<summary>function BlockEngine:GetBlockTypeInCache(x, y, z)&#13;&#10;used to cache some game data per block&#13;&#10; &#32; @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="271" name="GetBlockTypeInCacheIdx">
				<summary>function BlockEngine:GetBlockTypeInCacheIdx(bx, by, bz)&#13;&#10;used to cache some game data per block&#13;&#10; &#32; @return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<returns>return -1 means nil, 0 means empty, 1 means opaque block, 2 means deco, etc. 
				</returns>
			</function>
			<function line="282" name="SetBlockAttributeInCache">
				<summary>function BlockEngine:SetBlockAttributeInCache(x,y,z, name, value)&#13;&#10;similar to GetBlockType except that index is block coordinates is uint16&#13;&#10; &#32; @param bx,by,bz: block index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="292" name="GetBlockAttributeInCache">
				<summary>function BlockEngine:GetBlockAttributeInCache(x,y,z, name)&#13;&#10;one can set the block attribute at the given position&#13;&#10;supported attributes are like "type", "texture", ...
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="name"/>
			</function>
			<function line="300" name="GetBlockInCacheIdx">
				<summary>function BlockEngine:GetBlockInCacheIdx(bx, by, bz, bCreateIfNotExist)&#13;&#10;create/get block at given world position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="315" name="GetBlockInCache">
				<summary>function BlockEngine:GetBlockInCache(x,y,z, bCreateIfNotExist)&#13;&#10;create/get block at given world position.&#13;&#10; &#32; @param x, y, z: real world position.
				</summary>
				<parameter name="x">, y, z: real world position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="330" name="IsBlockFreeSpace">
				<summary>function BlockEngine:IsBlockFreeSpace(bx, by, bz)&#13;&#10;whether this block is freespace. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="339" name="GetRegionPos">
				<summary>function BlockEngine:GetRegionPos(x,z)&#13;&#10;get the region pos that contains x, z
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="350" name="ConvertToRealPosition_float">
				<summary>function BlockEngine:ConvertToRealPosition_float(x,y,z)&#13;&#10;convert from block index to real world coordinate. use floating point operations.&#13;&#10; &#32; @param note: the returned position is always the center of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="369" name="ConvertToRealPosition">
				<summary>function BlockEngine:ConvertToRealPosition(x,y,z)&#13;&#10;only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="376" name="real_bottom">
				<summary>function BlockEngine:real_bottom(x,y,z)&#13;&#10;this is 64bits version. convert from block index position to real world bottom center position.&#13;&#10; &#32; @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="381" name="real_top">
				<summary>function BlockEngine:real_top(x,y,z)&#13;&#10;top center position of given block in real coordinate
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="387" name="real_min">
				<summary>function BlockEngine:real_min(x,y,z)&#13;&#10;this is 64bits version. convert from block index position to real world min position.&#13;&#10; &#32; @param x,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</summary>
				<parameter name="x">,y,z: block index (may be floating point index). y, z can be nil. x must be number. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="396" name="realY">
				<summary>function BlockEngine:realY(y)&#13;&#10;return the real y. returned value is at the bottom of the y block.
				</summary>
				<parameter name="y"/>
			</function>
			<function line="401" name="ConvertToBlockIndex_float">
				<summary>function BlockEngine:ConvertToBlockIndex_float(x,y,z)&#13;&#10;convert real world coordinate x,y,z to block index. use floating point operations. &#32;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="421" name="ConvertToBlockIndex">
				<summary>function BlockEngine:ConvertToBlockIndex(x,y,z)&#13;&#10;only call this function when math is in 64 bits double, otherwise use the 32bits float version above, which is compatible with C++
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="429" name="block_float">
				<summary>function BlockEngine:block_float(x,y,z)&#13;&#10;convert to block floating point index.&#13;&#10; &#32; @param x,y,z: real world cooridnate. y z can be nil.&#13;&#10; &#32; @return block index but NOT math.floored. 
				</summary>
				<parameter name="x">,y,z: real world cooridnate. y z can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return index but NOT math.floored. 
				</returns>
			</function>
			<function line="438" name="GetBlockCenter">
				<summary>function BlockEngine:GetBlockCenter(x,y,z)&#13;&#10;get the block center, based on a real world position.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="444" name="GetSparseIndex">
				<summary>function BlockEngine:GetSparseIndex(x, y, z)&#13;&#10;get sparse index
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="450" name="FromSparseIndex">
				<summary>function BlockEngine:FromSparseIndex(index)&#13;&#10;convert from sparse index to block x,y,z&#13;&#10; &#32; @return x,y,z
				</summary>
				<parameter name="index"/>
				<returns>return ,y,z
				</returns>
			</function>
			<function line="464" name="GetOppositeSide">
				<summary>function BlockEngine:GetOppositeSide(side)&#13;&#10;
				</summary>
				<parameter name="side"/>
			</function>
			<function line="470" name="GetBlockIndexBySide">
				<summary>function BlockEngine:GetBlockIndexBySide(x,y,z,side)&#13;&#10;&#13;&#10; &#32; @param x, y, z: block index&#13;&#10; &#32; @return: x,y,z nearby block index. 
				</summary>
				<parameter name="x">, y, z: block index
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side"/>
				<returns>return x,y,z nearby block index. 
				</returns>
			</function>
			<function line="488" name="UpdateEyePosition">
				<summary>function BlockEngine:UpdateEyePosition(x, y, z)&#13;&#10;update eye position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="513" name="GetNextDynamicTypeInColumn">
				<summary>function BlockEngine:GetNextDynamicTypeInColumn(x,y,z, max_dist)&#13;&#10;get the next dynamic object type in the block column x,z. It will start from the high y-1 and search downward, until one is found.&#13;&#10; &#32; @param max_dist: max dist to search downward. default to y.&#13;&#10; &#32; @return block_id, block_y: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="max_dist">max dist to search downward. default to y.
				</parameter>
				<returns>return , block_y: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="526" name="GetNextBlockOfTypeInColumn">
				<summary>function BlockEngine:GetNextBlockOfTypeInColumn(x,y,z, attr, max_dist)&#13;&#10;&#13;&#10; &#32; @param attr: bitwise field. default to block.attributes.onload (which is usually entity block)&#13;&#10; &#32; @return block_id, block_y, block_data: nil if no dynamic type is found downward. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="attr">bitwise field. default to block.attributes.onload (which is usually entity block)
				</parameter>
				<parameter name="max_dist"/>
				<returns>return , block_y, block_data: nil if no dynamic type is found downward. 
				</returns>
			</function>
			<function line="544" name="GetFirstBlock">
				<summary>function BlockEngine:GetFirstBlock(x, y, z, nBlockId, nSide, max_dist)&#13;&#10;get the y pos of the first block of nBlockID, start searching from x, y, z in the side direction&#13;&#10; &#32; @param x,y,z: y default to 0&#13;&#10; &#32; @param nBlockId: the block id to search for&#13;&#10; &#32; @param nSide: default to 5, which is downward, 4 if upward.&#13;&#10; &#32; @param max_dist: default to 255&#13;&#10; &#32; @return -1 if not found
				</summary>
				<parameter name="x">,y,z: y default to 0
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="nBlockId">the block id to search for
				</parameter>
				<parameter name="nSide">default to 5, which is downward, 4 if upward.
				</parameter>
				<parameter name="max_dist">default to 255
				</parameter>
				<returns>return -1 if not found
				</returns>
			</function>
			<function line="549" name="FrameMove_Coroutine">
				<summary>function BlockEngine:FrameMove_Coroutine()&#13;&#10;this is a coroutine and may yield every block_sim_per_frame framemove. 
				</summary>
			</function>
			<function line="574" name="OnFrameMove">
				<summary>function BlockEngine:OnFrameMove()&#13;&#10;main loop of the block engine.
				</summary>
			</function>
			<function line="599" name="FrameMoveRegion">
				<summary>function BlockEngine:FrameMoveRegion(x, y, z, radius, radius_from)&#13;&#10;frame move all dynamic block in given square region.&#13;&#10; &#32; @param x, y, z: the block index. y can be nil.&#13;&#10; &#32; @param radius: &#32;the square region radius&#13;&#10; &#32; @param radius_from: default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. &#13;&#10;this allow us the framemove block with different interval according to distance to eye position. 
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="radius">the square region radius
				</parameter>
				<parameter name="radius_from">default to nil or 0. if larger than 0, we will not simulate blocks which is in radius_from square. &#13;&#10;this allow us the framemove block with different interval according to distance to eye position. 
				</parameter>
			</function>
			<function line="637" name="FrameMoveColumn">
				<summary>function BlockEngine:FrameMoveColumn(x,y,z)&#13;&#10;framemove all blocks below y, in the x, z columns from top to bottom.&#13;&#10; &#32; @param x, y, z: the block index. y can be nil.
				</summary>
				<parameter name="x">, y, z: the block index. y can be nil.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="655" name="SetBlockToAir">
				<summary>function BlockEngine:SetBlockToAir(x,y,z, flag)&#13;&#10;same as: BlockEngine:SetBlock(x,y,z,0, nil, flag)
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="flag"/>
			</function>
			<function line="659" name="MarkBlockForUpdate">
				<summary>function BlockEngine:MarkBlockForUpdate(x, y, z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="665" name="IsRemote">
				<summary>function BlockEngine:IsRemote()&#13;&#10;
				</summary>
			</function>
			<function line="671" name="BeginUpdate">
				<summary>function BlockEngine:BeginUpdate()&#13;&#10;
				</summary>
			</function>
			<function line="675" name="EndUpdate">
				<summary>function BlockEngine:EndUpdate()&#13;&#10;
				</summary>
			</function>
			<function line="680" name="IsUpdatingBlocks">
				<summary>function BlockEngine:IsUpdatingBlocks()&#13;&#10;return true if we are batching updating blocks such as during load template function. 
				</summary>
			</function>
			<function line="690" name="SetBlock">
				<summary>function BlockEngine:SetBlock(x,y,z,block_id, block_data, flag, entity_data)&#13;&#10;Sets the block ID and metadata at a given location.&#13;&#10; &#32; @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. &#13;&#10;0 will just set block without calling the block callback func.&#13;&#10; &#32; @param entity_data: table of xml node as entity_data&#13;&#10; &#32; @return true if a new block is created. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default. 3 is update with notification to nearby blocks. &#13;&#10;0 will just set block without calling the block callback func.
				</parameter>
				<parameter name="entity_data">table of xml node as entity_data
				</parameter>
				<returns>return if a new block is created. 
				</returns>
			</function>
			<function line="746" name="SetBlockData">
				<summary>function BlockEngine:SetBlockData(x,y,z,block_data, flag)&#13;&#10;Sets the block metadata at a given location.&#13;&#10; &#32; @param flag: bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
				<parameter name="flag">bitwise field. 1 will notify neighbor blocks. 2 or nil will be the default
				</parameter>
			</function>
			<function line="765" name="SetBlockDataForced">
				<summary>function BlockEngine:SetBlockDataForced(x,y,z,block_data)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="770" name="GetBlockData">
				<summary>function BlockEngine:GetBlockData(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="774" name="GetBlockId">
				<summary>function BlockEngine:GetBlockId(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="778" name="GetBlockIdAndData">
				<summary>function BlockEngine:GetBlockIdAndData(x, y, z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="782" name="GetBlockEntityData">
				<summary>function BlockEngine:GetBlockEntityData(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="792" name="GetBlockEntity">
				<summary>function BlockEngine:GetBlockEntity(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="799" name="GetBlockEntityList">
				<summary>function BlockEngine:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)&#13;&#10;
				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="819" name="GetBlockFull">
				<summary>function BlockEngine:GetBlockFull(x,y,z)&#13;&#10;get full info about a given block&#13;&#10; &#32; @return block_id, block_data, entity_data
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return , block_data, entity_data
				</returns>
			</function>
			<function line="840" name="GetAllBlocksInfoInAABB">
				<summary>function BlockEngine:GetAllBlocksInfoInAABB(aabb)&#13;&#10;return array of {x,y,z, id, data, entity_data}
				</summary>
				<parameter name="aabb"/>
			</function>
			<function line="859" name="GetBlock">
				<summary>function BlockEngine:GetBlock(x,y,z)&#13;&#10;return the block template object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="867" name="GetBlockTemplateByIdx">
				<summary>function BlockEngine:GetBlockTemplateByIdx(bX, bY, bZ)&#13;&#10;return the block template table. 
				</summary>
				<parameter name="bX"/>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="876" name="SetBlockTemplateByIdx">
				<summary>function BlockEngine.SetBlockTemplateByIdx(x,y,z,block_id, block_data)&#13;&#10;Obsoleted: use BlockEngine:SetBlock&#13;&#10; &#32; @param x, y, z: the block index. 
				</summary>
				<parameter name="x">, y, z: the block index. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="block_data"/>
			</function>
			<function line="881" name="SetBlockUserDataByIdx">
				<summary>function BlockEngine.SetBlockUserDataByIdx(x,y,z,block_data)&#13;&#10;Obsoleted: use BlockEngine:SetBlockData
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="887" name="IsInLiquid">
				<summary>function BlockEngine:IsInLiquid(bX, bY, bZ)&#13;&#10;is point under water&#13;&#10; &#32; @param bX, bY, bZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="bX">, bY, bZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="bY"/>
				<parameter name="bZ"/>
			</function>
			<function line="902" name="IsInAir">
				<summary>function BlockEngine:IsInAir(x,y,z)&#13;&#10;if all 6 neighbour are empty. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="914" name="IsInLiquidReal">
				<summary>function BlockEngine:IsInLiquidReal(realX, realY, realZ)&#13;&#10;TODO: is point under water&#13;&#10; &#32; @param realX, realY, realZ: if nil, we will use the camera eye position. 
				</summary>
				<parameter name="realX">, realY, realZ: if nil, we will use the camera eye position. 
				</parameter>
				<parameter name="realY"/>
				<parameter name="realZ"/>
			</function>
			<function line="953" name="NotifyNeighborBlocksChange">
				<summary>function BlockEngine:NotifyNeighborBlocksChange(x, y, z, from_block_id)&#13;&#10;Notifies all six neighboring blocks that from_block_id changed &#32;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
			</function>
			<function line="964" name="NotifyNeighborBlocksChangeNoSide">
				<summary>function BlockEngine:NotifyNeighborBlocksChangeNoSide(x, y, z, from_block_id, side)&#13;&#10;Notifies all six neighboring blocks that from_block_id changed, except the one on the given side.&#13;&#10; &#32; @param side: the block on this side is not notified. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id"/>
				<parameter name="side">the block on this side is not notified. 
				</parameter>
			</function>
			<function line="993" name="OnNeighborBlockChange">
				<summary>function BlockEngine:OnNeighborBlockChange(x, y, z, from_block_id)&#13;&#10;Notifies a block that one of its neighbor change to the specified type&#13;&#10; &#32; @param from_block_id: the block id that has changed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="from_block_id">the block id that has changed
				</parameter>
			</function>
			<function line="1004" name="GetBlockMaterial">
				<summary>function BlockEngine:GetBlockMaterial(x,y,z)&#13;&#10;get block material
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1018" name="isBlockProvidingStrongPowerTo">
				<summary>function BlockEngine:isBlockProvidingStrongPowerTo(x, y, z, direction)&#13;&#10;Is this block powering in the specified direction 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction"/>
			</function>
			<function line="1033" name="getBlockStrongPowerInput">
				<summary>function BlockEngine:getBlockStrongPowerInput(x,y,z)&#13;&#10;Returns the highest strong power input from this block's six neighbors. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1070" name="hasWeakPowerOutputTo">
				<summary>function BlockEngine:hasWeakPowerOutputTo(x,y,z,dir)&#13;&#10;Returns the weak power being outputted by the given block to the given direction.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1075" name="isBlockNormalCube">
				<summary>function BlockEngine:isBlockNormalCube(x,y,z)&#13;&#10;Indicate if a material is a normal solid opaque cube.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1082" name="getWeakPowerOutputTo">
				<summary>function BlockEngine:getWeakPowerOutputTo(x,y,z,dir)&#13;&#10;Gets the indirect(weak) power level of this block to a given side. &#13;&#10;Normal cube block will output the highest strong power input as weak output to all of its six faces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dir"/>
			</function>
			<function line="1097" name="isBlockIndirectlyGettingPowered">
				<summary>function BlockEngine:isBlockIndirectlyGettingPowered(x, y, z)&#13;&#10;Used to see if one of the blocks next to you or your block is getting power from a neighboring block. Used by&#13;&#10;items like TNT or Doors so they don't have going straight into them. &#32;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1108" name="getStrongestIndirectPower">
				<summary>function BlockEngine:getStrongestIndirectPower(x, y, z)&#13;&#10;get strongest indirect power from the neighboring 6 blocks. wires will transmit indirect power to its neighbor
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1128" name="DoesBlockHaveSolidTopSurface">
				<summary>function BlockEngine:DoesBlockHaveSolidTopSurface(x,y,z)&#13;&#10;Performs check to see if the block is a normal, solid block, or if the metadata of the block indicates that its&#13;&#10;facing puts its solid side upwards. (inverted stairs, for example)&#13;&#10;Returns true if the block at the given coordinate has a solid (buildable) top surface.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1138" name="Dump">
				<summary>function BlockEngine:Dump()&#13;&#10;dump the current state of the block engine
				</summary>
			</function>
		</table>
		<table name="GameLogic" src="script/apps/Aries/Creator/Game/game_logic.lua">
			<function line="139" name="ctor">
				<summary>function GameLogic:ctor()&#13;&#10;one time singleton init
				</summary>
			</function>
			<function line="171" name="InitAPIPath">
				<summary>function GameLogic:InitAPIPath()&#13;&#10;
				</summary>
			</function>
			<function line="197" name="InitMod">
				<summary>function GameLogic.InitMod()&#13;&#10;static method called at the very beginning when paracraft start
				</summary>
			</function>
			<function line="208" name="InitCommon">
				<summary>function GameLogic.InitCommon()&#13;&#10;called by both Init() and StaticInit()
				</summary>
			</function>
			<function line="275" name="After_OnActivateDesktop">
				<summary>function GameLogic.After_OnActivateDesktop()	&#13;&#10;for checking desktop state after activate desktop
				</summary>
			</function>
			<function line="298" name="Init">
				<summary>function GameLogic.Init(worldObj)&#13;&#10;call this when user first enters a game world.
				</summary>
				<parameter name="worldObj"/>
			</function>
			<function line="379" name="OnBeforeBlockWorldLoaded">
				<summary>function GameLogic.OnBeforeBlockWorldLoaded()&#13;&#10;
				</summary>
			</function>
			<function line="390" name="GetWorld">
				<summary>function GameLogic.GetWorld()&#13;&#10;get the current world. 
				</summary>
			</function>
			<function line="394" name="getCurrentWorldId">
				<summary>function GameLogic.getCurrentWorldId( ... )&#13;&#10;
				</summary>
			</function>
			<function line="399" name="GetPlayerController">
				<summary>function GameLogic.GetPlayerController()&#13;&#10;
				</summary>
			</function>
			<function line="406" name="GetPlayer">
				<summary>function GameLogic.GetPlayer()&#13;&#10;
				</summary>
			</function>
			<function line="410" name="CreateGetAutoSaver">
				<summary>function GameLogic.CreateGetAutoSaver()&#13;&#10;
				</summary>
			</function>
			<function line="420" name="OnBeforeLoadBlockRegion">
				<summary>function GameLogic.OnBeforeLoadBlockRegion(bContinue, region_x, region_y)&#13;&#10;&#13;&#10; &#32; @return false to disable loading region from file
				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<returns>return to disable loading region from file
				</returns>
			</function>
			<function line="426" name="OnLoadBlockRegion">
				<summary>function GameLogic.OnLoadBlockRegion(bContinue, region_x, region_y)&#13;&#10;&#13;&#10; &#32; @return false to disable loading region entities
				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<returns>return to disable loading region entities
				</returns>
			</function>
			<function line="445" name="OnSaveBlockRegion">
				<summary>function GameLogic.OnSaveBlockRegion(bContinue, region_x, region_y, region_type)&#13;&#10;
				</summary>
				<parameter name="bContinue"/>
				<parameter name="region_x"/>
				<parameter name="region_y"/>
				<parameter name="region_type"/>
			</function>
			<function line="450" name="ReplaceWorld">
				<summary>function GameLogic.ReplaceWorld(world)&#13;&#10;this is used to secretely replace current world object, such as from a standalone world into a multplayer worldserver. 
				</summary>
				<parameter name="world"/>
			</function>
			<function line="463" name="GetParticleManager">
				<summary>function GameLogic.GetParticleManager()&#13;&#10;
				</summary>
			</function>
			<function line="468" name="GetSaveHandler">
				<summary>function GameLogic.GetSaveHandler()&#13;&#10;Returns the current world's current save handler
				</summary>
			</function>
			<function line="473" name="GetEvents">
				<summary>function GameLogic.GetEvents()&#13;&#10;get events
				</summary>
			</function>
			<function line="481" name="GetProfile">
				<summary>function GameLogic.GetProfile()&#13;&#10;get current user profile. 
				</summary>
			</function>
			<function line="486" name="GetBlockWorld">
				<summary>function GameLogic.GetBlockWorld()&#13;&#10;get the block world raw pointer
				</summary>
			</function>
			<function line="496" name="SetBlockWorld">
				<summary>function GameLogic.SetBlockWorld(world)&#13;&#10;set current block world.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="500" name="GetTeacherAgent">
				<summary>function GameLogic.GetTeacherAgent()&#13;&#10;
				</summary>
			</function>
			<function line="509" name="SetTipText">
				<summary>function GameLogic.SetTipText(text, target, duration, onclickCallback)&#13;&#10;set cody's text&#13;&#10; &#32; @param text: any HTML text&#13;&#10; &#32; @param target: nil or "&lt;player&gt;"&#13;&#10; &#32; @param duration: in seconds&#13;&#10; &#32; @param onclickCallback: when user clicks the teacher icon. it can be "F1"
				</summary>
				<parameter name="text">any HTML text
				</parameter>
				<parameter name="target">nil or "&lt;player&gt;"
				</parameter>
				<parameter name="duration">in seconds
				</parameter>
				<parameter name="onclickCallback">when user clicks the teacher icon. it can be "F1"
				</parameter>
			</function>
			<function line="515" name="HideTipText">
				<summary>function GameLogic.HideTipText(target)&#13;&#10;hide cody's text
				</summary>
				<parameter name="target"/>
			</function>
			<function line="522" name="Login">
				<summary>function GameLogic.Login(server, callback)&#13;&#10;login a given server&#13;&#10; &#32; @param server:if nil, it means the local server
				</summary>
				<parameter name="server">if nil, it means the local server
				</parameter>
				<parameter name="callback"/>
			</function>
			<function line="529" name="GetBlockGenerator">
				<summary>function GameLogic.GetBlockGenerator()&#13;&#10;
				</summary>
			</function>
			<function line="535" name="StaticInit">
				<summary>function GameLogic.StaticInit(load_level)&#13;&#10;this function is used for loading static world without editing features.&#13;&#10; &#32; @param load_level: nil to load only blocks, 1 load NPC and neuron logics.
				</summary>
				<parameter name="load_level">nil to load only blocks, 1 load NPC and neuron logics.
				</parameter>
			</function>
			<function line="596" name="AutoFindLoginPos">
				<summary>function GameLogic.AutoFindLoginPos()&#13;&#10;find the most suitable login position. 
				</summary>
			</function>
			<function line="602" name="Reset">
				<summary>function GameLogic.Reset()&#13;&#10;clear all old game level objects. 
				</summary>
			</function>
			<function line="605" name="NewGame">
				<summary>function GameLogic.NewGame()&#13;&#10;
				</summary>
			</function>
			<function line="610" name="GetWorldDirectory">
				<summary>function GameLogic.GetWorldDirectory(bx, bz)&#13;&#10;return current world directory (fast)
				</summary>
				<parameter name="bx"/>
				<parameter name="bz"/>
			</function>
			<function line="616" name="GetWorldDirectoryAt">
				<summary>function GameLogic.GetWorldDirectoryAt(bx, bz)&#13;&#10;&#13;&#10; &#32; @param bx, bz: if nil, we will use the current player position. &#13;&#10;return current world directory (fast)
				</summary>
				<parameter name="bx">, bz: if nil, we will use the current player position. &#13;&#10;return current world directory (fast)
				</parameter>
				<parameter name="bz"/>
			</function>
			<function line="633" name="LoadGame">
				<summary>function GameLogic.LoadGame()&#13;&#10;load from the current world directory. 
				</summary>
			</function>
			<function line="696" name="Pause">
				<summary>function GameLogic.Pause()&#13;&#10;
				</summary>
			</function>
			<function line="700" name="Resume">
				<summary>function GameLogic.Resume()&#13;&#10;
				</summary>
			</function>
			<function line="704" name="IsPaused">
				<summary>function GameLogic.IsPaused()&#13;&#10;
				</summary>
			</function>
			<function line="708" name="RemoveWorldFileWatcher">
				<summary>function GameLogic.RemoveWorldFileWatcher()&#13;&#10;
				</summary>
			</function>
			<function line="715" name="CheckCreateFileWatcher">
				<summary>function GameLogic.CheckCreateFileWatcher()&#13;&#10;
				</summary>
			</function>
			<function line="739" name="BuildResourceFilepath">
				<summary>function GameLogic.BuildResourceFilepath(filename)&#13;&#10;build resource filepath&#13;&#10; &#32; @param filename: relative to current world directory. 
				</summary>
				<parameter name="filename">relative to current world directory. 
				</parameter>
			</function>
			<function line="745" name="ToggleGameMode">
				<summary>function GameLogic.ToggleGameMode()&#13;&#10;
				</summary>
			</function>
			<function line="756" name="ToggleFly">
				<summary>function GameLogic.ToggleFly()&#13;&#10;
				</summary>
			</function>
			<function line="784" name="GetPickingDist">
				<summary>function GameLogic.GetPickingDist()&#13;&#10;
				</summary>
			</function>
			<function line="789" name="QuickSave">
				<summary>function GameLogic.QuickSave()&#13;&#10;call this function every 1 min
				</summary>
			</function>
			<function line="793" name="GetUnSavedTime">
				<summary>function GameLogic.GetUnSavedTime()&#13;&#10;
				</summary>
			</function>
			<function line="799" name="SaveAll">
				<summary>function GameLogic.SaveAll(bSaveToLastSaveFolder, bForceSave)&#13;&#10;&#13;&#10; &#32; @param bSaveToLastSaveFolder: whether to save block to "blockWorld.lastsave" folder&#13;&#10; &#32; @param bForceSave: default to nil, if true, we will save regardless the world is readonly or remote. 
				</summary>
				<parameter name="bSaveToLastSaveFolder">whether to save block to "blockWorld.lastsave" folder
				</parameter>
				<parameter name="bForceSave">default to nil, if true, we will save regardless the world is readonly or remote. 
				</parameter>
			</function>
			<function line="858" name="PlayAnimation">
				<summary>function GameLogic.PlayAnimation(params)&#13;&#10;let a given character to play an animation.&#13;&#10; &#32; @param params: {nid, animationName=string, facingTarget={x,y,z}}
				</summary>
				<parameter name="params">{nid, animationName=string, facingTarget={x,y,z}}
				</parameter>
			</function>
			<function line="872" name="BeforeRestart">
				<summary>function GameLogic.BeforeRestart(appName)&#13;&#10;called before the entire NPLRuntime is restarted to a different application. 
				</summary>
				<parameter name="appName"/>
			</function>
			<function line="876" name="Exit">
				<summary>function GameLogic.Exit(bSoft)&#13;&#10;
				</summary>
				<parameter name="bSoft"/>
			</function>
			<function line="955" name="GetCodeGlobal">
				<summary>function GameLogic.GetCodeGlobal()&#13;&#10;global sandbox user defined variables in the world. It is recreated on each world load on demand.&#13;&#10; &#32; @return CodeGlobals object associated with the current world.
				</summary>
				<returns>return object associated with the current world.
				</returns>
			</function>
			<function line="964" name="CheckTickShiftWalkingMode">
				<summary>function GameLogic.CheckTickShiftWalkingMode()&#13;&#10;
				</summary>
			</function>
			<function line="976" name="GetCurrentPlayerObj">
				<summary>function GameLogic.GetCurrentPlayerObj()&#13;&#10;
				</summary>
			</function>
			<function line="985" name="CheckCurrentPlayerLocation">
				<summary>function GameLogic.CheckCurrentPlayerLocation()&#13;&#10;ensure the player never goes too high or too low. If too low, it should die in game mode. &#13;&#10;disable fly mode, if player feet is on ground
				</summary>
			</function>
			<function line="1035" name="IsRemoteWorld">
				<summary>function GameLogic.IsRemoteWorld()&#13;&#10;if true, we will disable all block entity simulation on the local world. 
				</summary>
			</function>
			<function line="1040" name="IsServerWorld">
				<summary>function GameLogic.IsServerWorld()&#13;&#10;if true, the entity may need to send update to clients. 
				</summary>
			</function>
			<function line="1046" name="SetIsRemoteWorld">
				<summary>function GameLogic.SetIsRemoteWorld(bRemoteWorld, bIsServerWorld)&#13;&#10;if true, we will disable all block entity simulation on the local world.&#13;&#10; &#32; @param bRemoteWorld: this is set to true, if self.world is a WorldClient type. 
				</summary>
				<parameter name="bRemoteWorld">this is set to true, if self.world is a WorldClient type. 
				</parameter>
				<parameter name="bIsServerWorld"/>
			</function>
			<function line="1052" name="IsTick">
				<summary>function GameLogic:IsTick(deltaTime)&#13;&#10;
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1060" name="GetTickCount">
				<summary>function GameLogic.GetTickCount()&#13;&#10;the number of frame moves that has been called. 
				</summary>
			</function>
			<function line="1067" name="GetEyePosition">
				<summary>function GameLogic.GetEyePosition()&#13;&#10;&#13;&#10; &#32; @return {x, y, z} array
				</summary>
				<returns>return {x, y, z} array
				</returns>
			</function>
			<function line="1072" name="FrameMove">
				<summary>function GameLogic.FrameMove(timer)&#13;&#10;called 30 FPS framemove.
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="1129" name="OnDead">
				<summary>function GameLogic.OnDead()&#13;&#10;
				</summary>
			</function>
			<function line="1135" name="RunCommand">
				<summary>function GameLogic.RunCommand(...)&#13;&#10;
				</summary>
			</function>
			<function line="1139" name="RefreshPlayerDensity">
				<summary>function GameLogic.RefreshPlayerDensity()&#13;&#10;
				</summary>
			</function>
			<function line="1163" name="CanCollectItem">
				<summary>function GameLogic.CanCollectItem()&#13;&#10;whether we can collect items when player hit it. 
				</summary>
			</function>
			<function line="1170" name="GetGameMode">
				<summary>function GameLogic.GetGameMode()&#13;&#10;&#13;&#10; &#32; @return "edit" or "game" or "movie"
				</summary>
				<returns>return "edit" or "game" or "movie"
				</returns>
			</function>
			<function line="1179" name="IsReadOnly">
				<summary>function GameLogic.IsReadOnly()&#13;&#10;whether we can edit the world 
				</summary>
			</function>
			<function line="1184" name="CheckReadOnly">
				<summary>function GameLogic.CheckReadOnly()&#13;&#10;return true if read only and display a message box. 
				</summary>
			</function>
			<function line="1192" name="SetMode">
				<summary>function GameLogic.SetMode(mode, bFireModeChangeEvent)&#13;&#10;set mode 
				</summary>
				<parameter name="mode"/>
				<parameter name="bFireModeChangeEvent"/>
			</function>
			<function line="1207" name="EnterGameMode">
				<summary>function GameLogic.EnterGameMode(bIsSurvival, bStrictGame)&#13;&#10;call this to enter game mode and begin to spawn all kinds of creatures and display game UI&#13;&#10; &#32; @param bStrictGame: no commands, no chatting, no cheating. 
				</summary>
				<parameter name="bIsSurvival"/>
				<parameter name="bStrictGame">no commands, no chatting, no cheating. 
				</parameter>
			</function>
			<function line="1223" name="EnterEditorMode">
				<summary>function GameLogic.EnterEditorMode()&#13;&#10;call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="1227" name="EnterTutorialMode">
				<summary>function GameLogic.EnterTutorialMode()&#13;&#10;
				</summary>
			</function>
			<function line="1232" name="EnterMovieMode">
				<summary>function GameLogic.EnterMovieMode()&#13;&#10;call this to enter editor mode and disable game creature AI and display editor UI 
				</summary>
			</function>
			<function line="1238" name="GetMode">
				<summary>function GameLogic.GetMode()&#13;&#10;get the current game mode&#13;&#10; &#32; @return "game", "editor", "survival"
				</summary>
				<returns>return "game", "editor", "survival"
				</returns>
			</function>
			<function line="1243" name="GetBlockInRightHand">
				<summary>function GameLogic.GetBlockInRightHand()&#13;&#10;return the block id in the right hand of the player. 
				</summary>
			</function>
			<function line="1247" name="SetBlockInRightHand">
				<summary>function GameLogic.SetBlockInRightHand(blockid_or_item_stack)&#13;&#10;
				</summary>
				<parameter name="blockid_or_item_stack"/>
			</function>
			<function line="1255" name="CreateObject">
				<summary>function GameLogic.CreateObject(name, x, y, z, bAddToHistory)&#13;&#10;create a game object at the given position. &#13;&#10;please note that all creation must ensure a closed space.&#13;&#10; &#32; @param name: tons of object types can be created.&#13;&#10; &#32; @param bAddToHistory: true to add to history for a possible undo function in future. Only some object support history.
				</summary>
				<parameter name="name">tons of object types can be created.
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bAddToHistory">true to add to history for a possible undo function in future. Only some object support history.
				</parameter>
			</function>
			<function line="1313" name="UndoBlock">
				<summary>function GameLogic.UndoBlock()&#13;&#10;undo the block creation, only for testing
				</summary>
			</function>
			<function line="1323" name="CreatePortal">
				<summary>function GameLogic.CreatePortal(x, y, z)&#13;&#10;create a portal at the current player's position to the block world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1329" name="GotoBlockWorld">
				<summary>function GameLogic.GotoBlockWorld()&#13;&#10;teleport the user to the closest block world teleport position. If there is no such a position, we will create one in the block world. 
				</summary>
			</function>
			<function line="1341" name="TeleportPlayer">
				<summary>function GameLogic.TeleportPlayer(x, y, z)&#13;&#10;teleport the current player to a givn position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1345" name="GetPlayerPosition">
				<summary>function GameLogic.GetPlayerPosition()&#13;&#10;
				</summary>
			</function>
			<function line="1350" name="IsOwner">
				<summary>function GameLogic.IsOwner()&#13;&#10;is owner
				</summary>
			</function>
			<function line="1356" name="GotoOverworld">
				<summary>function GameLogic.GotoOverworld()&#13;&#10;teleport the user to the over world at the current block world position. 
				</summary>
			</function>
			<function line="1367" name="GetNearestNPC">
				<summary>function GameLogic.GetNearestNPC(radius)&#13;&#10;get the nearest npc around the current player position.&#13;&#10; &#32; @param radius: we will search for all npcs within this radius. if nil, it is 6 meters&#13;&#10; &#32; @return npc_object, dist: nil may be returned if not found. 
				</summary>
				<parameter name="radius">we will search for all npcs within this radius. if nil, it is 6 meters
				</parameter>
				<returns>return , dist: nil may be returned if not found. 
				</returns>
			</function>
			<function line="1394" name="WalkForward">
				<summary>function GameLogic.WalkForward()&#13;&#10;
				</summary>
			</function>
			<function line="1406" name="TalkToNearestNPC">
				<summary>function GameLogic.TalkToNearestNPC()&#13;&#10;talk with the nearest npc if any. 
				</summary>
			</function>
			<function line="1418" name="DoJump">
				<summary>function GameLogic.DoJump()&#13;&#10;
				</summary>
			</function>
			<function line="1472" name="SetTouchMode">
				<summary>function GameLogic.SetTouchMode(mode)&#13;&#10;&#13;&#10; &#32; @param mode: "add", "del"
				</summary>
				<parameter name="mode">"add", "del"
				</parameter>
			</function>
			<function line="1477" name="GetTouchMode">
				<summary>function GameLogic.GetTouchMode()&#13;&#10;&#13;&#10; &#32; @return: "add", "del"
				</summary>
				<returns>return "add", "del"
				</returns>
			</function>
			<function line="1483" name="SetHomePosition">
				<summary>function GameLogic.SetHomePosition(x,y,z)&#13;&#10;set player home position.&#13;&#10; &#32; @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1488" name="GetHomePosition">
				<summary>function GameLogic.GetHomePosition()&#13;&#10;get player home spawn position. 
				</summary>
			</function>
			<function line="1493" name="GetDesktopEntity">
				<summary>function GameLogic.GetDesktopEntity()&#13;&#10;create get desktop entity
				</summary>
			</function>
			<function line="1509" name="GetSkyEntity">
				<summary>function GameLogic.GetSkyEntity()&#13;&#10;create get sky entity
				</summary>
			</function>
			<function line="1523" name="GetFreeCamera">
				<summary>function GameLogic.GetFreeCamera()&#13;&#10;create get free camera entity
				</summary>
			</function>
			<function line="1543" name="GetHomeEntity">
				<summary>function GameLogic.GetHomeEntity()&#13;&#10;may return nil if there is no home entity. 
				</summary>
			</function>
			<function line="1549" name="AppendChat">
				<summary>function GameLogic.AppendChat(text, entity)&#13;&#10;append chat message&#13;&#10; &#32; @param entity: if not nil, entity display name is prepended
				</summary>
				<parameter name="text"/>
				<parameter name="entity">if not nil, entity display name is prepended
				</parameter>
			</function>
			<function line="1572" name="ShowMsg">
				<summary>function GameLogic.ShowMsg(text, level)&#13;&#10;display message such as script syntax or runtime error.&#13;&#10; &#32; @param level: default to 1, which only show in bbs window. 
				</summary>
				<parameter name="text"/>
				<parameter name="level">default to 1, which only show in bbs window. 
				</parameter>
			</function>
			<function line="1591" name="ToggleRunning">
				<summary>function GameLogic.ToggleRunning(bRunning)&#13;&#10;
				</summary>
				<parameter name="bRunning"/>
			</function>
			<function line="1615" name="OnCameraFrameMove">
				<summary>function GameLogic.OnCameraFrameMove()&#13;&#10;
				</summary>
			</function>
			<function line="1640" name="GetShaderManager">
				<summary>function GameLogic.GetShaderManager()&#13;&#10;
				</summary>
			</function>
			<function line="1650" name="ToggleDesktop">
				<summary>function GameLogic.ToggleDesktop(name)&#13;&#10;toggle desktop view
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1691" name="OnToggleViewBobbing">
				<summary>function GameLogic.OnToggleViewBobbing(bChecked)&#13;&#10;
				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1695" name="OnToggleLockMouseWheel">
				<summary>function GameLogic.OnToggleLockMouseWheel(bChecked)&#13;&#10;
				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1701" name="AddBBS">
				<summary>function GameLogic.AddBBS(channel, text, max_duration, color, font_size)&#13;&#10;&#13;&#10; &#32; @param text: nil to clear text on that channel.&#13;&#10;e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</summary>
				<parameter name="channel"/>
				<parameter name="text">nil to clear text on that channel.&#13;&#10;e.g. GameLogic.AddBBS("channel", format("hi"), 4000, "0 255 0")
				</parameter>
				<parameter name="max_duration"/>
				<parameter name="color"/>
				<parameter name="font_size"/>
			</function>
			<function line="1706" name="SetStatus">
				<summary>function GameLogic.SetStatus(text)&#13;&#10;&#13;&#10; &#32; @param text: text to show in the status bar. &#32;if nil, it will clear it. 
				</summary>
				<parameter name="text">text to show in the status bar. &#32;if nil, it will clear it. 
				</parameter>
			</function>
			<function line="1710" name="OnToggleUIScaling">
				<summary>function GameLogic.OnToggleUIScaling(bChecked)&#13;&#10;
				</summary>
				<parameter name="bChecked"/>
			</function>
			<function line="1716" name="ToggleCamera">
				<summary>function GameLogic.ToggleCamera(IsFPSView)&#13;&#10;&#13;&#10; &#32; @param IsFPSView: nil to toggle, otherwise to set
				</summary>
				<parameter name="IsFPSView">nil to toggle, otherwise to set
				</parameter>
			</function>
			<function line="1721" name="GetSim">
				<summary>function GameLogic.GetSim()&#13;&#10;get world simulator
				</summary>
			</function>
			<function line="1725" name="GetCurrentSelection">
				<summary>function GameLogic.GetCurrentSelection()&#13;&#10;
				</summary>
			</function>
			<function line="1731" name="GetFilters">
				<summary>function GameLogic.GetFilters()&#13;&#10;filters are only used by plugins, mods. Standard customization should use Entity:event() and rule bag items.&#13;&#10;some commands, or items use filters for plugin functions. 
				</summary>
			</function>
			<function line="1741" name="ActivateDefaultContext">
				<summary>function GameLogic.ActivateDefaultContext()&#13;&#10;please note this function may return nil if context can not be switched since we are in the middle of some operation. 
				</summary>
			</function>
			<function line="1745" name="ActivateNullContext">
				<summary>function GameLogic.ActivateNullContext()&#13;&#10;
				</summary>
			</function>
			<function line="1755" name="GetSceneContext">
				<summary>function GameLogic.GetSceneContext()&#13;&#10;get current scene context
				</summary>
			</function>
			<function line="1760" name="UserAction">
				<summary>function GameLogic:UserAction(name)&#13;&#10;record a user action to keep track of user behavior. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="1766" name="GetLastUserAction">
				<summary>function GameLogic:GetLastUserAction()&#13;&#10;
				</summary>
			</function>
			<function line="1771" name="GetText">
				<summary>function GameLogic:GetText(text)&#13;&#10;get a translated text
				</summary>
				<parameter name="text"/>
			</function>
			<function line="1777" name="SignIn">
				<summary>function GameLogic.SignIn(title, callbackFunc)&#13;&#10;&#13;&#10; &#32; @param title: additional text to show to the user in the login box&#13;&#10; &#32; @param callbackFunc: optional callback function when user actually signed in
				</summary>
				<parameter name="title">additional text to show to the user in the login box
				</parameter>
				<parameter name="callbackFunc">optional callback function when user actually signed in
				</parameter>
			</function>
			<function line="1789" name="CheckSignedIn">
				<summary>function GameLogic.CheckSignedIn(desc, callback)&#13;&#10;
				</summary>
				<parameter name="desc"/>
				<parameter name="callback"/>
			</function>
			<function line="1803" name="event">
				<summary>function GameLogic:event(event)&#13;&#10;global custom user or game event
				</summary>
				<parameter name="event"/>
			</function>
			<function line="1815" name="IsVip">
				<summary>function GameLogic.IsVip(name, bOpenUIIfNot, callbackFunc, uiType)&#13;&#10;&#13;&#10; &#32; @param name: vip permission to check.&#13;&#10; &#32; @param bOpenUIIfNot: if true, we will display a message box asking user to login and guide the user to activate VIP if not.&#13;&#10; &#32; @param callbackFunc: only called if user is vip and bOpenUIIfNot is true&#13;&#10;return true if the user is vip
				</summary>
				<parameter name="name">vip permission to check.
				</parameter>
				<parameter name="bOpenUIIfNot">if true, we will display a message box asking user to login and guide the user to activate VIP if not.
				</parameter>
				<parameter name="callbackFunc">only called if user is vip and bOpenUIIfNot is true&#13;&#10;return true if the user is vip
				</parameter>
				<parameter name="uiType"/>
			</function>
			<function line="1844" name="IsSocialWorld">
				<summary>function GameLogic.IsSocialWorld()&#13;&#10;if the current world is social, where the current player maintains its social outfit. 
				</summary>
			</function>
			<function line="1849" name="OnCodeError">
				<summary>function GameLogic.OnCodeError(errorMessage, stackInfo)&#13;&#10;
				</summary>
				<parameter name="errorMessage"/>
				<parameter name="stackInfo"/>
			</function>
			<function line="1863" name="AppendABPath">
				<summary>function GameLogic.AppendABPath(test_case)&#13;&#10;
				</summary>
				<parameter name="test_case"/>
			</function>
			<function line="1869" name="GetABPath">
				<summary>function GameLogic.GetABPath()&#13;&#10;
				</summary>
			</function>
			<function line="1873" name="ResetABPath">
				<summary>function GameLogic.ResetABPath()&#13;&#10;
				</summary>
			</function>
			<function line="1878" name="IsInABTest">
				<summary>function GameLogic.IsInABTest(percent)&#13;&#10;select by percentage, not accurate
				</summary>
				<parameter name="percent"/>
			</function>
			<function line="1896" name="CheckVIPItem">
				<summary>function GameLogic.CheckVIPItem(isVip,openTime,freeTime,freeVipSchoolTime,isSchoolTimeOnly)	&#13;&#10;
				</summary>
				<parameter name="isVip"/>
				<parameter name="openTime"/>
				<parameter name="freeTime"/>
				<parameter name="freeVipSchoolTime"/>
				<parameter name="isSchoolTimeOnly"/>
			</function>
			<function line="2032" name="IsLocalVersion">
				<summary>function GameLogic.IsLocalVersion()&#13;&#10;判断是否本地版本
				</summary>
			</function>
			<function line="2038" name="CheckCanLearn">
				<summary>function GameLogic.CheckCanLearn(type)&#13;&#10;判断是否校本课时间
				</summary>
				<parameter name="type"/>
			</function>
		</table>
		<table name="CmdParser" src="script/apps/Aries/Creator/Game/Commands/CmdParser.lua">
			<function line="41" name="ParsePlayer">
				<summary>function CmdParser.ParsePlayer(cmd_text, fromEntity)&#13;&#10;&#13;&#10; &#32; @param cmd_text:&#13;&#10; &#32; @p or @[playername]. if&#13;&#10; &#32; @p it is the last triggering entity or current player. &#13;&#10;if&#13;&#10; &#32; @self, it is the fromEntity. if&#13;&#10; &#32; @a, it means closest nearby player. &#13;&#10;return player_entity, cmd_text_remain, hasInputName, inputName
				</summary>
				<parameter name="cmd_text">
				</parameter>
				<parameter name="fromEntity"/>
			</function>
			<function line="60" name="ParseEntities">
				<summary>function CmdParser.ParseEntities(cmd_text, fromEntity)&#13;&#10;get array of entities using with given filter conditions. &#32;This is advanced way of CmdParser.ParsePlayer&#13;&#10; &#32; @param cmd_text:&#13;&#10; &#32; @category{name=value, ...}, such as '&#13;&#10; &#32; @e{r=10, type="Railcar"}'&#13;&#10; &#32; @return entities, cmd_text_remain: entities may be nil, empty table, or entity array. 
				</summary>
				<parameter name="cmd_text">
				</parameter>
				<parameter name="fromEntity"/>
				<returns>return , cmd_text_remain: entities may be nil, empty table, or entity array. 
				</returns>
			</function>
			<function line="84" name="ParsePos">
				<summary>function CmdParser.ParsePos(cmd_text, entity)&#13;&#10;3d position absolute or relative with ~&#13;&#10;e.g. "20000 0 20000" or "~ ~1 ~" or "~1 ~-2 ~-3" or "20000,0, 20000"&#13;&#10;return x,y,z, cmd_text_remain: cmd_text_remaining is remaining unparsed text. 
				</summary>
				<parameter name="cmd_text"/>
				<parameter name="entity"/>
			</function>
			<function line="120" name="ParsePosInBrackets">
				<summary>function CmdParser.ParsePosInBrackets(cmd_text)&#13;&#10;additional pos in brackets like "(2 -1 0)", "(2 ~ ~)"
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="152" name="ParseBlockId">
				<summary>function CmdParser.ParseBlockId(cmd_text)&#13;&#10;block_id can be number or block name.&#13;&#10;return block_id, cmd_text_remain
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="182" name="ParseColorRGB">
				<summary>function CmdParser.ParseColorRGB(cmd_text, min, max)&#13;&#10;&#13;&#10; &#32; @param cmd_text: can be "1 0 0" or "#ff0000"&#13;&#10; &#32; @param min: 0&#13;&#10; &#32; @param max: 1&#13;&#10; &#32; @return r,g,b in [min, max] range
				</summary>
				<parameter name="cmd_text">can be "1 0 0" or "#ff0000"
				</parameter>
				<parameter name="min">0
				</parameter>
				<parameter name="max">1
				</parameter>
				<returns>return ,g,b in [min, max] range
				</returns>
			</function>
		</table>
		<table name="CommandManager" src="script/apps/Aries/Creator/Game/Commands/CommandManager.lua">
			<function line="32" name="Init">
				<summary>function CommandManager:Init()&#13;&#10;call this when command
				</summary>
			</function>
			<function line="98" name="RunCommand">
				<summary>function CommandManager:RunCommand(cmd_name, cmd_text, ...)&#13;&#10;run one text command&#13;&#10; &#32; @param cmd_name: this can be command name or full command text that begin with "/" or nothing. 
				</summary>
				<parameter name="cmd_name">this can be command name or full command text that begin with "/" or nothing. 
				</parameter>
				<parameter name="cmd_text"/>
			</function>
			<function line="114" name="GetCommandName">
				<summary>function CommandManager:GetCommandName(cmd_text)&#13;&#10;
				</summary>
				<parameter name="cmd_text"/>
			</function>
			<function line="121" name="RunText">
				<summary>function CommandManager:RunText(text, ...)&#13;&#10;run text with may contain one or several commands. &#13;&#10;it will treat ; or \r\n as a new line of command&#13;&#10; &#32; @param ...: ususally fromEntity, 
				</summary>
				<parameter name="text"/>
			</function>
			<function line="133" name="RunInlineCommand">
				<summary>function CommandManager:RunInlineCommand(cmd_text, ...)&#13;&#10;like linux bash shell, text inside $() is regarded as inline command, whose returned value is used in current command. &#13;&#10;brackets can be nested&#13;&#10; &#32; @return the new cmd_text after inline command is executed. 
				</summary>
				<parameter name="cmd_text"/>
				<returns>return new cmd_text after inline command is executed. 
				</returns>
			</function>
			<function line="157" name="Run">
				<summary>function CommandManager:Run(cmd, ... )&#13;&#10;run commands&#13;&#10; &#32; @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. &#13;&#10;if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. &#13;&#10;if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="162" name="GetCmdByString">
				<summary>function CommandManager:GetCmdByString(cmd)&#13;&#10;&#13;&#10; &#32; @return cmd_class, cmd_name, cmd_text;
				</summary>
				<parameter name="cmd"/>
				<returns>return , cmd_name, cmd_text;
				</returns>
			</function>
			<function line="177" name="RunWithVariables">
				<summary>function CommandManager:RunWithVariables(variables, cmd, ...)&#13;&#10;&#13;&#10; &#32; @param variables: nil or a must be an object containning Compile() function.&#13;&#10; &#32; @return p1, p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. &#13;&#10;if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</summary>
				<parameter name="variables">nil or a must be an object containning Compile() function.
				</parameter>
				<parameter name="cmd"/>
				<returns>return , p2: if p1 is false, then p2 is the label name where to goto. If p2 is nil, it means end of all lines. &#13;&#10;if p1 is not false, such as nil or any other value, the next command will be invoked normally. 
				</returns>
			</function>
			<function line="195" name="RunFromConsole">
				<summary>function CommandManager:RunFromConsole(cmd, player)&#13;&#10;run command from console for the current player&#13;&#10; &#32; @param player: fromEntity, if nil, this is current player. last trigger entity is also set to this player. &#13;&#10;after command is run, it will set back to previous value. 
				</summary>
				<parameter name="cmd"/>
				<parameter name="player">fromEntity, if nil, this is current player. last trigger entity is also set to this player. &#13;&#10;after command is run, it will set back to previous value. 
				</parameter>
			</function>
			<function line="233" name="Destroy">
				<summary>function CommandManager:Destroy()&#13;&#10;destroy the command manager
				</summary>
			</function>
			<function line="245" name="Register">
				<summary>function CommandManager:Register(slash_command)&#13;&#10;call this function to register the slash command and init
				</summary>
				<parameter name="slash_command"/>
			</function>
			<function line="260" name="GetCmdList">
				<summary>function CommandManager:GetCmdList(cmds_str, line_reg_exp)&#13;&#10;get command list&#13;&#10; &#32; @param line_reg_exp: default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</summary>
				<parameter name="cmds_str"/>
				<parameter name="line_reg_exp">default to "([%-]*)%s*(/?[^\r\n]+)", change this if one uses different line endings. 
				</parameter>
			</function>
			<function line="281" name="CallFunction">
				<summary>function CommandManager:CallFunction(cmd_list, func_name, variables, fromEntity)&#13;&#10;&#13;&#10; &#32; @param cmd_list: array of command text. if nil, the current command list is used.&#13;&#10; &#32; @param func_name: function name, &#13;&#10;function [name] &#32;&#13;&#10;-- cmd here will be called. &#13;&#10;functionend&#13;&#10;return true, function_return_value: &#32;if function is found and called. otherwise return nil;
				</summary>
				<parameter name="cmd_list">array of command text. if nil, the current command list is used.
				</parameter>
				<parameter name="func_name">function name, &#13;&#10;function [name] &#32;&#13;&#10;-- cmd here will be called. &#13;&#10;functionend&#13;&#10;return true, function_return_value: &#32;if function is found and called. otherwise return nil;
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="315" name="GetCurrentCmdList">
				<summary>function CommandManager:GetCurrentCmdList()&#13;&#10;get the current command list if any that is being executed;
				</summary>
			</function>
			<function line="323" name="RunCmdSegment">
				<summary>function CommandManager:RunCmdSegment(cmd_list, fromLine, toLine, variables, fromEntity)&#13;&#10;run command from fromLine to toLine&#13;&#10; &#32; @param cmd_list: array of cmd strings&#13;&#10; &#32; @param fromLine: default to 1&#13;&#10; &#32; @param toLine: default to #cmd_list
				</summary>
				<parameter name="cmd_list">array of cmd strings
				</parameter>
				<parameter name="fromLine">default to 1
				</parameter>
				<parameter name="toLine">default to #cmd_list
				</parameter>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="451" name="RunCmdList">
				<summary>function CommandManager:RunCmdList(cmd_list, variables, fromEntity)&#13;&#10;run command list and return the result. 
				</summary>
				<parameter name="cmd_list"/>
				<parameter name="variables"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="456" name="LoadCmdHelpFile">
				<summary>function CommandManager:LoadCmdHelpFile()&#13;&#10;
				</summary>
			</function>
			<function line="568" name="GetCmdHelpDS">
				<summary>function CommandManager:GetCmdHelpDS()&#13;&#10;lazy load all command help
				</summary>
			</function>
			<function line="575" name="GetCmdTypeDS">
				<summary>function CommandManager:GetCmdTypeDS()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="EntityManager" src="script/apps/Aries/Creator/Game/Entity/EntityManager.lua">
			<function line="95" name="RegisterEntities">
				<summary>function EntityManager.RegisterEntities()&#13;&#10;
				</summary>
			</function>
			<function line="139" name="RegisterEntityClass">
				<summary>function EntityManager.RegisterEntityClass(name, entity)&#13;&#10;register a new entity class
				</summary>
				<parameter name="name"/>
				<parameter name="entity"/>
			</function>
			<function line="144" name="GetEntityClass">
				<summary>function EntityManager.GetEntityClass(class_name)&#13;&#10;get entity class
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="153" name="GetChild">
				<summary>function EntityManager:GetChild(sName)&#13;&#10;-------------------------------&#13;&#10;attribute interface&#13;&#10;-------------------------------&#13;&#10;get child attribute object. this can be regarded as an intrusive data model of a given object. &#13;&#10;once you get an attribute object, you can use this model class to access all data in the hierarchy.
				</summary>
				<parameter name="sName"/>
			</function>
			<function line="158" name="GetChildAt">
				<summary>function EntityManager:GetChildAt(nRowIndex, nColumnIndex)&#13;&#10;&#13;&#10; &#32; @param nColumnIndex: nil to default to 0;
				</summary>
				<parameter name="nRowIndex"/>
				<parameter name="nColumnIndex">nil to default to 0;
				</parameter>
			</function>
			<function line="169" name="GetChildCount">
				<summary>function EntityManager:GetChildCount(nColumnIndex)&#13;&#10;&#13;&#10; &#32; @param nColumnIndex: if nil, default to 0. 
				</summary>
				<parameter name="nColumnIndex">if nil, default to 0. 
				</parameter>
			</function>
			<function line="178" name="Clear">
				<summary>function EntityManager.Clear()&#13;&#10;
				</summary>
			</function>
			<function line="207" name="IsBlocked">
				<summary>function EntityManager.IsBlocked(bx, by, bz)&#13;&#10;whether the given block is blocked. &#13;&#10;TODO: cache the query result for a single framemove. this function may be called many times in a single frame. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="213" name="AddObject">
				<summary>function EntityManager.AddObject(entity)&#13;&#10;add entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="238" name="AddEntityCount">
				<summary>function EntityManager.AddEntityCount(item_id, delta_count)&#13;&#10;
				</summary>
				<parameter name="item_id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="245" name="RemoveObject">
				<summary>function EntityManager.RemoveObject(entity)&#13;&#10;remove entity from manager. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="265" name="GetAllEntities">
				<summary>function EntityManager.GetAllEntities()&#13;&#10;
				</summary>
			</function>
			<function line="270" name="GetItemCount">
				<summary>function EntityManager.GetItemCount(item_id)&#13;&#10;get item count by block_id
				</summary>
				<parameter name="item_id"/>
			</function>
			<function line="277" name="LoadFromFile">
				<summary>function EntityManager.LoadFromFile(filename)&#13;&#10;Load all entity data from a given XML file.&#13;&#10; &#32; @param filename: if nil, it search the "[currentworld]/entity.xml"&#13;&#10; &#32; @return true if there is local NPC file. or nil if not. 
				</summary>
				<parameter name="filename">if nil, it search the "[currentworld]/entity.xml"
				</parameter>
				<returns>return if there is local NPC file. or nil if not. 
				</returns>
			</function>
			<function line="299" name="InitPlayers">
				<summary>function EntityManager.InitPlayers()&#13;&#10;init player. Set and load current player. 
				</summary>
			</function>
			<function line="313" name="GetPlayerFileName">
				<summary>function EntityManager.GetPlayerFileName(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="318" name="CheckNoEntityCollision">
				<summary>function EntityManager.CheckNoEntityCollision(x,y,z, excludingEntity)&#13;&#10;Returns true if there are no solid, live entities in the specified location, excluding the given entity&#13;&#10; &#32; @param excludingEntity: usually the current player. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="excludingEntity">usually the current player. 
				</parameter>
			</function>
			<function line="331" name="GetLastTriggerEntity">
				<summary>function EntityManager.GetLastTriggerEntity()&#13;&#10;the lastest trigger entity, such as the one that pressed a button or step on a pressure plat, etc. &#32;
				</summary>
			</function>
			<function line="336" name="SetLastTriggerEntity">
				<summary>function EntityManager.SetLastTriggerEntity(entity)&#13;&#10;set lastest trigger entity. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="341" name="LoadPlayer">
				<summary>function EntityManager.LoadPlayer(name)&#13;&#10;get or load or create a player of the given name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="361" name="SetMainPlayer">
				<summary>function EntityManager.SetMainPlayer(playerEntity)&#13;&#10;set the main player that is being controlled. After this call, EntityManager.GetPlayer() will return the given player. &#13;&#10;the main player is always the player being controlled by the PlayerController.&#13;&#10; &#32; @param playerEntity: this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player&#13;&#10; &#32; @return: the previous player if any. 
				</summary>
				<parameter name="playerEntity">this could be EntityPlayerMP for server player, or EntityPlayer for standalone player, or EntityPlayerMPClient for client side main player
				</parameter>
				<returns>return the previous player if any. 
				</returns>
			</function>
			<function line="377" name="SaveAllPlayers">
				<summary>function EntityManager.SaveAllPlayers()&#13;&#10;
				</summary>
			</function>
			<function line="390" name="GetPlayer">
				<summary>function EntityManager.GetPlayer(name)&#13;&#10;get player&#13;&#10; &#32; @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="399" name="GetEntityByObjectID">
				<summary>function EntityManager.GetEntityByObjectID(obj_id)&#13;&#10;get entity
				</summary>
				<parameter name="obj_id"/>
			</function>
			<function line="404" name="GetEntity">
				<summary>function EntityManager.GetEntity(name)&#13;&#10;get by name. 
				</summary>
				<parameter name="name"/>
			</function>
			<function line="411" name="GetEntityById">
				<summary>function EntityManager.GetEntityById(entityId)&#13;&#10;get by id. 
				</summary>
				<parameter name="entityId"/>
			</function>
			<function line="418" name="RenameEntity">
				<summary>function EntityManager.RenameEntity(entity, old_name, new_name)&#13;&#10;rename a given entity in the manager. 
				</summary>
				<parameter name="entity"/>
				<parameter name="old_name"/>
				<parameter name="new_name"/>
			</function>
			<function line="432" name="GetEntitiesByItemID">
				<summary>function EntityManager.GetEntitiesByItemID(item_id)&#13;&#10;get all entities by block id.&#13;&#10; &#32; @return nil or array of entities. 
				</summary>
				<parameter name="item_id"/>
				<returns>return or array of entities. 
				</returns>
			</function>
			<function line="443" name="SetEntityByObjectID">
				<summary>function EntityManager.SetEntityByObjectID(obj_id, entity)&#13;&#10;
				</summary>
				<parameter name="obj_id"/>
				<parameter name="entity"/>
			</function>
			<function line="449" name="HasEntityInBlock">
				<summary>function EntityManager.HasEntityInBlock(bx, by, bz)&#13;&#10;return true if there is at least one entity at the blocok position. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="460" name="HasNonPlayerEntityInBlock">
				<summary>function EntityManager.HasNonPlayerEntityInBlock(bx, by, bz)&#13;&#10;has non-player entity
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="472" name="GetEntitiesInBlock">
				<summary>function EntityManager.GetEntitiesInBlock(bx, by, bz)&#13;&#10;get all entities in block. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="482" name="GetBlockEntity">
				<summary>function EntityManager.GetBlockEntity(bx, by, bz)&#13;&#10;get the block entity excluding other entity&#13;&#10;Please note, we can still get block entity like movie or code block even if the block region is unloaded. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="494" name="GetEntityInBlock">
				<summary>function EntityManager.GetEntityInBlock(bx, by, bz, class_name)&#13;&#10;get the first entity that matches the class_name
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="508" name="GetEntitiesByMinMax">
				<summary>function EntityManager.GetEntitiesByMinMax(min_x, min_y, min_z, max_x, max_y, max_z, entity_class)&#13;&#10;&#13;&#10; &#32; @param min_x, min_y, min_z: block position&#13;&#10; &#32; @param max_x, max_y, max_z: block position&#13;&#10; &#32; @param entity_class: nil to match any entity. 
				</summary>
				<parameter name="min_x">, min_y, min_z: block position
				</parameter>
				<parameter name="min_y"/>
				<parameter name="min_z"/>
				<parameter name="max_x">, max_y, max_z: block position
				</parameter>
				<parameter name="max_y"/>
				<parameter name="max_z"/>
				<parameter name="entity_class">nil to match any entity. 
				</parameter>
			</function>
			<function line="529" name="GetEntitiesByAABBOfType">
				<summary>function EntityManager.GetEntitiesByAABBOfType(entity_class, aabb)&#13;&#10;&#13;&#10; &#32; @param entity_class: nil to match any entity. 
				</summary>
				<parameter name="entity_class">nil to match any entity. 
				</parameter>
				<parameter name="aabb"/>
			</function>
			<function line="560" name="GetEntitiesByAABBExcept">
				<summary>function EntityManager.GetEntitiesByAABBExcept(aabb, excludingEntity)&#13;&#10;Will get all entities within the specified AABB excluding the one passed into it. Args: entityToExclude, aabb&#13;&#10; &#32; @return array of entities
				</summary>
				<parameter name="aabb"/>
				<parameter name="excludingEntity"/>
				<returns>return of entities
				</returns>
			</function>
			<function line="592" name="RemoveBlockEntity">
				<summary>function EntityManager.RemoveBlockEntity(bx, by, bz, class_name)&#13;&#10;remove entity by its class_name at the given block position. &#13;&#10;all matching entities will be removed. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="class_name"/>
			</function>
			<function line="619" name="GetBlockContainer">
				<summary>function EntityManager.GetBlockContainer(bx,by,bz)&#13;&#10;private: 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="631" name="SetBlockContainer">
				<summary>function EntityManager.SetBlockContainer(bx,by,bz, block_container)&#13;&#10;
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="block_container"/>
			</function>
			<function line="638" name="GetEntitiesInChunkColumn">
				<summary>function EntityManager.GetEntitiesInChunkColumn(cx, cz, bCreateIfNotExist)&#13;&#10;&#13;&#10; &#32; @param cx, cz: chunk pos, if cz is nil, cx is packed index&#13;&#10;return array of all entities in a given chunk column
				</summary>
				<parameter name="cx">, cz: chunk pos, if cz is nil, cx is packed index&#13;&#10;return array of all entities in a given chunk column
				</parameter>
				<parameter name="cz"/>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="649" name="GetRegionContainer">
				<summary>function EntityManager.GetRegionContainer(bx,bz)&#13;&#10;create get region object
				</summary>
				<parameter name="bx"/>
				<parameter name="bz"/>
			</function>
			<function line="664" name="GetRegion">
				<summary>function EntityManager.GetRegion(bx,bz)&#13;&#10;only get region without creating it. 
				</summary>
				<parameter name="bx"/>
				<parameter name="bz"/>
			</function>
			<function line="674" name="SaveToFile">
				<summary>function EntityManager.SaveToFile(bSaveToLastSaveFolder)&#13;&#10;
				</summary>
				<parameter name="bSaveToLastSaveFolder"/>
			</function>
			<function line="743" name="SetChunkActive">
				<summary>function EntityManager.SetChunkActive(chunkX, chunkZ, isActive)&#13;&#10;&#13;&#10; &#32; @param chunkX, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index&#13;&#10;make the chunk at location always active or not. 
				</summary>
				<parameter name="chunkX">, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index&#13;&#10;make the chunk at location always active or not. 
				</parameter>
				<parameter name="chunkZ"/>
				<parameter name="isActive"/>
			</function>
			<function line="760" name="TickChunk">
				<summary>function EntityManager.TickChunk(chunkX, chunkZ, tick)&#13;&#10;&#13;&#10; &#32; @param chunkX, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index&#13;&#10; &#32; @param tick: if nil, default to current frame_count
				</summary>
				<parameter name="chunkX">, chunkZ: chunk pos, if chunkZ is nil, chunkX is packed index
				</parameter>
				<parameter name="chunkZ"/>
				<parameter name="tick">if nil, default to current frame_count
				</parameter>
			</function>
			<function line="770" name="AddToSentientList">
				<summary>function EntityManager.AddToSentientList(entity)&#13;&#10;set an entity so that its framemove function should always be called regardless of player position
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="777" name="RemoveFromSentientList">
				<summary>function EntityManager.RemoveFromSentientList(entity)&#13;&#10;remove an entity so that its framemove function should not be called unless it falls into player sensible range.
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="792" name="GetDeltaTime">
				<summary>function EntityManager:GetDeltaTime()&#13;&#10;
				</summary>
			</function>
			<function line="797" name="FrameMove">
				<summary>function EntityManager.FrameMove(deltaTime)&#13;&#10;called every frame to simulate objects 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="847" name="FrameMoveQueueThisFrame">
				<summary>function EntityManager.FrameMoveQueueThisFrame(deltaTime, cur_time, destroy_list)&#13;&#10;pending list to framemove
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="857" name="SetFocus">
				<summary>function EntityManager.SetFocus(entity)&#13;&#10;set focus to the given entity. &#13;&#10;The entity class's SetFocus() function should always call this fuction before it return true. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="870" name="GetFocus">
				<summary>function EntityManager.GetFocus()&#13;&#10;get current focus
				</summary>
			</function>
			<function line="875" name="FrameMoveDynamicObjects">
				<summary>function EntityManager.FrameMoveDynamicObjects(deltaTime, cur_time, destroy_list)&#13;&#10;dynamic object is always framemoved until they are dead. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="892" name="FrameMoveAllActiveChunks">
				<summary>function EntityManager.FrameMoveAllActiveChunks(deltaTime, cur_time, destroy_list)&#13;&#10;
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="918" name="MakeChunksNearPlayerActive">
				<summary>function EntityManager.MakeChunksNearPlayerActive(playerEntity, grid_radius)&#13;&#10;all entities in the radius of the given player is framemoved.&#13;&#10; &#32; @param grid_radius: if nil, default to playerEntity:GetSentientRadius(). 
				</summary>
				<parameter name="playerEntity"/>
				<parameter name="grid_radius">if nil, default to playerEntity:GetSentientRadius(). 
				</parameter>
			</function>
			<function line="931" name="FrameMoveEntities">
				<summary>function EntityManager.FrameMoveEntities(entities, deltaTime, cur_time, destroy_list)&#13;&#10;all entities in the list is framemoved. 
				</summary>
				<parameter name="entities"/>
				<parameter name="deltaTime"/>
				<parameter name="cur_time"/>
				<parameter name="destroy_list"/>
			</function>
			<function line="951" name="FrameMoveSentientList">
				<summary>function EntityManager.FrameMoveSentientList(deltaTime, cur_time, destroy_list)&#13;&#10;for always sentient objects, like CommandEntity with timed event&#13;&#10; &#32; @param deltaTime: in seconds&#13;&#10; &#32; @param cur_time: in seconds
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="cur_time">in seconds
				</parameter>
				<parameter name="destroy_list"/>
			</function>
			<function line="974" name="FilterEntity">
				<summary>function EntityManager.FilterEntity(entity, params, entities)&#13;&#10;filter entity by params&#13;&#10; &#32; @param params: {name, type, nontype, mname, count}&#13;&#10;name: only entities with given name.&#13;&#10;mname: match regular expression of the given name&#13;&#10;type: only entities of given type. &#13;&#10;nontype: only entities not of the given type&#13;&#10;r: get entities only less than r blocks from the origin&#13;&#10;rm: get entities only more than rm blocks from the origin.&#13;&#10;count: return as most this number of objects, usually in order of distance from the origin.&#13;&#10; &#32; @param entities: nil or array of comparing entities&#13;&#10; &#32; @return entity of nil
				</summary>
				<parameter name="entity"/>
				<parameter name="params">{name, type, nontype, mname, count}&#13;&#10;name: only entities with given name.&#13;&#10;mname: match regular expression of the given name&#13;&#10;type: only entities of given type. &#13;&#10;nontype: only entities not of the given type&#13;&#10;r: get entities only less than r blocks from the origin&#13;&#10;rm: get entities only more than rm blocks from the origin.&#13;&#10;count: return as most this number of objects, usually in order of distance from the origin.
				</parameter>
				<parameter name="entities">nil or array of comparing entities
				</parameter>
				<returns>return of nil
				</returns>
			</function>
			<function line="1027" name="FindEntities">
				<summary>function EntityManager.FindEntities(params)&#13;&#10;find entities by a number of matching parameters&#13;&#10; &#32; @param params: {category, type, nontype, name, x,y,z,dz,dy,dz,r,rm, count}&#13;&#10;category: "e" all entities except block entities (if nil, it default to "e"),"p" for nearest player, "r" random player, "a" all players&#13;&#10;"all" for all entities including block entities&#13;&#10;"b" for block entities&#13;&#10;"searchable" for all searchable entities including block entities &#13;&#10;name: only entities with given name.&#13;&#10;type: only entities of given type. &#13;&#10;nontype: only entities not of the given type&#13;&#10;x,y,z: center of origin to selects entities. &#13;&#10;r: get entities only less than r blocks from the origin&#13;&#10;rm: get entities only more than rm blocks from the origin.&#13;&#10;dx,dy,dz: this is a cubic volume as defined by extending these blocks from the origin.&#13;&#10;count: return as most this number of objects, usually in order of distance from the origin.&#13;&#10; &#32; @return nil or array of entities
				</summary>
				<parameter name="params">{category, type, nontype, name, x,y,z,dz,dy,dz,r,rm, count}&#13;&#10;category: "e" all entities except block entities (if nil, it default to "e"),"p" for nearest player, "r" random player, "a" all players&#13;&#10;"all" for all entities including block entities&#13;&#10;"b" for block entities&#13;&#10;"searchable" for all searchable entities including block entities &#13;&#10;name: only entities with given name.&#13;&#10;type: only entities of given type. &#13;&#10;nontype: only entities not of the given type&#13;&#10;x,y,z: center of origin to selects entities. &#13;&#10;r: get entities only less than r blocks from the origin&#13;&#10;rm: get entities only more than rm blocks from the origin.&#13;&#10;dx,dy,dz: this is a cubic volume as defined by extending these blocks from the origin.&#13;&#10;count: return as most this number of objects, usually in order of distance from the origin.
				</parameter>
				<returns>return or array of entities
				</returns>
			</function>
		</table>
		<table name="Entity" src="script/apps/Aries/Creator/Game/Entity/Entity.lua">
			<function line="112" name="ctor">
				<summary>function Entity:ctor()&#13;&#10;&#13;&#10; &#32; @param x,y,z: initial real world position.&#13;&#10; &#32; @param radius: the half radius of the object. 
				</summary>
			</function>
			<function line="123" name="SetEntityId">
				<summary>function Entity:SetEntityId(id)&#13;&#10;this function can only be called before entity is attached, such as in Init() function. &#13;&#10;e.g. when that server and client need to share same id
				</summary>
				<parameter name="id"/>
			</function>
			<function line="134" name="GetCameraRoll">
				<summary>function Entity:GetCameraRoll()&#13;&#10;when entity is focused, this is the additional camera roll applied.
				</summary>
			</function>
			<function line="138" name="SetCameraRoll">
				<summary>function Entity:SetCameraRoll(roll)&#13;&#10;
				</summary>
				<parameter name="roll"/>
			</function>
			<function line="148" name="event">
				<summary>function Entity:event(event)&#13;&#10;all kinds of custom user or game event, that is handled mostly by rule bag items.&#13;&#10;Entity event is the only source of inputs to the containing rule bag items, which the user can customize using ItemCommand, ItemScript, etc. &#13;&#10;In the big picture, event forms a dynamic and user configurable network of connections among entities and rule bag items. &#13;&#10;Items in rule bags are executed in sequence, until one of them accept the event. &#13;&#10;Some events are system buildin events that is fired automatically by the system like like mousePressEvent, mouseReleaseEvent, worldLoadedEvent, blockTickEvent, timerEvent, etc. &#13;&#10;Custom events may be sent to any entity via /sendevent command to achieve any user defined world logics. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="175" name="GetType">
				<summary>function Entity:GetType()&#13;&#10;static method
				</summary>
			</function>
			<function line="181" name="IsOfType">
				<summary>function Entity:IsOfType(class_name)&#13;&#10;static method: recursively check if entity is derived from a given type.&#13;&#10; &#32; @param class_name: if nil, it will always return true. 
				</summary>
				<parameter name="class_name">if nil, it will always return true. 
				</parameter>
			</function>
			<function line="185" name="Reset">
				<summary>function Entity:Reset()&#13;&#10;
				</summary>
			</function>
			<function line="194" name="IsRemote">
				<summary>function Entity:IsRemote()&#13;&#10;return true if the entity is controlled remotely by the server. &#13;&#10;i.e. whether this entity is a client proxy of server entity. 
				</summary>
			</function>
			<function line="200" name="SetLocal">
				<summary>function Entity:SetLocal(bForceLocal)&#13;&#10;set whether this entity is a local entity even the game logic is in remote mode.&#13;&#10; &#32; @sa self:IsRemote().
				</summary>
				<parameter name="bForceLocal"/>
			</function>
			<function line="205" name="GetEditModel">
				<summary>function Entity:GetEditModel()&#13;&#10;created on demand for editors
				</summary>
			</function>
			<function line="217" name="GetInventory">
				<summary>function Entity:GetInventory()&#13;&#10;get the inventory object if any
				</summary>
			</function>
			<function line="222" name="GetInventoryView">
				<summary>function Entity:GetInventoryView()&#13;&#10;get the inventory view object if any. It will create one if inventory exist but view not exist. 
				</summary>
			</function>
			<function line="232" name="SetPersistent">
				<summary>function Entity:SetPersistent(bIsPersistent)&#13;&#10;whether the entity should be serialized to disk. 
				</summary>
				<parameter name="bIsPersistent"/>
			</function>
			<function line="238" name="EnableAnimation">
				<summary>function Entity:EnableAnimation(bEnable)&#13;&#10;whether automatically advance local time of current animation id. true by default. &#13;&#10;Maybe set to false during movie actor action playback 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="245" name="IsBiped">
				<summary>function Entity:IsBiped()&#13;&#10;
				</summary>
			</function>
			<function line="249" name="SetDummy">
				<summary>function Entity:SetDummy(bIsDummy)&#13;&#10;whether it will check for collision detection and run FrameMove 
				</summary>
				<parameter name="bIsDummy"/>
			</function>
			<function line="254" name="IsDummy">
				<summary>function Entity:IsDummy()&#13;&#10;whether it will check for collision detection and run FrameMove 
				</summary>
			</function>
			<function line="260" name="SetGroupId">
				<summary>function Entity:SetGroupId(group_id)&#13;&#10;&#13;&#10; &#32; @param group_id: we can have at most 0-31 groups. if group_id&gt;=32, no one will sense it.&#13;&#10;if nil, it will be a group id that cannot be detected. 
				</summary>
				<parameter name="group_id">we can have at most 0-31 groups. if group_id&gt;=32, no one will sense it.&#13;&#10;if nil, it will be a group id that cannot be detected. 
				</parameter>
			</function>
			<function line="268" name="GetGroupId">
				<summary>function Entity:GetGroupId()&#13;&#10;
				</summary>
			</function>
			<function line="274" name="SetSentientField">
				<summary>function Entity:SetSentientField(field, bEnable)&#13;&#10;&#13;&#10; &#32; @param field: if 0, it will perceive no one.&#13;&#10; &#32; @param bEnable: default to true. turn on and off one or more sentient fields
				</summary>
				<parameter name="field">if 0, it will perceive no one.
				</parameter>
				<parameter name="bEnable">default to true. turn on and off one or more sentient fields
				</parameter>
			</function>
			<function line="281" name="FaceTarget">
				<summary>function Entity:FaceTarget(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="284" name="ToggleFly">
				<summary>function Entity:ToggleFly(bFly)&#13;&#10;
				</summary>
				<parameter name="bFly"/>
			</function>
			<function line="288" name="SetWorld">
				<summary>function Entity:SetWorld(world)&#13;&#10;Sets the reference to the World object.
				</summary>
				<parameter name="world"/>
			</function>
			<function line="296" name="LoadFromXMLNode">
				<summary>function Entity:LoadFromXMLNode(node)&#13;&#10;load from an xml node. 
				</summary>
				<parameter name="node"/>
			</function>
			<function line="365" name="GetVariables">
				<summary>function Entity:GetVariables()&#13;&#10;get the variables object for custom user values. 
				</summary>
			</function>
			<function line="372" name="SaveToXMLNode">
				<summary>function Entity:SaveToXMLNode(node, bSort)&#13;&#10;
				</summary>
				<parameter name="node"/>
				<parameter name="bSort"/>
			</function>
			<function line="414" name="SetFocus">
				<summary>function Entity:SetFocus()&#13;&#10;let the camera focus on this player and take control of it.&#13;&#10; &#32; @note: please note if this return nil, and does not call EntityManager.SetFocus(), OnFocusIn and OnFocusOut will never be called&#13;&#10; &#32; @return return true if focus can be set
				</summary>
				<returns>return true if focus can be set
				</returns>
			</function>
			<function line="417" name="HasFocus">
				<summary>function Entity:HasFocus()&#13;&#10;
				</summary>
			</function>
			<function line="422" name="OnFocusIn">
				<summary>function Entity:OnFocusIn()&#13;&#10;called after focus is set
				</summary>
			</function>
			<function line="436" name="SetSkipPicking">
				<summary>function Entity:SetSkipPicking(bSkipPicking)&#13;&#10;
				</summary>
				<parameter name="bSkipPicking"/>
			</function>
			<function line="444" name="OnFocusOut">
				<summary>function Entity:OnFocusOut()&#13;&#10;called before focus is lost
				</summary>
			</function>
			<function line="455" name="SetVisible">
				<summary>function Entity:SetVisible(bVisible)&#13;&#10;
				</summary>
				<parameter name="bVisible"/>
			</function>
			<function line="467" name="IsVisible">
				<summary>function Entity:IsVisible()&#13;&#10;
				</summary>
			</function>
			<function line="471" name="IsFlying">
				<summary>function Entity:IsFlying()&#13;&#10;
				</summary>
			</function>
			<function line="474" name="IsRunning">
				<summary>function Entity:IsRunning()&#13;&#10;
				</summary>
			</function>
			<function line="477" name="ToggleRunning">
				<summary>function Entity:ToggleRunning()&#13;&#10;
				</summary>
			</function>
			<function line="480" name="GetSpeedScale">
				<summary>function Entity:GetSpeedScale()&#13;&#10;
				</summary>
			</function>
			<function line="485" name="GetCurrentSpeedScale">
				<summary>function Entity:GetCurrentSpeedScale()&#13;&#10;take running and flying into account. 
				</summary>
			</function>
			<function line="500" name="GetWalkSpeed">
				<summary>function Entity:GetWalkSpeed()&#13;&#10;
				</summary>
			</function>
			<function line="504" name="SetWalkSpeed">
				<summary>function Entity:SetWalkSpeed(speed)&#13;&#10;
				</summary>
				<parameter name="speed"/>
			</function>
			<function line="508" name="SetSpeedScale">
				<summary>function Entity:SetSpeedScale(value)&#13;&#10;
				</summary>
				<parameter name="value"/>
			</function>
			<function line="512" name="GetJumpupSpeed">
				<summary>function Entity:GetJumpupSpeed()&#13;&#10;
				</summary>
			</function>
			<function line="516" name="CanReachBlockAt">
				<summary>function Entity:CanReachBlockAt(x,y,z, mode)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mode"/>
			</function>
			<function line="521" name="CanTeleport">
				<summary>function Entity:CanTeleport()&#13;&#10;whether the entity can be teleported to another place, by teleport stone for instance. 
				</summary>
			</function>
			<function line="528" name="ToggleWalkRun">
				<summary>function Entity:ToggleWalkRun(bWalking)&#13;&#10;usually holding shift key will toggle to walk mode.&#13;&#10; &#32; @param bWalking: if nil it will toggle. if true, it will force walk or run. 
				</summary>
				<parameter name="bWalking">if nil it will toggle. if true, it will force walk or run. 
				</parameter>
			</function>
			<function line="543" name="EnableLOD">
				<summary>function Entity:EnableLOD(bEnable)&#13;&#10;enable internel mesh level of details if any. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="550" name="IsLODEnabled">
				<summary>function Entity:IsLODEnabled()&#13;&#10;
				</summary>
			</function>
			<function line="559" name="IsWalking">
				<summary>function Entity:IsWalking()&#13;&#10;all entity default to running (not walking). 
				</summary>
			</function>
			<function line="572" name="SetAnimation">
				<summary>function Entity:SetAnimation(filenames)&#13;&#10;build animation sequence table to be fed to entity.&#13;&#10; &#32; @param filenames: can be filename, animation name, animation id or array of above things. currently only two animation is supported. &#13;&#10;such as {4,0} 
				</summary>
				<parameter name="filenames">can be filename, animation name, animation id or array of above things. currently only two animation is supported. &#13;&#10;such as {4,0} 
				</parameter>
			</function>
			<function line="606" name="GetLastAnimId">
				<summary>function Entity:GetLastAnimId()&#13;&#10;get last animation id. this may return nil, which usually mean 0.
				</summary>
			</function>
			<function line="612" name="ShowHeadOnDisplay">
				<summary>function Entity:ShowHeadOnDisplay(bShow)&#13;&#10;enable headon display
				</summary>
				<parameter name="bShow"/>
			</function>
			<function line="615" name="IsShowHeadOnDisplay">
				<summary>function Entity:IsShowHeadOnDisplay()&#13;&#10;
				</summary>
			</function>
			<function line="618" name="GetHeadonEntity">
				<summary>function Entity:GetHeadonEntity(index)&#13;&#10;
				</summary>
				<parameter name="index"/>
			</function>
			<function line="622" name="SetHeadonEntity">
				<summary>function Entity:SetHeadonEntity(index, entity)&#13;&#10;
				</summary>
				<parameter name="index"/>
				<parameter name="entity"/>
			</function>
			<function line="632" name="SetHeadOnDisplay">
				<summary>function Entity:SetHeadOnDisplay(params, headonIndex)&#13;&#10;display a mcml v2 url or xmlnode on top of the entity.&#13;&#10; &#32; @param params: {url=ParaXML.LuaXML_ParseString('&lt;pe:mcml&gt;&lt;div style="background-color:red"&gt;hello world&lt;/div&gt;&lt;/pe:mcml&gt;'), pageGlobalTable, is3D:bool}&#13;&#10;if nil, it will remove head on display&#13;&#10; &#32; @param headonIndex: default to 0, it can also be 1 or 2. so that multiple headon display can be shown at the same time.&#13;&#10; &#32; @return the headon display object if created
				</summary>
				<parameter name="params">{url=ParaXML.LuaXML_ParseString('&lt;pe:mcml&gt;&lt;div style="background-color:red"&gt;hello world&lt;/div&gt;&lt;/pe:mcml&gt;'), pageGlobalTable, is3D:bool}&#13;&#10;if nil, it will remove head on display
				</parameter>
				<parameter name="headonIndex">default to 0, it can also be 1 or 2. so that multiple headon display can be shown at the same time.
				</parameter>
				<returns>return headon display object if created
				</returns>
			</function>
			<function line="662" name="AddStat">
				<summary>function Entity:AddStat(id, delta_count)&#13;&#10;add stat
				</summary>
				<parameter name="id"/>
				<parameter name="delta_count"/>
			</function>
			<function line="666" name="GetPortaitObjectParams">
				<summary>function Entity:GetPortaitObjectParams(bForceRefresh)&#13;&#10;add stat&#13;&#10;get object params table to create the portait in entity dialog.&#13;&#10; &#32; @param bForceRefresh: if true, it will fetch again from innerObject. 
				</summary>
				<parameter name="bForceRefresh">if true, it will fetch again from innerObject. 
				</parameter>
			</function>
			<function line="698" name="CreateInnerObject">
				<summary>function Entity:CreateInnerObject(filename, isCharacter, offsetY, scaling, skin, name)&#13;&#10;this is helper function that derived class can use to create an inner mesh or character object. 
				</summary>
				<parameter name="filename"/>
				<parameter name="isCharacter"/>
				<parameter name="offsetY"/>
				<parameter name="scaling"/>
				<parameter name="skin"/>
				<parameter name="name"/>
			</function>
			<function line="730" name="DestroyInnerObject">
				<summary>function Entity:DestroyInnerObject()&#13;&#10;this is helper function that derived class can use to destroy an inner mesh or character object. 
				</summary>
			</function>
			<function line="743" name="OnShiftKeyPressed">
				<summary>function Entity:OnShiftKeyPressed()&#13;&#10;this is called on each tick, when this entity has focus and user is pressing and holding shift key. 
				</summary>
			</function>
			<function line="747" name="OnShiftKeyReleased">
				<summary>function Entity:OnShiftKeyReleased()&#13;&#10;this is called, when this entity has focus and user is just released the shift key. 
				</summary>
			</function>
			<function line="750" name="Jump">
				<summary>function Entity:Jump()&#13;&#10;
				</summary>
			</function>
			<function line="766" name="SetGravity">
				<summary>function Entity:SetGravity(value)&#13;&#10;&#13;&#10; &#32; @param value: if nil, it will use the global gravity. 
				</summary>
				<parameter name="value">if nil, it will use the global gravity. 
				</parameter>
			</function>
			<function line="770" name="GetGravity">
				<summary>function Entity:GetGravity()&#13;&#10;
				</summary>
			</function>
			<function line="775" name="GetDataContainer">
				<summary>function Entity:GetDataContainer()&#13;&#10;get data container. 
				</summary>
			</function>
			<function line="785" name="IsPersistent">
				<summary>function Entity:IsPersistent()&#13;&#10;whether its persistent. 
				</summary>
			</function>
			<function line="791" name="OnActivated">
				<summary>function Entity:OnActivated(triggerEntity)&#13;&#10;virtual function: handle some external input. &#13;&#10;default is do nothing. return true is something is processed. 
				</summary>
				<parameter name="triggerEntity"/>
			</function>
			<function line="799" name="IsRegional">
				<summary>function Entity:IsRegional()&#13;&#10;if true, always serialize to 512*512 regional entity file&#13;&#10;block based entity has this set to true. 
				</summary>
			</function>
			<function line="804" name="init">
				<summary>function Entity:init()&#13;&#10;virtual function: 
				</summary>
			</function>
			<function line="809" name="OnCollideWithPlayer">
				<summary>function Entity:OnCollideWithPlayer(from_entity, bx,by,bz)&#13;&#10;player entity collided with this entity
				</summary>
				<parameter name="from_entity"/>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="813" name="OnHit">
				<summary>function Entity:OnHit(attack_value, fromX, fromY, fromZ)&#13;&#10;virtual function: when the entity is hit (attacked) by the missile
				</summary>
				<parameter name="attack_value"/>
				<parameter name="fromX"/>
				<parameter name="fromY"/>
				<parameter name="fromZ"/>
			</function>
			<function line="817" name="OnClick">
				<summary>function Entity:OnClick(x,y,z, mouse_button,entity,side)&#13;&#10;virtual function:
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side"/>
			</function>
			<function line="820" name="GetBlockId">
				<summary>function Entity:GetBlockId()&#13;&#10;
				</summary>
			</function>
			<function line="825" name="GetCommandTable">
				<summary>function Entity:GetCommandTable()&#13;&#10;return a table array containing all commands or comments. 
				</summary>
			</function>
			<function line="838" name="SetCommandTable">
				<summary>function Entity:SetCommandTable(commands)&#13;&#10;set command table
				</summary>
				<parameter name="commands"/>
			</function>
			<function line="848" name="GetCommandList">
				<summary>function Entity:GetCommandList()&#13;&#10;get latest command list. comments is empty line&#13;&#10;it will cache last parsed result
				</summary>
			</function>
			<function line="861" name="HasCommand">
				<summary>function Entity:HasCommand()&#13;&#10;bool: whether has command panel
				</summary>
			</function>
			<function line="866" name="GetCommandTitle">
				<summary>function Entity:GetCommandTitle()&#13;&#10;the title text to display (can be mcml)
				</summary>
			</function>
			<function line="870" name="HasRule">
				<summary>function Entity:HasRule()&#13;&#10;bool: whether show the rule panel
				</summary>
			</function>
			<function line="875" name="GetRuleTitle">
				<summary>function Entity:GetRuleTitle()&#13;&#10;the title text to display (can be mcml)
				</summary>
			</function>
			<function line="880" name="ActivateCommands">
				<summary>function Entity:ActivateCommands(triggerEntity)&#13;&#10;This function is called manually. Such as during OnActivated().&#13;&#10; &#32; @param triggerEntity: this is the triggering player or sometimes the entity itself if /activate self is used. 
				</summary>
				<parameter name="triggerEntity">this is the triggering player or sometimes the entity itself if /activate self is used. 
				</parameter>
			</function>
			<function line="900" name="ActivateRules">
				<summary>function Entity:ActivateRules(triggerEntity)&#13;&#10;this function is called automatically when this entity is activated. &#13;&#10;override this function to change behavior.&#13;&#10;build, reload and activate all rules in the self.rulebag
				</summary>
				<parameter name="triggerEntity"/>
			</function>
			<function line="917" name="HasBag">
				<summary>function Entity:HasBag()&#13;&#10;bool: whether show the bag panel
				</summary>
			</function>
			<function line="922" name="GetBagTitle">
				<summary>function Entity:GetBagTitle()&#13;&#10;the title text to display (can be mcml)
				</summary>
			</function>
			<function line="927" name="SetDisplayName">
				<summary>function Entity:SetDisplayName(v)&#13;&#10;virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="931" name="GetDisplayName">
				<summary>function Entity:GetDisplayName()&#13;&#10;
				</summary>
			</function>
			<function line="936" name="SetName">
				<summary>function Entity:SetName(v)&#13;&#10;internal name 
				</summary>
				<parameter name="v"/>
			</function>
			<function line="944" name="GetName">
				<summary>function Entity:GetName()&#13;&#10;
				</summary>
			</function>
			<function line="949" name="SetCommand">
				<summary>function Entity:SetCommand(cmd)&#13;&#10;virtual function:
				</summary>
				<parameter name="cmd"/>
			</function>
			<function line="953" name="GetCommand">
				<summary>function Entity:GetCommand()&#13;&#10;
				</summary>
			</function>
			<function line="958" name="Refresh">
				<summary>function Entity:Refresh()&#13;&#10;virtual function
				</summary>
			</function>
			<function line="962" name="CreateFromPool">
				<summary>function Entity:CreateFromPool()&#13;&#10;static function: in the Destroy function, the entity are recollected
				</summary>
			</function>
			<function line="968" name="Create">
				<summary>function Entity:Create(o, xml_node)&#13;&#10;factory class to create an instance of the entity 
				</summary>
				<parameter name="o"/>
				<parameter name="xml_node"/>
			</function>
			<function line="976" name="SetInnerObject">
				<summary>function Entity:SetInnerObject(obj)&#13;&#10;
				</summary>
				<parameter name="obj"/>
			</function>
			<function line="987" name="GetInnerObject">
				<summary>function Entity:GetInnerObject()&#13;&#10;get the ParaObject from self.obj_id. &#13;&#10;performace optimized: since we will cache obj in self.obj on first call. &#13;&#10;and use ParaScene.CheckExist to check validity on subsequent calls, which is LuaJit optimized. &#13;&#10;thus calling this function each frame is fine. 
				</summary>
			</function>
			<function line="1004" name="GetObjID">
				<summary>function Entity:GetObjID()&#13;&#10;
				</summary>
			</function>
			<function line="1014" name="SetObjID">
				<summary>function Entity:SetObjID(id)&#13;&#10;obsoleted, use SetInnerObject instead
				</summary>
				<parameter name="id"/>
			</function>
			<function line="1020" name="GetOpacity">
				<summary>function Entity:GetOpacity()&#13;&#10;
				</summary>
			</function>
			<function line="1024" name="SetOpacity">
				<summary>function Entity:SetOpacity(value)&#13;&#10;
				</summary>
				<parameter name="value"/>
			</function>
			<function line="1029" name="GetItemClass">
				<summary>function Entity:GetItemClass()&#13;&#10;get the associated item class. 
				</summary>
			</function>
			<function line="1036" name="IsSearchable">
				<summary>function Entity:IsSearchable()&#13;&#10;whether it can be searched via Ctrl+F FindBlockTask
				</summary>
			</function>
			<function line="1040" name="GetBlock">
				<summary>function Entity:GetBlock()&#13;&#10;get the associated block template class. 
				</summary>
			</function>
			<function line="1050" name="SetDead">
				<summary>function Entity:SetDead()&#13;&#10;set as dead and will be destroyed in the next framemove.
				</summary>
			</function>
			<function line="1054" name="IsDead">
				<summary>function Entity:IsDead()&#13;&#10;
				</summary>
			</function>
			<function line="1058" name="Destroy">
				<summary>function Entity:Destroy()&#13;&#10;
				</summary>
			</function>
			<function line="1079" name="Detach">
				<summary>function Entity:Detach()&#13;&#10;detach from entity manager
				</summary>
			</function>
			<function line="1096" name="OnRemoved">
				<summary>function Entity:OnRemoved()&#13;&#10;virtual, called when this entity is removed from EntityManager, either detached or during world exit.&#13;&#10;this function is also called when entity is destroyed if it is attached to EntityManager.
				</summary>
			</function>
			<function line="1099" name="GetWorldServer">
				<summary>function Entity:GetWorldServer()&#13;&#10;
				</summary>
			</function>
			<function line="1111" name="Say">
				<summary>function Entity:Say(text, duration, bAbove3D)&#13;&#10;let the entity say something on top of its head for some seconds.&#13;&#10; &#32; @param text: text to show&#13;&#10; &#32; @param duration: in seconds. default to 4. if -1, it means permanent.&#13;&#10; &#32; @param bAbove3D: default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. &#13;&#10;return true if we actually said something, otherwise nil.
				</summary>
				<parameter name="text">text to show
				</parameter>
				<parameter name="duration">in seconds. default to 4. if -1, it means permanent.
				</parameter>
				<parameter name="bAbove3D">default to nil, if true, headon UI will be displayed above all 3D objects. if false or nil, it just renders the UI with z buffer test enabled. &#13;&#10;return true if we actually said something, otherwise nil.
				</parameter>
			</function>
			<function line="1181" name="Attach">
				<summary>function Entity:Attach()&#13;&#10;attach to entity manager
				</summary>
			</function>
			<function line="1191" name="canPlaceBlockAt">
				<summary>function Entity:canPlaceBlockAt(x,y,z, block)&#13;&#10;virtual function: whether we can place a block where this entity stands in. &#13;&#10;in most cases, this is false, unless the entity is wise enough to move around to other free spaces. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block"/>
			</function>
			<function line="1196" name="OnBlockEvent">
				<summary>function Entity:OnBlockEvent(x,y,z, event_id, event_param)&#13;&#10;when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="1199" name="HasPet">
				<summary>function Entity:HasPet()&#13;&#10;
				</summary>
			</function>
			<function line="1203" name="UnloadPet">
				<summary>function Entity:UnloadPet()&#13;&#10;
				</summary>
			</function>
			<function line="1218" name="SetScaling">
				<summary>function Entity:SetScaling(v)&#13;&#10;virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1226" name="GetScaling">
				<summary>function Entity:GetScaling()&#13;&#10;
				</summary>
			</function>
			<function line="1235" name="SetScalingDelta">
				<summary>function Entity:SetScalingDelta(v)&#13;&#10;virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1240" name="SetFacingDelta">
				<summary>function Entity:SetFacingDelta(v)&#13;&#10;virtual function:
				</summary>
				<parameter name="v"/>
			</function>
			<function line="1245" name="SetFacing">
				<summary>function Entity:SetFacing(facing)	&#13;&#10;set facing of the lower object. 
				</summary>
				<parameter name="facing"/>
			</function>
			<function line="1256" name="GetFacing">
				<summary>function Entity:GetFacing()	&#13;&#10;
				</summary>
			</function>
			<function line="1260" name="SetHighlight">
				<summary>function Entity:SetHighlight(bHighlight)&#13;&#10;
				</summary>
				<parameter name="bHighlight"/>
			</function>
			<function line="1270" name="PlaySound">
				<summary>function Entity:PlaySound(sound_name)&#13;&#10;
				</summary>
				<parameter name="sound_name"/>
			</function>
			<function line="1273" name="IsServerEntity">
				<summary>function Entity:IsServerEntity()&#13;&#10;
				</summary>
			</function>
			<function line="1277" name="SetServerEntity">
				<summary>function Entity:SetServerEntity(isServerEntity)&#13;&#10;
				</summary>
				<parameter name="isServerEntity"/>
			</function>
			<function line="1288" name="OpenEditor">
				<summary>function Entity:OpenEditor(editor_name, entity)&#13;&#10;virtual function: right click to edit. 
				</summary>
				<parameter name="editor_name"/>
				<parameter name="entity"/>
			</function>
			<function line="1300" name="GetBlockContainer">
				<summary>function Entity:GetBlockContainer()&#13;&#10;
				</summary>
			</function>
			<function line="1304" name="UpdateBlockContainer">
				<summary>function Entity:UpdateBlockContainer()&#13;&#10;
				</summary>
			</function>
			<function line="1331" name="GetBlockPos">
				<summary>function Entity:GetBlockPos()&#13;&#10;&#13;&#10; &#32; @return bx, by, bz in block world. 
				</summary>
				<returns>return , by, bz in block world. 
				</returns>
			</function>
			<function line="1338" name="doesEntityTriggerPressurePlate">
				<summary>function Entity:doesEntityTriggerPressurePlate()&#13;&#10;
				</summary>
			</function>
			<function line="1343" name="SetBlockPos">
				<summary>function Entity:SetBlockPos(bx, by, bz)&#13;&#10;update block position according to the associated object. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1364" name="GetDistanceSq">
				<summary>function Entity:GetDistanceSq(x,y,z)&#13;&#10;&#13;&#10; &#32; @sa DistanceSqTo() for block pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1371" name="SetLocationAndAngles">
				<summary>function Entity:SetLocationAndAngles(x,y,z, yaw, pitch)&#13;&#10;Sets the location and Yaw/Pitch of an entity in the world. It will teleport the player at the exact location.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1381" name="TeleportToBlockPos">
				<summary>function Entity:TeleportToBlockPos(x,y,z)&#13;&#10;teleport to a given block position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1386" name="SetPositionAndRotation">
				<summary>function Entity:SetPositionAndRotation(x,y,z,yaw, pitch)&#13;&#10;Sets the entity's position and rotation. But it does not change last tick position. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
			</function>
			<function line="1391" name="SetRotation">
				<summary>function Entity:SetRotation(facing, pitch)&#13;&#10;
				</summary>
				<parameter name="facing"/>
				<parameter name="pitch"/>
			</function>
			<function line="1398" name="SetRoll">
				<summary>function Entity:SetRoll(roll)&#13;&#10;rotation around Z axis
				</summary>
				<parameter name="roll"/>
			</function>
			<function line="1406" name="GetRoll">
				<summary>function Entity:GetRoll(roll)&#13;&#10;rotation around Z axis
				</summary>
				<parameter name="roll"/>
			</function>
			<function line="1412" name="SetPitch">
				<summary>function Entity:SetPitch(pitch)&#13;&#10;rotation around X axis
				</summary>
				<parameter name="pitch"/>
			</function>
			<function line="1420" name="GetPitch">
				<summary>function Entity:GetPitch()&#13;&#10;rotation around X axis
				</summary>
			</function>
			<function line="1427" name="SetPositionAndRotation2">
				<summary>function Entity:SetPositionAndRotation2(x,y,z,yaw, pitch, posRotIncrements)&#13;&#10;Sets the entity's position and rotation. it will correct y so it will snap to ground.&#13;&#10; &#32; @param posRotIncrements: smoothed frames. we will move to x,y,z in this number of ticks. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="yaw"/>
				<parameter name="pitch"/>
				<parameter name="posRotIncrements">smoothed frames. we will move to x,y,z in this number of ticks. 
				</parameter>
			</function>
			<function line="1434" name="SetPosition">
				<summary>function Entity:SetPosition(x, y, z)&#13;&#10;set real world position for the object. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1457" name="getPosition">
				<summary>function Entity:getPosition()&#13;&#10;&#13;&#10; &#32; @return a clone of {x,y,z}
				</summary>
				<returns>return clone of {x,y,z}
				</returns>
			</function>
			<function line="1462" name="setPosition">
				<summary>function Entity:setPosition(pos)&#13;&#10;&#13;&#10; &#32; @param pos: {x,y,z}
				</summary>
				<parameter name="pos">{x,y,z}
				</parameter>
			</function>
			<function line="1470" name="GetPosition">
				<summary>function Entity:GetPosition()&#13;&#10;virtual function: Get real world position. if not exist, we will convert from block position. 
				</summary>
			</function>
			<function line="1482" name="GetNextPosition">
				<summary>function Entity:GetNextPosition(deltaTime)&#13;&#10;get next position using its current speed with deltaTime
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1495" name="DistanceSqTo">
				<summary>function Entity:DistanceSqTo(x,y,z)&#13;&#10;get block world distance to the give block position.&#13;&#10; &#32; @sa GetDistanceSq() for real pos
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1501" name="GetPickingDist">
				<summary>function Entity:GetPickingDist()&#13;&#10;get the picking distance of this entity. 
				</summary>
			</function>
			<function line="1506" name="UpdateRotation">
				<summary>function Entity:UpdateRotation()&#13;&#10;virtual function: only used by EntityPlayer to update Yaw,pitch from player controlled object. 
				</summary>
			</function>
			<function line="1513" name="UpdatePosition">
				<summary>function Entity:UpdatePosition(x,y,z)&#13;&#10;virtual function: only used by EntityPlayer to update block position from player controlled object. &#13;&#10;do not call this if object is controlled completely from scripting interface.&#13;&#10; &#32; @param x,y,z: if nil, we will use the inner object's real position(NOT block position)&#13;&#10; &#32; @return inner object if x, y, z is not specified. 
				</summary>
				<parameter name="x">,y,z: if nil, we will use the inner object's real position(NOT block position)
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return object if x, y, z is not specified. 
				</returns>
			</function>
			<function line="1542" name="ApplyEntityCollision">
				<summary>function Entity:ApplyEntityCollision(fromEntity, deltaTime)&#13;&#10;Applies a velocity to each of the entities pushing them away from each other. 
				</summary>
				<parameter name="fromEntity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1575" name="CanPushBlock">
				<summary>function Entity:CanPushBlock()&#13;&#10;whether this entity can push block
				</summary>
			</function>
			<function line="1580" name="CanBePushedBy">
				<summary>function Entity:CanBePushedBy(fromEntity)&#13;&#10;Returns true if this entity should push and be pushed by other entities when colliding.
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1585" name="CanBeCollidedWith">
				<summary>function Entity:CanBeCollidedWith(entity)&#13;&#10;Returns true if other Entities should be prevented from moving through this Entity.
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="1590" name="CanBeMounted">
				<summary>function Entity:CanBeMounted()&#13;&#10;return true if this entity can be ridden by a player. 
				</summary>
			</function>
			<function line="1595" name="CollideWithEntity">
				<summary>function Entity:CollideWithEntity(fromEntity)&#13;&#10;this function is called when this entity collide with another entity. 
				</summary>
				<parameter name="fromEntity"/>
			</function>
			<function line="1598" name="GetPhysicsRadius">
				<summary>function Entity:GetPhysicsRadius()&#13;&#10;
				</summary>
			</function>
			<function line="1602" name="SetPhysicsRadius">
				<summary>function Entity:SetPhysicsRadius(radius)&#13;&#10;
				</summary>
				<parameter name="radius"/>
			</function>
			<function line="1616" name="GetPhysicsHeight">
				<summary>function Entity:GetPhysicsHeight()&#13;&#10;
				</summary>
			</function>
			<function line="1620" name="SetPhysicsHeight">
				<summary>function Entity:SetPhysicsHeight(height)&#13;&#10;
				</summary>
				<parameter name="height"/>
			</function>
			<function line="1631" name="IsPlayer">
				<summary>function Entity:IsPlayer()&#13;&#10;
				</summary>
			</function>
			<function line="1636" name="GetCollisionAABB">
				<summary>function Entity:GetCollisionAABB()&#13;&#10;in real world coordinates
				</summary>
			</function>
			<function line="1653" name="CheckGetCollisionBox">
				<summary>function Entity:CheckGetCollisionBox(entity)&#13;&#10;returns a boundingBox used to collide the entity with other entities and blocks. &#13;&#10;This enables the entity to be pushable on contact&#13;&#10; &#32; @param entity: the entity to check against
				</summary>
				<parameter name="entity">the entity to check against
				</parameter>
			</function>
			<function line="1659" name="PushOutOfBlocks">
				<summary>function Entity:PushOutOfBlocks(x,y,z)&#13;&#10;Adds velocity to push the entity out of blocks at the specified x, y, z position&#13;&#10; &#32; @return true if successfully pushed
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return if successfully pushed
				</returns>
			</function>
			<function line="1695" name="SetCheckCollision">
				<summary>function Entity:SetCheckCollision(bCheck)&#13;&#10;default to true. 
				</summary>
				<parameter name="bCheck"/>
			</function>
			<function line="1700" name="IsCheckCollision">
				<summary>function Entity:IsCheckCollision()&#13;&#10;whether we will check collision for this entity
				</summary>
			</function>
			<function line="1706" name="CheckCollision">
				<summary>function Entity:CheckCollision(deltaTime)&#13;&#10;virtual function: check if the entity collide with other entity or block. if so, we will fire event and adjust position.
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1753" name="CanMoveTo">
				<summary>function Entity:CanMoveTo(x,y,z)&#13;&#10;whether the entity can move to the given side relative to its current location. &#13;&#10;it will automatically climb over one block height unless it is a fence
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1776" name="GetItemId">
				<summary>function Entity:GetItemId()&#13;&#10;
				</summary>
			</function>
			<function line="1780" name="GetItemClass">
				<summary>function Entity:GetItemClass()&#13;&#10;
				</summary>
			</function>
			<function line="1787" name="FallDown">
				<summary>function Entity:FallDown(deltaTime)&#13;&#10;falls down immediately one block if not obstruction below. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="1812" name="GetLifeTime">
				<summary>function Entity:GetLifeTime()&#13;&#10;get the number of seconds left before the entity is dead. &#13;&#10;if return nil, the object has infinite life span. 
				</summary>
			</function>
			<function line="1818" name="SetLifeTime">
				<summary>function Entity:SetLifeTime(lifetime)&#13;&#10;set the number of seconds left before the entity is dead. &#13;&#10;if return nil, the object has infinite life span. 
				</summary>
				<parameter name="lifetime"/>
			</function>
			<function line="1823" name="CreatePhysicsObject">
				<summary>function Entity:CreatePhysicsObject()&#13;&#10;virtual function: overwrite to customize physical object
				</summary>
			</function>
			<function line="1828" name="GetPhysicsObject">
				<summary>function Entity:GetPhysicsObject()&#13;&#10;create get physics object. 
				</summary>
			</function>
			<function line="1840" name="HasSpeed">
				<summary>function Entity:HasSpeed()&#13;&#10;whether has speed
				</summary>
			</function>
			<function line="1844" name="HasMotion">
				<summary>function Entity:HasMotion()&#13;&#10;
				</summary>
			</function>
			<function line="1848" name="IsOnGround">
				<summary>function Entity:IsOnGround()&#13;&#10;
				</summary>
			</function>
			<function line="1859" name="IsTick">
				<summary>function Entity:IsTick(func_name, deltaTime, intervalSeconds)&#13;&#10;check to see if we should tick. For example, some function may be called with deltaTime in 30fps, &#13;&#10;however, we only want to process at 20FPS, such as physics, we can use this function is easily limit function calling rate.&#13;&#10; &#32; @param func_name: default to "FrameMove". this can be any string.&#13;&#10; &#32; @param deltaTime: delta time in seconds, since last call&#13;&#10; &#32; @param intervalSeconds: default to 1/20
				</summary>
				<parameter name="func_name">default to "FrameMove". this can be any string.
				</parameter>
				<parameter name="deltaTime">delta time in seconds, since last call
				</parameter>
				<parameter name="intervalSeconds">default to 1/20
				</parameter>
			</function>
			<function line="1869" name="AddVelocity">
				<summary>function Entity:AddVelocity(x,y,z)&#13;&#10;Adds to the current velocity of the entity.&#13;&#10; &#32; @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1879" name="SetVelocity">
				<summary>function Entity:SetVelocity(x,y,z)&#13;&#10;Set current velocity of the entity.&#13;&#10; &#32; @param x,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</summary>
				<parameter name="x">,y,z: velocity in x,y,z direction. all may be nil to retain last speed. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1898" name="AddMotion">
				<summary>function Entity:AddMotion(dx,dy,dz)&#13;&#10;Adds to the current motion of the entity.&#13;&#10; &#32; @param x,y,z: velocity in x,y,z direction. 
				</summary>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="1909" name="GetVelocity">
				<summary>function Entity:GetVelocity()&#13;&#10;return x,y,z
				</summary>
			</function>
			<function line="1919" name="MoveEntity">
				<summary>function Entity:MoveEntity(deltaTime, bTryMove)&#13;&#10;derived class can call this function to move the entity using its current speed.&#13;&#10; &#32; @param bTryMove: if true, we will always try move the entity even it does not have speed. 
				</summary>
				<parameter name="deltaTime"/>
				<parameter name="bTryMove">if true, we will always try move the entity even it does not have speed. 
				</parameter>
			</function>
			<function line="1934" name="SetFrameMoveInterval">
				<summary>function Entity:SetFrameMoveInterval(framemove_interval)&#13;&#10;set frame move interval
				</summary>
				<parameter name="framemove_interval"/>
			</function>
			<function line="1944" name="IsBlockEntity">
				<summary>function Entity:IsBlockEntity()&#13;&#10;
				</summary>
			</function>
			<function line="1949" name="GetDescriptionPacket">
				<summary>function Entity:GetDescriptionPacket()&#13;&#10;Overriden in a sign to provide the text.
				</summary>
			</function>
			<function line="1953" name="OnUpdateFromPacket">
				<summary>function Entity:OnUpdateFromPacket(packet_UpdateEntitySign)&#13;&#10;
				</summary>
				<parameter name="packet_UpdateEntitySign"/>
			</function>
			<function line="1957" name="SetTickRate">
				<summary>function Entity:SetTickRate(tickRate)&#13;&#10;how many framemove per seconds
				</summary>
				<parameter name="tickRate"/>
			</function>
			<function line="1963" name="SetAlwaysSentient">
				<summary>function Entity:SetAlwaysSentient(bSentient)&#13;&#10;this will cause this entity to become always sentent. 
				</summary>
				<parameter name="bSentient"/>
			</function>
			<function line="1974" name="IsAlwaysSentient">
				<summary>function Entity:IsAlwaysSentient()&#13;&#10;
				</summary>
			</function>
			<function line="1979" name="GetTickRateInterval">
				<summary>function Entity:GetTickRateInterval()&#13;&#10;1/tickRate
				</summary>
			</function>
			<function line="1988" name="CheckFrameMove">
				<summary>function Entity:CheckFrameMove(deltaTime, curTime, bForceFrameMove)&#13;&#10;return true if EntityMob.framemove_interval is not nil and ready to frame move.&#13;&#10; &#32; @param deltaTime in seconds&#13;&#10; &#32; @param bForceFrameMove: if nil we will only check but does not do the framemove. If true, we will not check but do the framemove&#13;&#10;true to run the framemove and increase the local time.&#13;&#10; &#32; @return nil or deltaTimeReal in seconds.
				</summary>
				<parameter name="deltaTime">in seconds
				</parameter>
				<parameter name="curTime"/>
				<parameter name="bForceFrameMove">if nil we will only check but does not do the framemove. If true, we will not check but do the framemove&#13;&#10;true to run the framemove and increase the local time.
				</parameter>
				<returns>return or deltaTimeReal in seconds.
				</returns>
			</function>
			<function line="2025" name="GetTimeEvent">
				<summary>function Entity:GetTimeEvent()&#13;&#10;continue;&#13;&#10;time event list
				</summary>
			</function>
			<function line="2034" name="AddTimeEvent">
				<summary>function Entity:AddTimeEvent(scheduledTime, name, callbackFunc)&#13;&#10;add a timed event to this entity&#13;&#10; &#32; @param callbackFunc: function(entity, timedEvent)
				</summary>
				<parameter name="scheduledTime"/>
				<parameter name="name"/>
				<parameter name="callbackFunc">function(entity, timedEvent)
				</parameter>
			</function>
			<function line="2067" name="GetSentientRadius">
				<summary>function Entity:GetSentientRadius()&#13;&#10;radius (in blocks) that this entity will awake nearby entities. &#13;&#10;please note, it will only awake other entity if the distance between the two entities is the smaller &#13;&#10;than the smallest value of either entity's GetSentientChunkRadius().&#13;&#10; &#32; @return default value is 128
				</summary>
				<returns>return value is 128
				</returns>
			</function>
			<function line="2074" name="AdvanceTime">
				<summary>function Entity:AdvanceTime(delta_time)&#13;&#10;advance time and fire all timed event that is smaller than current time. &#13;&#10;return true if there is still time event left.&#13;&#10; &#32; @param delta_time: if nil we will advance to next time event. In seconds
				</summary>
				<parameter name="delta_time">if nil we will advance to next time event. In seconds
				</parameter>
			</function>
			<function line="2110" name="IsInputDisabled">
				<summary>function Entity:IsInputDisabled()&#13;&#10;whether the entity can receive activation or user input. 
				</summary>
			</function>
			<function line="2116" name="DisableInput">
				<summary>function Entity:DisableInput(bDisabled)&#13;&#10;make the entity dummy, it will not respond to any activate command or user input, &#13;&#10;unless it is set to not dummy by command line. /disableinput false
				</summary>
				<parameter name="bDisabled"/>
			</function>
			<function line="2121" name="Pause">
				<summary>function Entity:Pause()&#13;&#10;pause any scheduled time event 
				</summary>
			</function>
			<function line="2125" name="IsPaused">
				<summary>function Entity:IsPaused()&#13;&#10;
				</summary>
			</function>
			<function line="2129" name="Resume">
				<summary>function Entity:Resume()&#13;&#10;
				</summary>
			</function>
			<function line="2135" name="ClearTimeEvent">
				<summary>function Entity:ClearTimeEvent()&#13;&#10;clear all time events in this entity
				</summary>
			</function>
			<function line="2145" name="SetTime">
				<summary>function Entity:SetTime(time)&#13;&#10;set local time of this entity. this is only used in animated entity or entity with timed event. &#13;&#10;in seconds. 
				</summary>
				<parameter name="time"/>
			</function>
			<function line="2150" name="GetTime">
				<summary>function Entity:GetTime()&#13;&#10;get local time of this entity. in seconds 
				</summary>
			</function>
			<function line="2155" name="SetTimeToNextEvent">
				<summary>function Entity:SetTimeToNextEvent()&#13;&#10;set local time of this entity to the next time event in the queue.
				</summary>
			</function>
			<function line="2171" name="SetCharacterSlot">
				<summary>function Entity:SetCharacterSlot(slot_id, item_id)&#13;&#10;set the character slot
				</summary>
				<parameter name="slot_id"/>
				<parameter name="item_id"/>
			</function>
			<function line="2179" name="IsControlledExternally">
				<summary>function Entity:IsControlledExternally()&#13;&#10;
				</summary>
			</function>
			<function line="2186" name="SetControlledExternally">
				<summary>function Entity:SetControlledExternally(bEnable)&#13;&#10;
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="2193" name="GetMainAssetPath">
				<summary>function Entity:GetMainAssetPath()&#13;&#10;
				</summary>
			</function>
			<function line="2207" name="SetMainAssetPath">
				<summary>function Entity:SetMainAssetPath(name)&#13;&#10;set main model
				</summary>
				<parameter name="name"/>
			</function>
			<function line="2214" name="GetBoundRadius">
				<summary>function Entity:GetBoundRadius()&#13;&#10;
				</summary>
			</function>
			<function line="2224" name="SetSurfaceDecay">
				<summary>function Entity:SetSurfaceDecay(surface_decay)&#13;&#10;set speed decay. percentage of motion lost per tick.&#13;&#10; &#32; @param surface_decay: &#32;[0,1]. 0 means no speed lost, 1 will lost all speed. &#32;default to 0.5
				</summary>
				<parameter name="surface_decay">[0,1]. 0 means no speed lost, 1 will lost all speed. &#32;default to 0.5
				</parameter>
			</function>
			<function line="2228" name="GetSurfaceDecay">
				<summary>function Entity:GetSurfaceDecay()&#13;&#10;
				</summary>
			</function>
			<function line="2234" name="BeginEdit">
				<summary>function Entity:BeginEdit()&#13;&#10;called when ever an editor like EditEntityPage is opened for this entity&#13;&#10;if one wants to provide some basic undo/redo function, this is the place to go.
				</summary>
			</function>
			<function line="2242" name="EndEdit">
				<summary>function Entity:EndEdit()&#13;&#10;called when ever an editor like EditEntityPage is closed for this entity&#13;&#10;if one wants to provide some basic undo/redo function, this is the place to go.&#13;&#10;one may also refresh the entity if any changes take place that is not updated automatically. 
				</summary>
			</function>
			<function line="2249" name="MarkForUpdate">
				<summary>function Entity:MarkForUpdate()&#13;&#10;mark for update so that local changes are sent to client or server
				</summary>
			</function>
			<function line="2257" name="PickItem">
				<summary>function Entity:PickItem(itemStack, fromBlockX, fromBlockY, fromBlockZ)&#13;&#10;pick the given item.&#13;&#10; &#32; @param fromBlockX, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromBlockX">, fromBlockY, fromBlockZ: block position from the item come from. can all be nil. 
				</parameter>
				<parameter name="fromBlockY"/>
				<parameter name="fromBlockZ"/>
			</function>
			<function line="2275" name="SetBagSize">
				<summary>function Entity:SetBagSize(size)&#13;&#10;
				</summary>
				<parameter name="size"/>
			</function>
			<function line="2291" name="SetRuleBagSize">
				<summary>function Entity:SetRuleBagSize(size)&#13;&#10;create the rule bag if not exist.&#13;&#10; &#32; @param size: if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</summary>
				<parameter name="size">if nil or 0, it will destory the rule bag. otherwise it will resize the rule bag
				</parameter>
			</function>
			<function line="2303" name="FrameMoveRules">
				<summary>function Entity:FrameMoveRules(deltaTime)&#13;&#10;virtual function: load rules and framemove rule items. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2315" name="FrameMove">
				<summary>function Entity:FrameMove(deltaTime)&#13;&#10;virtual function: called every frame
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2329" name="NotifyBlockCollisions">
				<summary>function Entity:NotifyBlockCollisions()&#13;&#10;
				</summary>
			</function>
			<function line="2362" name="OnFallDown">
				<summary>function Entity:OnFallDown(distFallen)&#13;&#10;virtual: Called when the entity has just fallen to ground. Calculates and applies fall damage.&#13;&#10; &#32; @param distFallen: distance fallen. 
				</summary>
				<parameter name="distFallen">distance fallen. 
				</parameter>
			</function>
			<function line="2369" name="IsEntityInvulnerable">
				<summary>function Entity:IsEntityInvulnerable()&#13;&#10;Return whether this entity is invulnerable to damage.
				</summary>
			</function>
			<function line="2374" name="SetBeenAttacked">
				<summary>function Entity:SetBeenAttacked()&#13;&#10;Sets that this entity has been attacked.
				</summary>
			</function>
			<function line="2381" name="AttackEntityFrom">
				<summary>function Entity:AttackEntityFrom(damageSource, amount)&#13;&#10;Called when the entity is attacked.&#13;&#10; &#32; @param damageSource: what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.&#13;&#10; &#32; @param amount: such as 1. 
				</summary>
				<parameter name="damageSource">what kind of damage. such as DamageSource.inFire, DamageSource.fall, etc.
				</parameter>
				<parameter name="amount">such as 1. 
				</parameter>
			</function>
			<function line="2392" name="EntityDropItem">
				<summary>function Entity:EntityDropItem(itemStack, fOffsetY)&#13;&#10;Drops an item at the position of the entity.&#13;&#10; &#32; @return the EntityItem
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fOffsetY"/>
				<returns>return EntityItem
				</returns>
			</function>
			<function line="2407" name="UpdateFallState">
				<summary>function Entity:UpdateFallState(distanceFallenThisTick, bIsOnGround)&#13;&#10;Drops an item at the position of the entity.&#13;&#10; &#32; @return the EntityItem&#13;&#10;Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance&#13;&#10;and deal fall damage if landing on the ground. &#32;Args: distanceFallenThisTick, onGround&#13;&#10; &#32; @param distanceFallenThisTick&#13;&#10; &#32; @param bIsOnGround
				</summary>
				<parameter name="distanceFallenThisTick">
				</parameter>
				<parameter name="bIsOnGround">
				</parameter>
				<returns>return EntityItem&#13;&#10;Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance&#13;&#10;and deal fall damage if landing on the ground. &#32;Args: distanceFallenThisTick, onGround
				</returns>
			</function>
			<function line="2418" name="IsSneaking">
				<summary>function Entity:IsSneaking()&#13;&#10;
				</summary>
			</function>
			<function line="2422" name="SetSneaking">
				<summary>function Entity:SetSneaking(bSneaking)&#13;&#10;
				</summary>
				<parameter name="bSneaking"/>
			</function>
			<function line="2427" name="SetStaticBlocker">
				<summary>function Entity:SetStaticBlocker(bIsBlocker)&#13;&#10;if true, this entity can not be pushed by other movable entities
				</summary>
				<parameter name="bIsBlocker"/>
			</function>
			<function line="2431" name="IsStaticBlocker">
				<summary>function Entity:IsStaticBlocker()&#13;&#10;return true if this entity can not be pushed by other movable entities
				</summary>
			</function>
			<function line="2438" name="CalculatePushOut">
				<summary>function Entity:CalculatePushOut(dx,dy,dz, entityFilterFunc)&#13;&#10;&#13;&#10; &#32; @param dx,dy,dz: if nil, they default to 0.&#13;&#10; &#32; @param filterEntityFunc: nil or a function(destEntity, entity) end, this function should return true for destEntity's collision to be considered.&#13;&#10;Entity.CanBeCollidedWith and Entity.IsVisible are good choices for this function.&#13;&#10; &#32; @return dx,dy,dz: return the smallest push out according to current overlapping status 
				</summary>
				<parameter name="dx">,dy,dz: if nil, they default to 0.
				</parameter>
				<parameter name="dy"/>
				<parameter name="dz"/>
				<parameter name="entityFilterFunc"/>
				<returns>return ,dy,dz: return the smallest push out according to current overlapping status 
				</returns>
			</function>
			<function line="2483" name="MoveEntityByDisplacement">
				<summary>function Entity:MoveEntityByDisplacement(dx,dy,dz)&#13;&#10;Tries to moves the entity by the passed in displacement. &#13;&#10;this function is usually used by entities which need to process physics all by itself &#13;&#10;(instead of relying on physicsObj or default low level c++).&#13;&#10; &#32; @param dx, dy, dz: dispacement
				</summary>
				<parameter name="dx">, dy, dz: dispacement
				</parameter>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="2632" name="GetMountedYOffset">
				<summary>function Entity:GetMountedYOffset()&#13;&#10;
				</summary>
			</function>
			<function line="2638" name="FrameMoveRidding">
				<summary>function Entity:FrameMoveRidding(deltaTime)&#13;&#10;framemove this entity when it is riding (mounted) on another entity. &#13;&#10;we will update according to mounted entity's position. 
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="2685" name="GetRidingOffsetY">
				<summary>function Entity:GetRidingOffsetY()&#13;&#10;
				</summary>
			</function>
			<function line="2689" name="UpdateRiderPosition">
				<summary>function Entity:UpdateRiderPosition()&#13;&#10;
				</summary>
			</function>
			<function line="2697" name="MountOn">
				<summary>function Entity:MountOn(targetEntity, mountID)&#13;&#10;this is the c++ mount method. 
				</summary>
				<parameter name="targetEntity"/>
				<parameter name="mountID"/>
			</function>
			<function line="2709" name="MountEntity">
				<summary>function Entity:MountEntity(targetEntity)&#13;&#10;mount current entity to the target entity.&#13;&#10; &#32; @param targetEntity: nil to unmount
				</summary>
				<parameter name="targetEntity">nil to unmount
				</parameter>
			</function>
			<function line="2733" name="HasChanges">
				<summary>function Entity:HasChanges()&#13;&#10;whether any trackable data is modified 
				</summary>
			</function>
			<function line="2738" name="SetChanged">
				<summary>function Entity:SetChanged(bChanged)&#13;&#10;set changes
				</summary>
				<parameter name="bChanged"/>
			</function>
			<function line="2742" name="GetRotationYaw">
				<summary>function Entity:GetRotationYaw()&#13;&#10;
				</summary>
			</function>
			<function line="2746" name="GetRotationPitch">
				<summary>function Entity:GetRotationPitch()&#13;&#10;
				</summary>
			</function>
			<function line="2751" name="GetRotationYawHead">
				<summary>function Entity:GetRotationYawHead()&#13;&#10;
				</summary>
			</function>
			<function line="2756" name="SetRotationYawHead">
				<summary>function Entity:SetRotationYawHead(value)&#13;&#10;Sets the head's yaw rotation of the entity.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="2763" name="GetDataWatcher">
				<summary>function Entity:GetDataWatcher(bCreateIfNotExist)&#13;&#10;data in watcher are auto synced among clients by the server, without server validation. &#13;&#10;data in data watcher can be freely modified by both client and server, such as animation, skin, etc.&#13;&#10; &#32; @NOTE: do NOT put server-critical data here, use inventory for server verified data.
				</summary>
				<parameter name="bCreateIfNotExist"/>
			</function>
			<function line="2773" name="IsRiding">
				<summary>function Entity:IsRiding()&#13;&#10;Returns true if the entity is riding another entity
				</summary>
			</function>
			<function line="2790" name="BeginTouchMove">
				<summary>function Entity:BeginTouchMove()&#13;&#10;examples: &#13;&#10;local EntityManager = commonlib.gettable("MyCompany.Aries.Game.EntityManager");&#13;&#10;local player = EntityManager.GetPlayer();&#13;&#10;player:BeginTouchMove();&#13;&#10;player:TouchMove(0);&#13;&#10;local mytimer = commonlib.Timer:new({callbackFunc = function(timer)&#13;&#10;	player:EndTouchMove();&#13;&#10;end})&#13;&#10;-- walk 1 seconds&#13;&#10;mytimer:Change(1000, nil)&#13;&#10;begin touch move towards a given position. 
				</summary>
			</function>
			<function line="2799" name="TouchMove">
				<summary>function Entity:TouchMove(screen_facing)&#13;&#10;move according to a facing angle in screen space relative to current camera view. &#13;&#10;call this function between BeginTouchMove() and EndTouchMove(). &#13;&#10;Please note, it will walk forever until EndTouchMove() is called.&#13;&#10; &#32; @param screen_facing: [0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</summary>
				<parameter name="screen_facing">[0,2pi], where 0 is running away from camera, pi is running towards camera, etc. 
				</parameter>
			</function>
			<function line="2810" name="EndTouchMove">
				<summary>function Entity:EndTouchMove()&#13;&#10;end touch move towards a given position. 
				</summary>
			</function>
			<function line="2823" name="GetNewItemsList">
				<summary>function Entity:GetNewItemsList()&#13;&#10;virtual function: get array of item stacks that will be displayed to the user when user try to create a new item.&#13;&#10; &#32; @return nil or array of item stack.
				</summary>
				<returns>return or array of item stack.
				</returns>
			</function>
			<function line="2829" name="CreateItemOnSlot">
				<summary>function Entity:CreateItemOnSlot(slot)&#13;&#10;&#13;&#10; &#32; @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
			<function line="2849" name="OnClickEmptySlot">
				<summary>function Entity:OnClickEmptySlot(slot)&#13;&#10;called when user click to create a new item in the slot&#13;&#10; &#32; @param slot: type of ItemSlot in Container View, such as self.rulebagView
				</summary>
				<parameter name="slot">type of ItemSlot in Container View, such as self.rulebagView
				</parameter>
			</function>
			<function line="2861" name="EnablePhysics">
				<summary>function Entity:EnablePhysics(bEnable, bForceLoadPhysics)&#13;&#10;This function is almost always used to enable polygon level collision for static entities only. &#32;&#13;&#10;Please be very careful NOT to enable physics for moving entities. Physics are automatically unloaded &#13;&#10;when geometry or position changed, thus a moving entity may frequently load and unload physics causing performance issues.&#13;&#10; &#32; @param bForceLoadPhysics: default to nil. by default it is lazy loading when main player collide with it, one can also explicitly load physics&#13;&#10;make sure to call this function after model is loaded (Due to async loading, the model is not loaded until visible by a camera and loading is done in a separate loading thread)
				</summary>
				<parameter name="bEnable"/>
				<parameter name="bForceLoadPhysics">default to nil. by default it is lazy loading when main player collide with it, one can also explicitly load physics&#13;&#10;make sure to call this function after model is loaded (Due to async loading, the model is not loaded until visible by a camera and loading is done in a separate loading thread)
				</parameter>
			</function>
			<function line="2875" name="FrameMoveMemoryContext">
				<summary>function Entity:FrameMoveMemoryContext(deltaTime)&#13;&#10;only call this function when the entity may has active memory context &#13;&#10;i.e. it has autonomous behaviors on its own. &#32;EntityPlayer can move on its own.&#13;&#10; &#32; @return true if the entity is controlled by memory context
				</summary>
				<parameter name="deltaTime"/>
				<returns>return if the entity is controlled by memory context
				</returns>
			</function>
			<function line="2882" name="GetMemoryContext">
				<summary>function Entity:GetMemoryContext()&#13;&#10;the memory context
				</summary>
			</function>
			<function line="2893" name="SetColor">
				<summary>function Entity:SetColor(color)&#13;&#10;change entity global color&#13;&#10; &#32; @param color: 0xff0000 or "#ff00ff"
				</summary>
				<parameter name="color">0xff0000 or "#ff00ff"
				</parameter>
			</function>
			<function line="2908" name="GetColor">
				<summary>function Entity:GetColor()&#13;&#10;
				</summary>
			</function>
			<function line="2913" name="SetOpacity">
				<summary>function Entity:SetOpacity(opacity)&#13;&#10;&#13;&#10; &#32; @param opacity: [0,1]
				</summary>
				<parameter name="opacity">[0,1]
				</parameter>
			</function>
			<function line="2921" name="GetOpacity">
				<summary>function Entity:GetOpacity()&#13;&#10;&#13;&#10; &#32; @return [0,1]
				</summary>
				<returns>return [0,1]
				</returns>
			</function>
			<function line="2931" name="GetText">
				<summary>function Entity:GetText()&#13;&#10;virtual function: return searchable text
				</summary>
			</function>
			<function line="2935" name="SetSelectionEffect">
				<summary>function Entity:SetSelectionEffect(effectId)&#13;&#10;&#13;&#10; &#32; @param effectId: 0 will use unlit biped selection effect. 1 will use yellow border style. -1 to disable it.
				</summary>
				<parameter name="effectId">0 will use unlit biped selection effect. 1 will use yellow border style. -1 to disable it.
				</parameter>
			</function>
			<function line="2943" name="GetSelectionEffect">
				<summary>function Entity:GetSelectionEffect()&#13;&#10;&#13;&#10; &#32; @return effectId: 0 will use unlit biped selection effect. 1 will use yellow border style. -1 means disable
				</summary>
				<returns>return 0 will use unlit biped selection effect. 1 will use yellow border style. -1 means disable
				</returns>
			</function>
			<function line="2952" name="SetShaderCaster">
				<summary>function Entity:SetShaderCaster(enabled)&#13;&#10;
				</summary>
				<parameter name="enabled"/>
			</function>
			<function line="2959" name="IsShaderCaster">
				<summary>function Entity:IsShaderCaster()&#13;&#10;
				</summary>
			</function>
			<function line="2970" name="SetInsideTriggers">
				<summary>function Entity:SetInsideTriggers(triggerObjects)&#13;&#10;this function is called by the physics world engine, when the entity is inside the trigger objects&#13;&#10; &#32; @param triggerObjects: nil or array of trigger objects that this entity is inside in this frame
				</summary>
				<parameter name="triggerObjects">nil or array of trigger objects that this entity is inside in this frame
				</parameter>
			</function>
		</table>
		<table name="ItemClient" src="script/apps/Aries/Creator/Game/Items/ItemClient.lua">
			<function line="46" name="PreloadItemClass">
				<summary>function ItemClient.PreloadItemClass()&#13;&#10;add new preloaded item class here. 
				</summary>
			</function>
			<function line="94" name="OnInit">
				<summary>function ItemClient.OnInit()&#13;&#10;
				</summary>
			</function>
			<function line="109" name="RegisterItemClass">
				<summary>function ItemClient.RegisterItemClass(name, class)&#13;&#10;register a new class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="114" name="LoadFromCurrentWorld">
				<summary>function ItemClient.LoadFromCurrentWorld()&#13;&#10;load both official block list as well as custom user defined block list. 
				</summary>
			</function>
			<function line="120" name="LoadGlobalBlockList">
				<summary>function ItemClient.LoadGlobalBlockList()&#13;&#10;private: only load once the official block list. 
				</summary>
			</function>
			<function line="180" name="SaveToCurrentWorld">
				<summary>function ItemClient.SaveToCurrentWorld()&#13;&#10;
				</summary>
			</function>
			<function line="190" name="AddBlock">
				<summary>function ItemClient.AddBlock(block_id, index, category_name, blockName, isWorldOnly)&#13;&#10;add a block at the given index.&#13;&#10; &#32; @param index: if nil, it will be added to last block.&#13;&#10; &#32; @param category_name: default to "static"&#13;&#10; &#32; @param blockName: This is uid or unique id. usually nil, if provided, we will ensure that there is only one such item in the list.&#13;&#10; &#32; @param isWorldOnly: if true, the item will be removed when world is loaded&#13;&#10; &#32; @return blockDsItem
				</summary>
				<parameter name="block_id"/>
				<parameter name="index">if nil, it will be added to last block.
				</parameter>
				<parameter name="category_name">default to "static"
				</parameter>
				<parameter name="blockName">This is uid or unique id. usually nil, if provided, we will ensure that there is only one such item in the list.
				</parameter>
				<parameter name="isWorldOnly">if true, the item will be removed when world is loaded
				</parameter>
				<returns>return 
				</returns>
			</function>
			<function line="214" name="SearchBlocks">
				<summary>function ItemClient.SearchBlocks(block_id_or_name, category_name, ds)&#13;&#10;search a given block&#13;&#10; &#32; @return a table containing all matching blocks
				</summary>
				<parameter name="block_id_or_name"/>
				<parameter name="category_name"/>
				<parameter name="ds"/>
				<returns>return table containing all matching blocks
				</returns>
			</function>
			<function line="262" name="GetBlockDS">
				<summary>function ItemClient.GetBlockDS(category_name)&#13;&#10;get data source by category name
				</summary>
				<parameter name="category_name"/>
			</function>
			<function line="275" name="MergeCustomBlockToDS">
				<summary>function ItemClient.MergeCustomBlockToDS(bImmediate)&#13;&#10;
				</summary>
				<parameter name="bImmediate"/>
			</function>
			<function line="308" name="GetItemCount">
				<summary>function ItemClient.GetItemCount(block_id)&#13;&#10;
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="312" name="SetItemCount">
				<summary>function ItemClient.SetItemCount(block_id, count, diff_count)&#13;&#10;
				</summary>
				<parameter name="block_id"/>
				<parameter name="count"/>
				<parameter name="diff_count"/>
			</function>
			<function line="322" name="AddItem">
				<summary>function ItemClient.AddItem(block_id, item)&#13;&#10;add item
				</summary>
				<parameter name="block_id"/>
				<parameter name="item"/>
			</function>
			<function line="343" name="GetItem">
				<summary>function ItemClient.GetItem(block_id)&#13;&#10;get item by id
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="347" name="GetItemByName">
				<summary>function ItemClient.GetItemByName(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="357" name="CreateGetByBlockID">
				<summary>function ItemClient.CreateGetByBlockID(block_id, item_class)&#13;&#10;create get an item by block id. 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="366" name="CreateByBlockID">
				<summary>function ItemClient.CreateByBlockID(block_id, item_class)&#13;&#10;create and overwrite 
				</summary>
				<parameter name="block_id"/>
				<parameter name="item_class"/>
			</function>
			<function line="385" name="OnLeaveWorld">
				<summary>function ItemClient.OnLeaveWorld()&#13;&#10;
				</summary>
			</function>
			<function line="419" name="GetCustomBlocksXMLRoot">
				<summary>function ItemClient.GetCustomBlocksXMLRoot()&#13;&#10;
				</summary>
			</function>
			<function line="435" name="LoadCustomBlocks">
				<summary>function ItemClient.LoadCustomBlocks(xmlRoot)&#13;&#10;custom block is used defined blocks in the current world directory.&#13;&#10; &#32; @param xmlRoot: if nil, we will use ItemClient.GetCustomBlocksXMLRoot from working directory
				</summary>
				<parameter name="xmlRoot">if nil, we will use ItemClient.GetCustomBlocksXMLRoot from working directory
				</parameter>
			</function>
			<function line="454" name="SaveCustomBlocks">
				<summary>function ItemClient.SaveCustomBlocks()&#13;&#10;custom block is user defined blocks in the current world directory. 
				</summary>
			</function>
			<function line="476" name="GetNextCustomBlockId">
				<summary>function ItemClient.GetNextCustomBlockId()&#13;&#10;next custom block id
				</summary>
			</function>
			<function line="487" name="GetCustomBlockByTexture">
				<summary>function ItemClient.GetCustomBlockByTexture(filename)&#13;&#10;return item or nil by texture filename. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="495" name="UnRegisterCustomItem">
				<summary>function ItemClient.UnRegisterCustomItem(block_id)&#13;&#10;
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="501" name="RegisterCustomItem">
				<summary>function ItemClient.RegisterCustomItem(params)&#13;&#10;&#13;&#10; &#32; @param params: a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}&#13;&#10;if params.id is not specified, we will generate an unused id instead.&#13;&#10;please note the same texture filename will always generate the same id. 
				</summary>
				<parameter name="params">a table of {base_block_id, texture, [id], [icon], alphaTestTexture=false, blendedTexture=false, transparent=false}&#13;&#10;if params.id is not specified, we will generate an unused id instead.&#13;&#10;please note the same texture filename will always generate the same id. 
				</parameter>
			</function>
		</table>
		<table name="Item" src="script/apps/Aries/Creator/Game/Items/Item.lua">
			<function line="66" name="ctor">
				<summary>function Item:ctor()&#13;&#10;&#13;&#10; &#32; @param template: icon&#13;&#10; &#32; @param icon:&#13;&#10; &#32; @param block_id:
				</summary>
			</function>
			<function line="76" name="GetMaxCount">
				<summary>function Item:GetMaxCount()&#13;&#10;
				</summary>
			</function>
			<function line="81" name="GetBlock">
				<summary>function Item:GetBlock()&#13;&#10;get block template. 
				</summary>
			</function>
			<function line="87" name="GetSelectedItemStack">
				<summary>function Item:GetSelectedItemStack()&#13;&#10;static function:&#13;&#10;get item current selected item stack
				</summary>
			</function>
			<function line="93" name="OnItemRightClick">
				<summary>function Item:OnItemRightClick(itemStack, entityPlayer)&#13;&#10;Called whenever this item is equipped and the right mouse button is pressed.&#13;&#10; &#32; @return itemStack, hasHandled: &#32;the new item stack to put in the position. hasHandled is true if handled. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
				<returns>return , hasHandled: &#32;the new item stack to put in the position. hasHandled is true if handled. 
				</returns>
			</function>
			<function line="98" name="OnLeaveWorld">
				<summary>function Item:OnLeaveWorld()&#13;&#10;virtual function, called when world is closed. 
				</summary>
			</function>
			<function line="103" name="OnClickInHand">
				<summary>function Item:OnClickInHand(itemStack, entityPlayer)&#13;&#10;called whenever this item is clicked on the user interface when it is holding in hand of a given player (current player). &#13;&#10;by default, if there is selected blocks, we will replace selection with current block in hand. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entityPlayer"/>
			</function>
			<function line="118" name="HandleClickOtherItem">
				<summary>function Item:HandleClickOtherItem(other_item_id)&#13;&#10;virtual function: called when user clicked some other item while holding this item in hand.&#13;&#10; &#32; @return true will cause other item to ignore the click event. This is useful when the hand block needs to process click event itself
				</summary>
				<parameter name="other_item_id"/>
				<returns>return will cause other item to ignore the click event. This is useful when the hand block needs to process click event itself
				</returns>
			</function>
			<function line="123" name="OnClick">
				<summary>function Item:OnClick()&#13;&#10;virtual: click from user interface
				</summary>
			</function>
			<function line="162" name="OnActivate">
				<summary>function Item:OnActivate(itemStack, entityContainer, entityTrigger)&#13;&#10;called when this function is activated when the entity is activated. &#13;&#10;it will return false when the last trigger entity's inventory has more than itemStack.count items.&#13;&#10; &#32; @param itemStack: the containing itemStack&#13;&#10; &#32; @param entity: this is usually a command block or entity that contains this entity.&#13;&#10; &#32; @param entityPlayer: the triggering entity&#13;&#10; &#32; @return false if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="itemStack">the containing itemStack
				</parameter>
				<parameter name="entityContainer"/>
				<parameter name="entityTrigger"/>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="173" name="handleEntityEvent">
				<summary>function Item:handleEntityEvent(itemStack, entity, event)&#13;&#10;called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="177" name="CanSpawn">
				<summary>function Item:CanSpawn()&#13;&#10;whether the item can be spawned using spawn command. 
				</summary>
			</function>
			<function line="184" name="CanCreateItemAt">
				<summary>function Item:CanCreateItemAt(x,y,z)&#13;&#10;whether we can create item at given block position.&#13;&#10;only basic check is performed. such as: &#32;&#13;&#10;we allow any block(except liquid) to create on empty or liquid block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="193" name="GetMaxDamage">
				<summary>function Item:GetMaxDamage()&#13;&#10;max durability. nil for infinite (not damagable). 
				</summary>
			</function>
			<function line="198" name="CanItemEditBlocks">
				<summary>function Item:CanItemEditBlocks()&#13;&#10;Returns true if players can use this item to affect the world (e.g. placing blocks, placing ender eyes in portal)
				</summary>
			</function>
			<function line="203" name="OnUseItem">
				<summary>function Item:OnUseItem(itemStack, fromEntity)&#13;&#10;called when this item is used and deal 2 damage to the item's durability. 
				</summary>
				<parameter name="itemStack"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="212" name="CanPlaceOnSide">
				<summary>function Item:CanPlaceOnSide(x,y,z,side, data, side_region, entityPlayer, itemStack)&#13;&#10;Returns true if the given Entity can be placed on the given side of the given block position.&#13;&#10; &#32; @param x,y,z: this is the position where the block should be placed&#13;&#10; &#32; @param side: this is the OPPOSITE of the side of contact. 
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact. 
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<parameter name="entityPlayer"/>
				<parameter name="itemStack"/>
			</function>
			<function line="236" name="TryCreate">
				<summary>function Item:TryCreate(itemStack, entityPlayer, x,y,z, side, data, side_region)&#13;&#10;Right clicking in 3d world with the block in hand will trigger this function. &#13;&#10;Alias: OnUseItem;&#13;&#10; &#32; @param itemStack: can be nil&#13;&#10; &#32; @param entityPlayer: can be nil&#13;&#10; &#32; @param side: this is OPPOSITE of the touching side&#13;&#10; &#32; @return isUsed, entityCreated: isUsed is true if something happens.
				</summary>
				<parameter name="itemStack">can be nil
				</parameter>
				<parameter name="entityPlayer">can be nil
				</parameter>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
				<returns>return , entityCreated: isUsed is true if something happens.
				</returns>
			</function>
			<function line="296" name="OnCreate">
				<summary>function Item:OnCreate(result)&#13;&#10;virtual function:&#13;&#10; &#32; @param result: picking result. {block_id, blockX, blockY, blockZ}&#13;&#10; &#32; @return: return true if created
				</summary>
				<parameter name="result">picking result. {block_id, blockX, blockY, blockZ}
				</parameter>
				<returns>return return true if created
				</returns>
			</function>
			<function line="301" name="GetIconAtlas">
				<summary>function Item:GetIconAtlas()&#13;&#10;static function&#13;&#10;get Icon texture altas
				</summary>
			</function>
			<function line="314" name="GetIcon">
				<summary>function Item:GetIcon(block_data)&#13;&#10;&#13;&#10; &#32; @param block_data: default to nil
				</summary>
				<parameter name="block_data">default to nil
				</parameter>
			</function>
			<function line="363" name="GetTexture">
				<summary>function Item:GetTexture()&#13;&#10;get the primary texture file for this item. 
				</summary>
			</function>
			<function line="373" name="GetIconObject">
				<summary>function Item:GetIconObject()&#13;&#10;&#13;&#10; &#32; @return ParaAsset icon
				</summary>
				<returns>return icon
				</returns>
			</function>
			<function line="389" name="GetAssetFile">
				<summary>function Item:GetAssetFile()&#13;&#10;get the primary asset file
				</summary>
			</function>
			<function line="398" name="GetSkinFile">
				<summary>function Item:GetSkinFile()&#13;&#10;get skin 
				</summary>
			</function>
			<function line="406" name="GetTooltipFromItemStack">
				<summary>function Item:GetTooltipFromItemStack(itemStack)&#13;&#10;
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="417" name="GetOffsetY">
				<summary>function Item:GetOffsetY()&#13;&#10;
				</summary>
			</function>
			<function line="426" name="GetScaling">
				<summary>function Item:GetScaling()&#13;&#10;
				</summary>
			</function>
			<function line="434" name="HasFacing">
				<summary>function Item:HasFacing()&#13;&#10;
				</summary>
			</function>
			<function line="437" name="GetTooltip">
				<summary>function Item:GetTooltip()&#13;&#10;
				</summary>
			</function>
			<function line="454" name="GetBlockData">
				<summary>function Item:GetBlockData(itemStack)&#13;&#10;virtual function: try to get block data from itemStack. &#13;&#10;in most cases, this return nil&#13;&#10; &#32; @return nil or a number 
				</summary>
				<parameter name="itemStack"/>
				<returns>return or a number 
				</returns>
			</function>
			<function line="460" name="GetBlockEntityData">
				<summary>function Item:GetBlockEntityData(itemStack)&#13;&#10;virtual function: try to get block entity data from itemStack. &#13;&#10;in most cases, this return nil&#13;&#10; &#32; @return nil or an xml table
				</summary>
				<parameter name="itemStack"/>
				<returns>return or an xml table
				</returns>
			</function>
			<function line="463" name="GetStatName">
				<summary>function Item:GetStatName()&#13;&#10;
				</summary>
			</function>
			<function line="468" name="GetSearchKey">
				<summary>function Item:GetSearchKey()&#13;&#10;get a string containing search keys in lower case
				</summary>
			</function>
			<function line="482" name="GetDisplayName">
				<summary>function Item:GetDisplayName()&#13;&#10;
				</summary>
			</function>
			<function line="496" name="OnUse">
				<summary>function Item:OnUse()&#13;&#10;virtual function: use the item. 
				</summary>
			</function>
			<function line="500" name="OnSelect">
				<summary>function Item:OnSelect(itemStack)&#13;&#10;virtual function: when selected in right hand
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="505" name="OnDeSelect">
				<summary>function Item:OnDeSelect()&#13;&#10;virtual function: when deselected in right hand
				</summary>
			</function>
			<function line="510" name="OnLoadWorld">
				<summary>function Item:OnLoadWorld()&#13;&#10;virtual function: called when loading world. 
				</summary>
			</function>
			<function line="518" name="UpdateInWorldCount">
				<summary>function Item:UpdateInWorldCount(nDiffCount, bIgnoreUpperConstraint)&#13;&#10;update in world count&#13;&#10; &#32; @param bIgnoreUpperConstraint: true or nil to ignore self.max_count&#13;&#10; &#32; @return count the actual count diff. 
				</summary>
				<parameter name="nDiffCount"/>
				<parameter name="bIgnoreUpperConstraint">true or nil to ignore self.max_count
				</parameter>
				<returns>return the actual count diff. 
				</returns>
			</function>
			<function line="532" name="GetInWorldCount">
				<summary>function Item:GetInWorldCount()&#13;&#10;get the number of items that is already used in the current world, such as collectables.
				</summary>
			</function>
			<function line="538" name="CreateBlockPieces">
				<summary>function Item:CreateBlockPieces(blockX, blockY, blockZ, granularity)&#13;&#10;&#13;&#10; &#32; @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1. 
				</parameter>
			</function>
			<function line="550" name="OnObtain">
				<summary>function Item:OnObtain()&#13;&#10;called every frame
				</summary>
			</function>
			<function line="553" name="GetItemModel">
				<summary>function Item:GetItemModel()&#13;&#10;
				</summary>
			</function>
			<function line="561" name="GetItemModelScaling">
				<summary>function Item:GetItemModelScaling()&#13;&#10;item scaling when hold in hand. 
				</summary>
			</function>
			<function line="571" name="GetItemModelInHandOffset">
				<summary>function Item:GetItemModelInHandOffset()&#13;&#10;item offset when hold in hand.&#13;&#10; &#32; @return nil or {x,y,z}
				</summary>
				<returns>return or {x,y,z}
				</returns>
			</function>
			<function line="575" name="CreateItemModel">
				<summary>function Item:CreateItemModel(x,y,z, facing, scaling)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="facing"/>
				<parameter name="scaling"/>
			</function>
			<function line="580" name="setMouseTracking">
				<summary>function Item:setMouseTracking(enable)&#13;&#10;
				</summary>
				<parameter name="enable"/>
			</function>
			<function line="587" name="hasMouseTracking">
				<summary>function Item:hasMouseTracking()&#13;&#10;if true, we will receive mouse move event even mouse down is not accepted by the item. &#13;&#10;if false, we will only receive mouse move event if mouse down is accepted. &#13;&#10;default to false. 
				</summary>
			</function>
			<function line="594" name="event">
				<summary>function Item:event(event)&#13;&#10;called whenever an event comes. Subclass can overwrite this function.&#13;&#10; &#32; @param handlerName: "sizeEvent", "paintEvent", "mouseDownEvent", "mouseUpEvent", etc.&#13;&#10; &#32; @param event: the event object. 
				</summary>
				<parameter name="event">the event object. 
				</parameter>
			</function>
			<function line="602" name="mousePressEvent">
				<summary>function Item:mousePressEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="604" name="mouseMoveEvent">
				<summary>function Item:mouseMoveEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="606" name="mouseReleaseEvent">
				<summary>function Item:mouseReleaseEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="608" name="mouseWheelEvent">
				<summary>function Item:mouseWheelEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="610" name="keyReleaseEvent">
				<summary>function Item:keyReleaseEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="612" name="keyPressEvent">
				<summary>function Item:keyPressEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="617" name="PickItemFromPosition">
				<summary>function Item:PickItemFromPosition(x,y,z)&#13;&#10;virtual:&#13;&#10;when alt key is pressed to pick a block in edit mode. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="638" name="ConvertEntityToItem">
				<summary>function Item:ConvertEntityToItem(entity)&#13;&#10;virtual: convert entity to item stack. &#13;&#10;such as when alt key is pressed to pick a entity in edit mode. 
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="646" name="CompareItems">
				<summary>function Item:CompareItems(left, right)&#13;&#10;virtual:&#13;&#10;compare two item stacks of the same item. &#13;&#10;return true if items are the same.&#13;&#10; &#32; @param left, right: type of ItemStack or nil. 
				</summary>
				<parameter name="left">, right: type of ItemStack or nil. 
				</parameter>
				<parameter name="right"/>
			</function>
			<function line="654" name="HasColorData">
				<summary>function Item:HasColorData()&#13;&#10;
				</summary>
			</function>
			<function line="667" name="IsColorData8Bits">
				<summary>function Item:IsColorData8Bits()&#13;&#10;whether we use 8 bits color data 
				</summary>
			</function>
			<function line="682" name="ColorToData">
				<summary>function Item:ColorToData(color, bitCount)&#13;&#10;static function: from color to data&#13;&#10; &#32; @param bitCount: 8 or 16, default to current item setting
				</summary>
				<parameter name="color"/>
				<parameter name="bitCount">8 or 16, default to current item setting
				</parameter>
			</function>
			<function line="692" name="DataToColor">
				<summary>function Item:DataToColor(data, bitCount)&#13;&#10;&#13;&#10; &#32; @param bitCount: 8 or 16, default to current item setting&#13;&#10; &#32; @return without alpha, 0xff0000
				</summary>
				<parameter name="data"/>
				<parameter name="bitCount">8 or 16, default to current item setting
				</parameter>
				<returns>return alpha, 0xff0000
				</returns>
			</function>
			<function line="705" name="DrawIcon">
				<summary>function Item:DrawIcon(painter, width, height, itemStack)&#13;&#10;virtual: draw icon with given size at current position (0,0)&#13;&#10;this function is only called when IsOwnerDrawIcon property is true.&#13;&#10; &#32; @param width, height: size of the icon&#13;&#10; &#32; @param itemStack: this may be nil. or itemStack instance. 
				</summary>
				<parameter name="painter"/>
				<parameter name="width">, height: size of the icon
				</parameter>
				<parameter name="height"/>
				<parameter name="itemStack">this may be nil. or itemStack instance. 
				</parameter>
			</function>
			<function line="726" name="SerializeServerData">
				<summary>function Item:SerializeServerData(serverdata, bSort)&#13;&#10;
				</summary>
				<parameter name="serverdata"/>
				<parameter name="bSort"/>
			</function>
		</table>
		<table name="ItemStack" src="script/apps/Aries/Creator/Game/Items/ItemStack.lua">
			<function line="32" name="ctor">
				<summary>function ItemStack:ctor()&#13;&#10;&#13;&#10; &#32; @param template: icon&#13;&#10; &#32; @param icon:&#13;&#10; &#32; @param block_id:
				</summary>
			</function>
			<function line="37" name="Init">
				<summary>function ItemStack:Init(id, count, serverdata)&#13;&#10;&#13;&#10; &#32; @param id: the underlying item id.&#13;&#10; &#32; @param serverdata: this should be xml node table or nil. 
				</summary>
				<parameter name="id">the underlying item id.
				</parameter>
				<parameter name="count"/>
				<parameter name="serverdata">this should be xml node table or nil. 
				</parameter>
			</function>
			<function line="44" name="GetItem">
				<summary>function ItemStack:GetItem()&#13;&#10;
				</summary>
			</function>
			<function line="49" name="GetData">
				<summary>function ItemStack:GetData()&#13;&#10;get user data 
				</summary>
			</function>
			<function line="58" name="SetData">
				<summary>function ItemStack:SetData(data)&#13;&#10;set user data 
				</summary>
				<parameter name="data"/>
			</function>
			<function line="70" name="SetPreferredBlockData">
				<summary>function ItemStack:SetPreferredBlockData(data)&#13;&#10;
				</summary>
				<parameter name="data"/>
			</function>
			<function line="74" name="GetPreferredBlockData">
				<summary>function ItemStack:GetPreferredBlockData()&#13;&#10;
				</summary>
			</function>
			<function line="79" name="GetScriptScope">
				<summary>function ItemStack:GetScriptScope()&#13;&#10;create or get script scope
				</summary>
			</function>
			<function line="90" name="SetScript">
				<summary>function ItemStack:SetScript(filename)&#13;&#10;set script and automatically reload if a different file is specified. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="106" name="SetCode">
				<summary>function ItemStack:SetCode(code)&#13;&#10;set the raw code to run
				</summary>
				<parameter name="code"/>
			</function>
			<function line="122" name="RunCode">
				<summary>function ItemStack:RunCode(...)&#13;&#10;run the entire script code again with given parameters. 
				</summary>
			</function>
			<function line="135" name="HasScript">
				<summary>function ItemStack:HasScript()&#13;&#10;whether has script file or raw code
				</summary>
			</function>
			<function line="143" name="CheckLoadScript">
				<summary>function ItemStack:CheckLoadScript(bReload, bRunOnFirstLoad)&#13;&#10;check load script code if any. It will only load on first call. Subsequent calls will be very fast. &#13;&#10;usually one do not need to call this function explicitly, unless one wants to preload or reload.&#13;&#10; &#32; @param bReload: default to nil.&#13;&#10; &#32; @param bRunOnFirstLoad: true to run on first load. if nil it means true
				</summary>
				<parameter name="bReload">default to nil.
				</parameter>
				<parameter name="bRunOnFirstLoad">true to run on first load. if nil it means true
				</parameter>
			</function>
			<function line="185" name="GetScriptFunction">
				<summary>function ItemStack:GetScriptFunction(func_name, bReload)&#13;&#10;get script function if any.&#13;&#10; &#32; @param func_name: some known functions are "main"&#13;&#10; &#32; @return the function or nil is returned. 
				</summary>
				<parameter name="func_name">some known functions are "main"
				</parameter>
				<parameter name="bReload"/>
				<returns>return function or nil is returned. 
				</returns>
			</function>
			<function line="192" name="GetPosition">
				<summary>function ItemStack:GetPosition()&#13;&#10;
				</summary>
			</function>
			<function line="197" name="SetPosition">
				<summary>function ItemStack:SetPosition(x, y, z)&#13;&#10;set block position
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="203" name="ActivateScript">
				<summary>function ItemStack:ActivateScript(...)&#13;&#10;activate script associated by SetScript() function.&#13;&#10; &#32; @param entity: the message to be passed to main function. 
				</summary>
			</function>
			<function line="219" name="OnActivate">
				<summary>function ItemStack:OnActivate(entityContainer, entityPlayer)&#13;&#10;called when this function is activated when the entity is activated.&#13;&#10; &#32; @param entity: the container entity. this is usually a command block or entity.&#13;&#10; &#32; @param entityPlayer: the triggering entity&#13;&#10; &#32; @return true if the entity should stop activating other items in its bag. 
				</summary>
				<parameter name="entityContainer"/>
				<parameter name="entityPlayer">the triggering entity
				</parameter>
				<returns>return if the entity should stop activating other items in its bag. 
				</returns>
			</function>
			<function line="227" name="handleEntityEvent">
				<summary>function ItemStack:handleEntityEvent(entity, event)&#13;&#10;called when entity receives a custom event via one of its rule bag items. 
				</summary>
				<parameter name="entity"/>
				<parameter name="event"/>
			</function>
			<function line="235" name="LoadFromXMLNode">
				<summary>function ItemStack:LoadFromXMLNode(node)&#13;&#10;
				</summary>
				<parameter name="node"/>
			</function>
			<function line="250" name="SaveToXMLNode">
				<summary>function ItemStack:SaveToXMLNode(node, bSort)&#13;&#10;
				</summary>
				<parameter name="node"/>
				<parameter name="bSort"/>
			</function>
			<function line="278" name="SplitStack">
				<summary>function ItemStack:SplitStack(count)&#13;&#10;Remove the count number of items from the stack. Return a new stack object with count size.&#13;&#10; &#32; @param count: if nil, it will be the total count. 
				</summary>
				<parameter name="count">if nil, it will be the total count. 
				</parameter>
			</function>
			<function line="291" name="GetMaxStackSize">
				<summary>function ItemStack:GetMaxStackSize()&#13;&#10;returns max allowed size of the item.
				</summary>
			</function>
			<function line="300" name="IsStackable">
				<summary>function ItemStack:IsStackable()&#13;&#10;if the ItemStack can hold 2 or more units of the item.
				</summary>
			</function>
			<function line="305" name="IsSameItem">
				<summary>function ItemStack:IsSameItem(itemStack)&#13;&#10;return true if item is same, both id and serverdata mathes
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="318" name="Copy">
				<summary>function ItemStack:Copy()&#13;&#10;return a copy of self. 
				</summary>
			</function>
			<function line="331" name="Swap">
				<summary>function ItemStack:Swap(itemStack)&#13;&#10;swapping all content: id, count and data
				</summary>
				<parameter name="itemStack"/>
			</function>
			<function line="341" name="GetIcon">
				<summary>function ItemStack:GetIcon()&#13;&#10;get icon 
				</summary>
			</function>
			<function line="349" name="GetBlock">
				<summary>function ItemStack:GetBlock()&#13;&#10;get block template. 
				</summary>
			</function>
			<function line="358" name="GetDataField">
				<summary>function ItemStack:GetDataField(fieldname)&#13;&#10;get data field&#13;&#10; &#32; @param fieldname: "tooltip", "durability", etc
				</summary>
				<parameter name="fieldname">"tooltip", "durability", etc
				</parameter>
			</function>
			<function line="369" name="SetDataField">
				<summary>function ItemStack:SetDataField(fieldname, value)&#13;&#10;set data field to be stored&#13;&#10; &#32; @param fieldname: "tooltip", "durability"
				</summary>
				<parameter name="fieldname">"tooltip", "durability"
				</parameter>
				<parameter name="value"/>
			</function>
			<function line="383" name="GetDataTable">
				<summary>function ItemStack:GetDataTable()&#13;&#10;
				</summary>
			</function>
			<function line="390" name="GetIconText">
				<summary>function ItemStack:GetIconText()&#13;&#10;this is the text shown at the right bottom of the icon in pe:slot control. &#13;&#10;by default, this is count if bigger than 1, and "" if count is 1&#13;&#10;if the displayname contains [XXX], text in square brackets will also be displayed. 
				</summary>
			</function>
			<function line="406" name="GetTooltip">
				<summary>function ItemStack:GetTooltip()&#13;&#10;get tooltip
				</summary>
			</function>
			<function line="417" name="GetDisplayName">
				<summary>function ItemStack:GetDisplayName()&#13;&#10;
				</summary>
			</function>
			<function line="430" name="SetDisplayName">
				<summary>function ItemStack:SetDisplayName(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="435" name="SetTooltip">
				<summary>function ItemStack:SetTooltip(value)&#13;&#10;set user defined tooltip. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="441" name="SetDurability">
				<summary>function ItemStack:SetDurability(value)&#13;&#10;durablity: do not call this function directly, call :AttemptDamageItem() instead. &#13;&#10;only call this function when you are setting an undurable item to become durable via command line, etc. 
				</summary>
				<parameter name="value"/>
			</function>
			<function line="446" name="GetDurability">
				<summary>function ItemStack:GetDurability()&#13;&#10;nil means infinit.
				</summary>
			</function>
			<function line="458" name="IsItemStackDamageable">
				<summary>function ItemStack:IsItemStackDamageable()&#13;&#10;true if this itemStack is damageable
				</summary>
			</function>
			<function line="466" name="IsItemDamaged">
				<summary>function ItemStack:IsItemDamaged()&#13;&#10;returns true when a damageable item is damaged
				</summary>
			</function>
			<function line="471" name="GetMaxDamage">
				<summary>function ItemStack:GetMaxDamage()&#13;&#10;Returns the max damage(durabilitt) an item in the stack can take.
				</summary>
			</function>
			<function line="481" name="AttemptDamageItem">
				<summary>function ItemStack:AttemptDamageItem(amount)&#13;&#10;Attempts to damage the ItemStack with amount of damage. &#13;&#10;Returns true if it takes more damage than GetMaxDamage(). &#13;&#10;Returns false otherwise or if the ItemStack can't be damaged
				</summary>
				<parameter name="amount"/>
			</function>
			<function line="493" name="DamageItem">
				<summary>function ItemStack:DamageItem(amount, fromEntity)&#13;&#10;Damages the item in the ItemStack
				</summary>
				<parameter name="amount"/>
				<parameter name="fromEntity"/>
			</function>
			<function line="524" name="CanEditBlocks">
				<summary>function ItemStack:CanEditBlocks()&#13;&#10;
				</summary>
			</function>
			<function line="532" name="TryCreate">
				<summary>function ItemStack:TryCreate(entityPlayer, x,y,z, side, data, side_region)&#13;&#10;&#13;&#10; &#32; @param side: this is OPPOSITE of the touching side
				</summary>
				<parameter name="entityPlayer"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is OPPOSITE of the touching side
				</parameter>
				<parameter name="data"/>
				<parameter name="side_region"/>
			</function>
			<function line="545" name="OnItemRightClick">
				<summary>function ItemStack:OnItemRightClick(entityPlayer)&#13;&#10;Called whenever this item is equipped and the right mouse button is pressed.&#13;&#10; &#32; @return the new item stack to put in the position.
				</summary>
				<parameter name="entityPlayer"/>
				<returns>return new item stack to put in the position.
				</returns>
			</function>
		</table>
		<table name="block_types" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="86" name="PreloadBlockClass">
				<summary>function block_types.PreloadBlockClass()&#13;&#10;load known block type
				</summary>
			</function>
			<function line="141" name="init">
				<summary>function block_types.init()&#13;&#10;block_types.register_basics
				</summary>
			</function>
			<function line="147" name="OnWorldLoaded">
				<summary>function block_types:OnWorldLoaded()&#13;&#10;called when world is just loaded
				</summary>
			</function>
			<function line="156" name="RegisterBlockClass">
				<summary>function block_types.RegisterBlockClass(name, class)&#13;&#10;register a new block class
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="160" name="RegisterItemClass">
				<summary>function block_types.RegisterItemClass(name, class)&#13;&#10;
				</summary>
				<parameter name="name"/>
				<parameter name="class"/>
			</function>
			<function line="165" name="GetBlockClass">
				<summary>function block_types.GetBlockClass(block_)&#13;&#10;get block class
				</summary>
				<parameter name="block_"/>
			</function>
			<function line="175" name="GetItemClass">
				<summary>function block_types.GetItemClass(class_name)&#13;&#10;get item class by name
				</summary>
				<parameter name="class_name"/>
			</function>
			<function line="180" name="IsAssociatedBlockID">
				<summary>function block_types.IsAssociatedBlockID(block_id1, block_id2)&#13;&#10;such as the open door block and closed door block are associated. 
				</summary>
				<parameter name="block_id1"/>
				<parameter name="block_id2"/>
			</function>
			<function line="194" name="register_new_type">
				<summary>function block_types.register_new_type(block_, bCallRegister)&#13;&#10;register a new block type. It will overwrite whatever is registered before.&#13;&#10; &#32; @param block_: the block template object or a pure table of {id, ...} which will be used to construct a block template object.&#13;&#10; &#32; @param bCallRegister: true to invoke the low level block registration with the game engine. 
				</summary>
				<parameter name="block_">the block template object or a pure table of {id, ...} which will be used to construct a block template object.
				</parameter>
				<parameter name="bCallRegister">true to invoke the low level block registration with the game engine. 
				</parameter>
			</function>
			<function line="213" name="create_get_type">
				<summary>function block_types.create_get_type(id, params_default)&#13;&#10;create get the template params by template id.
				</summary>
				<parameter name="id"/>
				<parameter name="params_default"/>
			</function>
			<function line="222" name="GetAllBlocksWithTexture">
				<summary>function block_types.GetAllBlocksWithTexture(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="235" name="replace_texture">
				<summary>function block_types.replace_texture(id, filename, texture_index, bReplaceAllBlocks)&#13;&#10;replace texture at runtime&#13;&#10; &#32; @param bReplaceAllBlocks: true to replace all blocks with the given texture filename.
				</summary>
				<parameter name="id"/>
				<parameter name="filename"/>
				<parameter name="texture_index"/>
				<parameter name="bReplaceAllBlocks">true to replace all blocks with the given texture filename.
				</parameter>
			</function>
			<function line="252" name="restore_texture_pack">
				<summary>function block_types.restore_texture_pack()&#13;&#10;restore all textures to its default value. 
				</summary>
			</function>
			<function line="259" name="get">
				<summary>function block_types.get(id)&#13;&#10;return a given block template
				</summary>
				<parameter name="id"/>
			</function>
			<function line="264" name="GetByNameOrID">
				<summary>function block_types.GetByNameOrID(id)&#13;&#10;&#13;&#10; &#32; @param id: string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</summary>
				<parameter name="id">string or number. it can also be number string, such as "Water", "63", 63 are all valid. 
				</parameter>
			</function>
			<function line="280" name="GetTooltip">
				<summary>function block_types.GetTooltip(id)&#13;&#10;return tooltip
				</summary>
				<parameter name="id"/>
			</function>
			<function line="368" name="LoadBlockTemplates">
				<summary>function block_types.LoadBlockTemplates(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="396" name="ApplyTemplate">
				<summary>function block_types.ApplyTemplate(name, dest_node, filename)&#13;&#10;apply a given block template by name to the given xml node. 
				</summary>
				<parameter name="name"/>
				<parameter name="dest_node"/>
				<parameter name="filename"/>
			</function>
			<function line="429" name="LoadFromFile">
				<summary>function block_types.LoadFromFile(filename)&#13;&#10;loading all block definition from file
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="595" name="register_basics">
				<summary>function block_types.register_basics()&#13;&#10;basic types
				</summary>
			</function>
			<function line="608" name="GenerateFromDirFile">
				<summary>function block_types.GenerateFromDirFile(filename)&#13;&#10;dev only function:&#13;&#10; &#32; @filename: type in cmd.exe "dir &gt;filename.txt" and then use this function. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="641" name="update_registered_templates">
				<summary>function block_types.update_registered_templates(blockWorld)&#13;&#10;update the re-register all templates with the low level game engine.&#13;&#10; &#32; @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
			<function line="655" name="RecomputeAttributeOfAllBlocks">
				<summary>function block_types.RecomputeAttributeOfAllBlocks()&#13;&#10;
				</summary>
			</function>
		</table>
		<table name="block_model" src="script/apps/Aries/Creator/Game/blocks/block_types.lua">
			<function line="291" name="ctor">
				<summary>function block_model:ctor()&#13;&#10;------------------------&#13;&#10;block_model class&#13;&#10;------------------------
				</summary>
			</function>
			<function line="335" name="GetAssetObject">
				<summary>function block_model:GetAssetObject()&#13;&#10;get the default asset object. 
				</summary>
			</function>
			<function line="342" name="NeedUpdateLayer">
				<summary>function block_model:NeedUpdateLayer(layer)&#13;&#10;whether the model need to update layer one&#13;&#10;whether the model need to update layer 1
				</summary>
				<parameter name="layer"/>
			</function>
			<function line="353" name="GetMainTextureFileName">
				<summary>function block_model:GetMainTextureFileName()&#13;&#10;for breaking into pieces animation. 
				</summary>
			</function>
		</table>
		<table name="block" src="script/apps/Aries/Creator/Game/blocks/block.lua">
			<function line="97" name="ctor">
				<summary>function block:ctor()&#13;&#10;&#13;&#10; &#32; @param id: uint16 type. need to be larger than 1024 if not system type. 
				</summary>
			</function>
			<function line="142" name="isBlockNormalCube">
				<summary>function block:isBlockNormalCube()&#13;&#10;Indicate if a material is a normal solid opaque cube. Normal cube block also provide weak power when activated by a wire. 
				</summary>
			</function>
			<function line="147" name="LoadSound">
				<summary>function block:LoadSound(name, max_count, volume, pitch)&#13;&#10;not used. allowing to specify "glass4", and "glass[1-4]" is used. 
				</summary>
				<parameter name="name"/>
				<parameter name="max_count"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="175" name="Init">
				<summary>function block:Init()&#13;&#10;
				</summary>
			</function>
			<function line="179" name="get_id">
				<summary>function block:get_id()&#13;&#10;
				</summary>
			</function>
			<function line="184" name="SetTexture">
				<summary>function block:SetTexture(filename, texture_index)&#13;&#10;&#13;&#10; &#32; @param texture_index: nil to default to 1
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="194" name="GetTexture">
				<summary>function block:GetTexture(texture_index)&#13;&#10;&#13;&#10; &#32; @param texture_index: nil to default to 1
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
			</function>
			<function line="203" name="GetCurrentTexture">
				<summary>function block:GetCurrentTexture()&#13;&#10;get the current texture
				</summary>
			</function>
			<function line="210" name="GetTextureObj">
				<summary>function block:GetTextureObj(texture_index)&#13;&#10;&#13;&#10; &#32; @param texture_index: nil to default to 1&#13;&#10; &#32; @return nil, false or the texture asset object. 
				</summary>
				<parameter name="texture_index">nil to default to 1
				</parameter>
				<returns>return , false or the texture asset object. 
				</returns>
			</function>
			<function line="250" name="SetTileFromFilename">
				<summary>function block:SetTileFromFilename(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="259" name="GetTileSize">
				<summary>function block:GetTileSize()&#13;&#10;default to 1
				</summary>
			</function>
			<function line="265" name="ReplaceTexture">
				<summary>function block:ReplaceTexture(filename, texture_index, bNoRestore)&#13;&#10;&#13;&#10; &#32; @param texture_index: nil to default to 1&#13;&#10; &#32; @param bNoRestore: if true, we will not save the new texture to self.new_texture for automatic restore. 
				</summary>
				<parameter name="filename"/>
				<parameter name="texture_index">nil to default to 1
				</parameter>
				<parameter name="bNoRestore">if true, we will not save the new texture to self.new_texture for automatic restore. 
				</parameter>
			</function>
			<function line="322" name="RestoreTexture">
				<summary>function block:RestoreTexture()&#13;&#10;
				</summary>
			</function>
			<function line="352" name="GetIcon">
				<summary>function block:GetIcon()&#13;&#10;
				</summary>
			</function>
			<function line="370" name="SetAttribute">
				<summary>function block:SetAttribute(name, value)&#13;&#10;set per template attribute
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="384" name="UpdateAttribute">
				<summary>function block:UpdateAttribute(name, value)&#13;&#10;update attribute. 
				</summary>
				<parameter name="name"/>
				<parameter name="value"/>
			</function>
			<function line="394" name="SetSpeedReduction">
				<summary>function block:SetSpeedReduction(value)&#13;&#10;set speed reduction percentage of current block type.&#13;&#10; &#32; @param value : [0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</summary>
				<parameter name="value">[0,1]. by default water and web has 0.4, and 0.33 reduction. 
				</parameter>
			</function>
			<function line="400" name="SetVisible">
				<summary>function block:SetVisible(bVisible)&#13;&#10;make all blocks of this type visible or invisible. Please note, invisible block will maintain all of its functions. &#13;&#10;one may like to hide blocks like movie blocks in game mode. 
				</summary>
				<parameter name="bVisible"/>
			</function>
			<function line="405" name="SetLightValue">
				<summary>function block:SetLightValue(nValue)&#13;&#10;&#13;&#10; &#32; @param nValue: [0-15] a value of 0 means no light. 
				</summary>
				<parameter name="nValue">[0-15] a value of 0 means no light. 
				</parameter>
			</function>
			<function line="410" name="SetInvisibleLightValue">
				<summary>function block:SetInvisibleLightValue(nValue)&#13;&#10;&#13;&#10; &#32; @param nValue: [0-15] a value of 0 means no light. 
				</summary>
				<parameter name="nValue">[0-15] a value of 0 means no light. 
				</parameter>
			</function>
			<function line="420" name="GetSpeedReduction">
				<summary>function block:GetSpeedReduction()&#13;&#10;
				</summary>
			</function>
			<function line="424" name="RecomputeAttribute">
				<summary>function block:RecomputeAttribute()&#13;&#10;
				</summary>
			</function>
			<function line="444" name="GetAttribute">
				<summary>function block:GetAttribute(name)&#13;&#10;
				</summary>
				<parameter name="name"/>
			</function>
			<function line="450" name="Highlight">
				<summary>function block:Highlight()&#13;&#10;
				</summary>
			</function>
			<function line="455" name="Register">
				<summary>function block:Register(blockWorld)&#13;&#10;register this block template&#13;&#10; &#32; @param blockWorld: the ParaBlockWorld object. if nil, the default client block world is used. 
				</summary>
				<parameter name="blockWorld">the ParaBlockWorld object. if nil, the default client block world is used. 
				</parameter>
			</function>
			<function line="473" name="getMobilityFlag">
				<summary>function block:getMobilityFlag()&#13;&#10;Returns the mobility information of the block, 0 = free, 1 = can't push but can move over, 2 = total immobility and stop pistons&#13;&#10;-1 = can be moved regardless of whether it has action.
				</summary>
			</function>
			<function line="478" name="setHardness">
				<summary>function block:setHardness(value)&#13;&#10;Sets how many hits it takes to break a block.
				</summary>
				<parameter name="value"/>
			</function>
			<function line="486" name="setBlockUnbreakable">
				<summary>function block:setBlockUnbreakable()&#13;&#10;This method will make the hardness of the block equals to -1, and the block is indestructible.
				</summary>
			</function>
			<function line="491" name="getBlockHardness">
				<summary>function block:getBlockHardness(x,y,z)&#13;&#10;Returns the block hardness at a location. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="499" name="GetMetaDataFromEnv">
				<summary>function block:GetMetaDataFromEnv(blockX, blockY, blockZ, side, side_region, camx,camy,camz, lookat_x,lookat_y,lookat_z)&#13;&#10;get sub meta data according to current player or camera position.&#13;&#10; &#32; @param side: user clicked which side. this is *opposite* of the internal side.&#13;&#10; &#32; @param side_region: the user clicked which side. can be "upper" or "lower"&#13;&#10; &#32; @return metadata, force_condition: &#32;metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="side">user clicked which side. this is *opposite* of the internal side.
				</parameter>
				<parameter name="side_region">the user clicked which side. can be "upper" or "lower"
				</parameter>
				<parameter name="camx"/>
				<parameter name="camy"/>
				<parameter name="camz"/>
				<parameter name="lookat_x"/>
				<parameter name="lookat_y"/>
				<parameter name="lookat_z"/>
				<returns>return , force_condition: &#32;metadata is nil, if no block meta data can be derived. some will only return force_condition table
				</returns>
			</function>
			<function line="519" name="OnBlockPlacedBy">
				<summary>function block:OnBlockPlacedBy(x,y,z, entity)&#13;&#10;Called when the block is placed in the world.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
			</function>
			<function line="534" name="Create">
				<summary>function block:Create(x, y, z, bCheckCanCreate, data, side, condition, serverdata)&#13;&#10;virtual function: create a new block at the given position. &#13;&#10;TODO: move to game logic, and spawn other blocks if required&#13;&#10; &#32; @param x, y, z: block position.&#13;&#10; &#32; @param bCheckCanCreate: true to check if the player is inside the block and prevent creation.&#13;&#10; &#32; @param data: block data&#13;&#10; &#32; @param side: usually a hint for on which block side this block is created on.&#13;&#10; &#32; @param condition: a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom. &#32; &#13;&#10;0(numerical): block must not be of the same type; &#32;&#13;&#10;1(numerical): block must be of the same type &#32;-1(numerical): block should be empty &#32;&#13;&#10;'solid':block should be solid &#32;'obstruction':block should be obstruction&#13;&#10; &#32; @result: return the number of blocks created. if nil, no blocks are created
				</summary>
				<parameter name="x">, y, z: block position.
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bCheckCanCreate">true to check if the player is inside the block and prevent creation.
				</parameter>
				<parameter name="data">block data
				</parameter>
				<parameter name="side">usually a hint for on which block side this block is created on.
				</parameter>
				<parameter name="condition">a condition table like in block_types.xml. 2,8 and 4,6 are horizontal neighbour. 0 is top, 5 is bottom. &#32; &#13;&#10;0(numerical): block must not be of the same type; &#32;&#13;&#10;1(numerical): block must be of the same type &#32;-1(numerical): block should be empty &#32;&#13;&#10;'solid':block should be solid &#32;'obstruction':block should be obstruction
				</parameter>
				<parameter name="serverdata"/>
			</function>
			<function line="549" name="NearTerrainHole">
				<summary>function block.NearTerrainHole(x, z)&#13;&#10;whether the given real world point is near a terrain hole.&#13;&#10; &#32; @param cx,cz: center of the block in real coordinates
				</summary>
				<parameter name="x"/>
				<parameter name="z"/>
			</function>
			<function line="556" name="GetTooltip">
				<summary>function block:GetTooltip()&#13;&#10;
				</summary>
			</function>
			<function line="566" name="GetDisplayName">
				<summary>function block:GetDisplayName()&#13;&#10;
				</summary>
			</function>
			<function line="572" name="AutoFillUndergroundColumn">
				<summary>function block.AutoFillUndergroundColumn(blockX, blockY, blockZ, bIgnoreThisBlock)&#13;&#10;automatically generate blocks in column x,z. where the block at x,y,z must be a valid block either empty or solid.&#13;&#10; &#32; @return true, number_blocks_modifed. the first params is true if the current block is not destructible
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="bIgnoreThisBlock"/>
				<returns>return , number_blocks_modifed. the first params is true if the current block is not destructible
				</returns>
			</function>
			<function line="671" name="GetModelByBlockData">
				<summary>function block:GetModelByBlockData(blockData)&#13;&#10;
				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="679" name="GetBestModel">
				<summary>function block:GetBestModel(blockX, blockY, blockZ, blockData, side, force_condition)&#13;&#10;get the best model object according to nearby blocks.&#13;&#10; &#32; @param side: usually a hint for on which block side this block is created on. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
				<parameter name="side">usually a hint for on which block side this block is created on. 
				</parameter>
				<parameter name="force_condition"/>
			</function>
			<function line="818" name="PreloadAsset">
				<summary>function block:PreloadAsset()&#13;&#10;preload asset model. 
				</summary>
			</function>
			<function line="850" name="OnBlockAdded">
				<summary>function block:OnBlockAdded(blockX, blockY, blockZ, block_data, serverdata)&#13;&#10;virtual function
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_data"/>
				<parameter name="serverdata"/>
			</function>
			<function line="855" name="OnBlockEvent">
				<summary>function block:OnBlockEvent(x,y,z, event_id, event_param)&#13;&#10;when ever an event is received. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="event_id"/>
				<parameter name="event_param"/>
			</function>
			<function line="860" name="GetDroppedItemStack">
				<summary>function block:GetDroppedItemStack(x,y,z, bForceDrop)&#13;&#10;get the item stack when this block is broken &amp; dropped. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop"/>
			</function>
			<function line="871" name="OnUserBreakItem">
				<summary>function block:OnUserBreakItem(x,y,z, entityPlayer, lastBlockData)&#13;&#10;only called when user clicks to break an item 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entityPlayer"/>
				<parameter name="lastBlockData"/>
			</function>
			<function line="881" name="DropBlockAsItem">
				<summary>function block:DropBlockAsItem(x,y,z, bForceDrop)&#13;&#10;when ever this block is about to be destroyed and one may call this function to drop as an item first.&#13;&#10; &#32; @Note: this function should always be called before item is removed.&#13;&#10; &#32; @param bForceDrop: if true, we will drop regardless of game mode
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="bForceDrop">if true, we will drop regardless of game mode
				</parameter>
			</function>
			<function line="895" name="OnNeighborChanged">
				<summary>function block:OnNeighborChanged(x,y,z,neighbor_block_id)&#13;&#10;virtual function: Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are their own) &#13;&#10;called when neighbour has changed. be careful of recursive calls.&#13;&#10; &#32; @param x, y, z:&#13;&#10; &#32; @param neighbor_block_id:
				</summary>
				<parameter name="x">, y, z:
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="neighbor_block_id">
				</parameter>
			</function>
			<function line="912" name="updateTick">
				<summary>function block:updateTick(x,y,z)&#13;&#10;called on framemove.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="917" name="IsAssociatedBlockID">
				<summary>function block:IsAssociatedBlockID(block_id)&#13;&#10;return true if the block_id is associated block, such as an open door and closed door. 
				</summary>
				<parameter name="block_id"/>
			</function>
			<function line="922" name="CanDestroyBlockAt">
				<summary>function block:CanDestroyBlockAt(x,y,z)&#13;&#10;default to return true, unless there is an can destroy rule. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="934" name="SetRule_CanDestroy">
				<summary>function block:SetRule_CanDestroy(rule)&#13;&#10;set whether a given block can be placed onto another block.&#13;&#10; &#32; @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="940" name="canPlaceBlockAt">
				<summary>function block:canPlaceBlockAt(x,y,z)&#13;&#10;virtual: Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="954" name="SetRule_CanPlace">
				<summary>function block:SetRule_CanPlace(rule)&#13;&#10;set whether a given block can be placed onto another block.&#13;&#10; &#32; @param rule: rule or nil. nil to remove the rule. 
				</summary>
				<parameter name="rule">rule or nil. nil to remove the rule. 
				</parameter>
			</function>
			<function line="961" name="canPlaceBlockOnSide">
				<summary>function block:canPlaceBlockOnSide(x,y,z,side)&#13;&#10;checks to see if you can place this block can be placed on that side of a block: BlockLever overrides&#13;&#10; &#32; @param x,y,z: this is the position where the block should be placed&#13;&#10; &#32; @param side: this is the OPPOSITE of the side of contact.
				</summary>
				<parameter name="x">,y,z: this is the position where the block should be placed
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="side">this is the OPPOSITE of the side of contact.
				</parameter>
			</function>
			<function line="969" name="GetBlockEntity">
				<summary>function block:GetBlockEntity(x,y,z)&#13;&#10;get the block entity at the given block position that matches the block's entity class
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="979" name="UpdateModel">
				<summary>function block:UpdateModel(blockX, blockY, blockZ, blockData)&#13;&#10;update a block's custom model according to user data. this function is called whenever the block data changes or on load. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="blockData"/>
			</function>
			<function line="1032" name="isProvidingWeakPower">
				<summary>function block:isProvidingWeakPower(x, y, z, direction)&#13;&#10;Returns true if the block is emitting indirect/weak power on the specified side. If isBlockNormalCube&#13;&#10;returns true, standard electric power propagation rules will apply instead and this will not be called.&#13;&#10; &#32; @param direction: Note that the side is reversed. &#32;eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed. &#32;eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="1038" name="isProvidingStrongPower">
				<summary>function block:isProvidingStrongPower(x, y, z, direction)&#13;&#10;Returns true if the block is emitting direct/strong power on the specified side.&#13;&#10; &#32; @param direction: Note that the side is reversed. &#32;eg 4 (up) when checking the bottom of the block.
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="direction">Note that the side is reversed. &#32;eg 4 (up) when checking the bottom of the block.
				</parameter>
			</function>
			<function line="1043" name="canProvidePower">
				<summary>function block:canProvidePower()&#13;&#10;Can this block provide power. 
				</summary>
			</function>
			<function line="1049" name="OnBlockLoaded">
				<summary>function block:OnBlockLoaded(x,y,z, block_data)&#13;&#10;called when block is first loaded from disk file to memory&#13;&#10;only customModel has this function called. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_data"/>
			</function>
			<function line="1056" name="GetEntityClass">
				<summary>function block:GetEntityClass()&#13;&#10;get entity class if any. 
				</summary>
			</function>
			<function line="1065" name="DeleteModel">
				<summary>function block:DeleteModel(blockX, blockY, blockZ)&#13;&#10;
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1077" name="OnBlockRemoved">
				<summary>function block:OnBlockRemoved(blockX, blockY, blockZ, last_id, last_data)&#13;&#10;on block removed
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="last_id"/>
				<parameter name="last_data"/>
			</function>
			<function line="1084" name="GetSlipperiness">
				<summary>function block:GetSlipperiness()&#13;&#10;this decides the acceleration distance when entity is moving on the block. &#13;&#10;0 means no acceleration distance and player stops immediately when it stops moving. &#13;&#10;bigger value means that the player will slide this certain distance before comming to a complete stop. 
				</summary>
			</function>
			<function line="1091" name="Remove">
				<summary>function block:Remove(blockX, blockY, blockZ)&#13;&#10;virtual function: remove a block at the given position. &#13;&#10;it will automatically generate terrain blocks if necessary&#13;&#10; &#32; @result: return the number of blocks modified. this number may be nil or 1 or larger than one. if some other blocks are auto generated. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1137" name="FillTerrainBlock">
				<summary>function block.FillTerrainBlock(blockX, blockY, blockZ, block_id)&#13;&#10;static function: Fill blocks according to current terrain height and its surroundings.&#13;&#10; &#32; @param block_id: if nil it defaults to block_types.names.underground_shell
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it defaults to block_types.names.underground_shell
				</parameter>
			</function>
			<function line="1180" name="RemoveTerrainBlock">
				<summary>function block.RemoveTerrainBlock(blockX, blockY, blockZ)&#13;&#10;static function: remove the terrain block, we will set holes
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1241" name="GenerateUndergroundBlock">
				<summary>function block.GenerateUndergroundBlock(blockX, blockY, blockZ, block_id)&#13;&#10;static function:&#13;&#10;auto fill a random underground terrain block at given position.&#13;&#10; &#32; @param block_id: if nil it is a random block. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="block_id">if nil it is a random block. 
				</parameter>
			</function>
			<function line="1247" name="play_break_sound">
				<summary>function block:play_break_sound(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1254" name="play_create_sound">
				<summary>function block:play_create_sound(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1260" name="play_step_sound">
				<summary>function block:play_step_sound(volume)&#13;&#10;
				</summary>
				<parameter name="volume"/>
			</function>
			<function line="1266" name="play_click_sound">
				<summary>function block:play_click_sound(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1272" name="play_toggle_sound">
				<summary>function block:play_toggle_sound(x,y,z)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1278" name="GetItem">
				<summary>function block:GetItem()&#13;&#10;
				</summary>
			</function>
			<function line="1285" name="CreateBlockPieces">
				<summary>function block:CreateBlockPieces(blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz, color)&#13;&#10;&#13;&#10; &#32; @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.&#13;&#10; &#32; @param cx, cy, cz: center of break point.&#13;&#10; &#32; @param color: nil or such as 0xffff0000
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point.
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="color">nil or such as 0xffff0000
				</parameter>
			</function>
			<function line="1340" name="GetCustomModel">
				<summary>function block:GetCustomModel(blockX, blockY, blockZ)&#13;&#10;get the custom model at the given position.&#13;&#10; &#32; @return the paraobject or nil. 
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<returns>return paraobject or nil. 
				</returns>
			</function>
			<function line="1354" name="AddToSelection">
				<summary>function block:AddToSelection(blockX, blockY, blockZ, index)&#13;&#10;add the custom model to selection.&#13;&#10; &#32; @param index: the selection group id, default to 2.&#13;&#10; &#32; @return true if selected
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="index">the selection group id, default to 2.
				</parameter>
				<returns>return if selected
				</returns>
			</function>
			<function line="1365" name="GetInternalStateNumber">
				<summary>function block:GetInternalStateNumber(x,y,z)&#13;&#10;some block like command blocks, may has an internal state number(like its last output result)&#13;&#10;and some block may use its nearby blocks' state number to generate electric output or other behaviors.&#13;&#10; &#32; @return nil or a number between [0-15]
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<returns>return or a number between [0-15]
				</returns>
			</function>
			<function line="1372" name="OnClick">
				<summary>function block:OnClick(bx, by, bz, mouse_button, entity, side)&#13;&#10;called when the user clicks on the block&#13;&#10; &#32; @param side: on which side the block is clicked.&#13;&#10; &#32; @return: return true if it is an action block and processed . 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="mouse_button"/>
				<parameter name="entity"/>
				<parameter name="side">on which side the block is clicked.
				</parameter>
				<returns>return return true if it is an action block and processed . 
				</returns>
			</function>
			<function line="1384" name="OnEntityCollided">
				<summary>function block:OnEntityCollided(x,y,z, entity, deltaTime)&#13;&#10;Triggered whenever an entity collides with this block (enters into the block). Args: world, x, y, z, entity
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="entity"/>
				<parameter name="deltaTime"/>
			</function>
			<function line="1389" name="OnMouseDown">
				<summary>function block:OnMouseDown(x,y,z, mouse_button)&#13;&#10;call when use press mouse down button over the block
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="mouse_button"/>
			</function>
			<function line="1398" name="OnActivated">
				<summary>function block:OnActivated(bx, by, bz, entity)&#13;&#10;virtual function: some signal is received, such as user click&#13;&#10;the default behavior is to activate the neuron block.
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1409" name="OnToggle">
				<summary>function block:OnToggle(bx, by, bz)&#13;&#10;some blocks can be toggled to another block. and may event have a toggle function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
			</function>
			<function line="1420" name="OnStep">
				<summary>function block:OnStep(bx, by, bz, entity)&#13;&#10;when the player steps on the top surface of the block&#13;&#10;some block may have an on step function. 
				</summary>
				<parameter name="bx"/>
				<parameter name="by"/>
				<parameter name="bz"/>
				<parameter name="entity"/>
			</function>
			<function line="1425" name="tickRate">
				<summary>function block:tickRate()&#13;&#10;How many simulation steps 
				</summary>
			</function>
			<function line="1430" name="isNormalCube">
				<summary>function block:isNormalCube()&#13;&#10;whether block is normal solid cube model that can not provide power. 
				</summary>
			</function>
			<function line="1454" name="GetItemModel">
				<summary>function block:GetItemModel()&#13;&#10;get model file for item display
				</summary>
			</function>
			<function line="1486" name="GetOffsetY">
				<summary>function block:GetOffsetY()&#13;&#10;
				</summary>
			</function>
			<function line="1497" name="GetItemModelScaling">
				<summary>function block:GetItemModelScaling()&#13;&#10;model scaling for GetItemModel() as handheld item. 
				</summary>
			</function>
			<function line="1502" name="OnWorldLoaded">
				<summary>function block:OnWorldLoaded()&#13;&#10;called when world is loaded
				</summary>
			</function>
			<function line="1507" name="UpdateBlockBounds">
				<summary>function block:UpdateBlockBounds()&#13;&#10;set the block bounds and collision AABB. 
				</summary>
			</function>
			<function line="1512" name="SetBlockBounds">
				<summary>function block:SetBlockBounds(minX, minY, minZ, maxX, maxY, maxZ)&#13;&#10;input is in local block pos which is scaled by block_size internally. 
				</summary>
				<parameter name="minX"/>
				<parameter name="minY"/>
				<parameter name="minZ"/>
				<parameter name="maxX"/>
				<parameter name="maxY"/>
				<parameter name="maxZ"/>
			</function>
			<function line="1519" name="GetCollisionBoundingBoxFromPool">
				<summary>function block:GetCollisionBoundingBoxFromPool(x,y,z)&#13;&#10;Returns a bounding box from the pool of bounding boxes.&#13;&#10;this box can change after the pool has been cleared to be reused
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1527" name="AddCollisionBoxesToList">
				<summary>function block:AddCollisionBoxesToList(x,y,z, aabb, list, entity)&#13;&#10;Adds all intersecting collision boxes representing this block to a list.&#13;&#10; &#32; @param list: in|out array list to hold the output&#13;&#10; &#32; @param aabb: only add if collide with this aabb.&#13;&#10; &#32; @param entity: 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="aabb">only add if collide with this aabb.
				</parameter>
				<parameter name="list">in|out array list to hold the output
				</parameter>
				<parameter name="entity">
				</parameter>
			</function>
			<function line="1542" name="RotateBlockData">
				<summary>function block:RotateBlockData(blockData, angle, axis)&#13;&#10;rotate the block data by the given angle and axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.&#13;&#10; &#32; @param blockData: current block data&#13;&#10; &#32; @param angle: usually 1.57, -1.57, 3.14, -3.14, 0.&#13;&#10; &#32; @param axis: "x|y|z", if nil, it should default to "y" axis&#13;&#10; &#32; @return the rotated block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="angle">usually 1.57, -1.57, 3.14, -3.14, 0.
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return rotated block data. 
				</returns>
			</function>
			<function line="1552" name="RotateBlockEntityData">
				<summary>function block:RotateBlockEntityData(entityData, angle, axis)&#13;&#10;rotate the block entity data by the given angle and axis. This is mosted reimplemented in blocks with orientations stored in entity data, such as BMAX blockmodel, etc.&#13;&#10; &#32; @param entityData: current block data&#13;&#10; &#32; @param angle: usually 1.57, -1.57, 3.14, -3.14, 0.&#13;&#10; &#32; @param axis: "x|y|z", if nil, it should default to "y" axis&#13;&#10; &#32; @return the rotated block data. 
				</summary>
				<parameter name="entityData">current block data
				</parameter>
				<parameter name="angle">usually 1.57, -1.57, 3.14, -3.14, 0.
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return rotated block data. 
				</returns>
			</function>
			<function line="1558" name="RotateBlockDataUsingModelFacing">
				<summary>function block:RotateBlockDataUsingModelFacing(blockData, angle, axis)&#13;&#10;helper function: can be used by RotateBlockData() to automatically calculate rotated block facing. &#13;&#10;please note, it will cache last search result to accelerate subsequent calls.
				</summary>
				<parameter name="blockData"/>
				<parameter name="angle"/>
				<parameter name="axis"/>
			</function>
			<function line="1597" name="MirrorBlockData">
				<summary>function block:MirrorBlockData(blockData, axis)&#13;&#10;mirror the block data along the given axis. This is mosted reimplemented in blocks with orientations stored in block data, such as stairs, bones, etc.&#13;&#10; &#32; @param blockData: current block data&#13;&#10; &#32; @param axis: "x|y|z", if nil, it should default to "y" axis&#13;&#10; &#32; @return the mirrored block data. 
				</summary>
				<parameter name="blockData">current block data
				</parameter>
				<parameter name="axis">"x|y|z", if nil, it should default to "y" axis
				</parameter>
				<returns>return mirrored block data. 
				</returns>
			</function>
			<function line="1601" name="HasColorData">
				<summary>function block:HasColorData()&#13;&#10;
				</summary>
			</function>
			<function line="1608" name="GetDiffuseColor">
				<summary>function block:GetDiffuseColor(blockX, blockY, blockZ)&#13;&#10;it may return nil or number like 0xffff0000
				</summary>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
			</function>
			<function line="1618" name="GetDiffuseColorByData">
				<summary>function block:GetDiffuseColorByData(block_data)&#13;&#10;it may return nil or number like 0xffff0000
				</summary>
				<parameter name="block_data"/>
			</function>
			<function line="1628" name="GetBlockColor">
				<summary>function block:GetBlockColor(x,y,z)&#13;&#10;return color in RGB, without alpha
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="1643" name="SetBlockColor">
				<summary>function block:SetBlockColor(x,y,z, color)&#13;&#10;&#13;&#10; &#32; @param color: like 0xff0000
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="color">like 0xff0000
				</parameter>
			</function>
			<function line="1653" name="GetBlockColorByData">
				<summary>function block:GetBlockColorByData(blockData)&#13;&#10;return color in RGB, without alpha
				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="1668" name="GetBlockColorStrByData">
				<summary>function block:GetBlockColorStrByData(blockData)&#13;&#10;Get block color without alpha
				</summary>
				<parameter name="blockData"/>
			</function>
			<function line="1686" name="CalculatePreferredData">
				<summary>function block:CalculatePreferredData(data, preferredData)&#13;&#10;&#13;&#10; &#32; @param data: current data&#13;&#10; &#32; @param preferredData: data containning preferred colors&#13;&#10;return new data based on preferredData. In most cases, preferredData are just color data
				</summary>
				<parameter name="data">current data
				</parameter>
				<parameter name="preferredData">data containning preferred colors&#13;&#10;return new data based on preferredData. In most cases, preferredData are just color data
				</parameter>
			</function>
			<function line="1699" name="SetObstruction">
				<summary>function block:SetObstruction(bEnabled)&#13;&#10;whether the block is obstructed
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="1704" name="SetBlockCamera">
				<summary>function block:SetBlockCamera(bEnabled)&#13;&#10;
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="1709" name="SetClimbable">
				<summary>function block:SetClimbable(climbable)&#13;&#10;
				</summary>
				<parameter name="climbable"/>
			</function>
		</table>
		<table name="Files" src="script/apps/Aries/Creator/Game/Common/Files.lua">
			<function line="70" name="AddWorldSearchPath">
				<summary>function Files.AddWorldSearchPath(worldPath)&#13;&#10;currently only one addtional world search path can be added. 
				</summary>
				<parameter name="worldPath"/>
			</function>
			<function line="75" name="ClearWorldSearchPaths">
				<summary>function Files.ClearWorldSearchPaths()&#13;&#10;this is called when world exits
				</summary>
			</function>
			<function line="84" name="GetWorldFilePath">
				<summary>function Files.GetWorldFilePath(any_filename, search_folder, bCache)&#13;&#10;&#13;&#10; &#32; @param filename: the filename maybe relative to the current world or the SDK root. &#13;&#10;in case it is relative to the world, we will return a path relative to SDK root.&#13;&#10; &#32; @param search_folder: if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. &#13;&#10;such as "Texture/blocks/human/"&#13;&#10; &#32; @return return file relative to SDK root. or nil, if no file is found. 
				</summary>
				<parameter name="any_filename"/>
				<parameter name="search_folder">if nil, it is current world directory, otherwise, one can specify an additional search folder in addition to current world directory. &#13;&#10;such as "Texture/blocks/human/"
				</parameter>
				<parameter name="bCache"/>
				<returns>return file relative to SDK root. or nil, if no file is found. 
				</returns>
			</function>
			<function line="139" name="GetRemoteWorldFile">
				<summary>function Files.GetRemoteWorldFile(any_filename)&#13;&#10;one can check the result after 1 second&#13;&#10; &#32; @param any_filename: relative to world path. 
				</summary>
				<parameter name="any_filename">relative to world path. 
				</parameter>
			</function>
			<function line="147" name="FileExists">
				<summary>function Files.FileExists(filename)&#13;&#10;check if file exists.&#13;&#10; &#32; @param filename: can be relative to current world or sdk root. 
				</summary>
				<parameter name="filename">can be relative to current world or sdk root. 
				</parameter>
			</function>
			<function line="154" name="WorldPathToFullPath">
				<summary>function Files.WorldPathToFullPath(filename, bCheckExist)&#13;&#10;this function is mostly used to locate a local file resource.&#13;&#10; &#32; @param filename: must be relative to world.&#13;&#10; &#32; @param bCheckExist: if true, we will only return non-nil filename if the file exist on disk.
				</summary>
				<parameter name="filename">must be relative to world.
				</parameter>
				<parameter name="bCheckExist">if true, we will only return non-nil filename if the file exist on disk.
				</parameter>
			</function>
			<function line="174" name="ClearFindFileCache">
				<summary>function Files:ClearFindFileCache()&#13;&#10;call this function when world is loaded. 
				</summary>
			</function>
			<function line="183" name="SafeUnloadAllAssets">
				<summary>function Files:SafeUnloadAllAssets()&#13;&#10;this is usually used when user entered or left a complex closed room full of assets.&#13;&#10;one may expect 2 or 3 seconds stall on graphics
				</summary>
			</function>
			<function line="189" name="GetAssetManager">
				<summary>function Files:GetAssetManager(name)&#13;&#10;&#13;&#10; &#32; @param name: "ParaXManager" or "TextureManager"
				</summary>
				<parameter name="name">"ParaXManager" or "TextureManager"
				</parameter>
			</function>
			<function line="200" name="UnloadAllUnusedAssets">
				<summary>function Files:UnloadAllUnusedAssets(MaxRefCount)&#13;&#10;&#13;&#10; &#32; @param MaxRefCount: release all assets whose reference count it smaller than or equal to this value. default to 1. 
				</summary>
				<parameter name="MaxRefCount">release all assets whose reference count it smaller than or equal to this value. default to 1. 
				</parameter>
			</function>
			<function line="248" name="AddAlwaysInMemoryFile">
				<summary>function Files:AddAlwaysInMemoryFile(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="252" name="IsFileAlwaysInMemory">
				<summary>function Files:IsFileAlwaysInMemory(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="257" name="PrintAllAssets">
				<summary>function Files:PrintAllAssets()&#13;&#10;for debugging only
				</summary>
			</function>
			<function line="283" name="IsAssetFileLoaded">
				<summary>function Files:IsAssetFileLoaded(filename)&#13;&#10;
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="298" name="SafeUnloadAllWorldAssets">
				<summary>function Files:SafeUnloadAllWorldAssets()&#13;&#10;this is usually used when user entered or left a complex closed room full of assets.&#13;&#10;one may expect 1 or 2 seconds stall on graphics
				</summary>
			</function>
			<function line="305" name="UnloadAllWorldAssets">
				<summary>function Files:UnloadAllWorldAssets(MaxRefCount)&#13;&#10;this function is called before a new world is loaded. It will try to unload assets used in previous world.&#13;&#10;unload all assets in all world directory, where IsInitialized is true and RefCount is 1.&#13;&#10; &#32; @param MaxRefCount: release all assets whose reference count it smaller than or equal to this value. default to 1. 
				</summary>
				<parameter name="MaxRefCount">release all assets whose reference count it smaller than or equal to this value. default to 1. 
				</parameter>
			</function>
			<function line="352" name="SetGarbageColectStep">
				<summary>function Files:SetGarbageColectStep(nStep)&#13;&#10;how many assets to unload during each step.&#13;&#10; &#32; @param nStep: default to 20.
				</summary>
				<parameter name="nStep">default to 20.
				</parameter>
			</function>
			<function line="356" name="GetGarbageColectStep">
				<summary>function Files:GetGarbageColectStep()&#13;&#10;
				</summary>
			</function>
			<function line="367" name="GarbageCollect">
				<summary>function Files:GarbageCollect(bModel, bTexture)&#13;&#10;call this function regularly to release unreferenced assets&#13;&#10; &#32; @param bModel: if not false, we will garbage collect model files&#13;&#10; &#32; @param bTexture: if not false, we will garbage collect texture files&#13;&#10; &#32; @see also: &#32;SetGarbageColectStep()
				</summary>
				<parameter name="bModel">if not false, we will garbage collect model files
				</parameter>
				<parameter name="bTexture">if not false, we will garbage collect texture files
				</parameter>
			</function>
			<function line="436" name="GetFileCache">
				<summary>function Files:GetFileCache()&#13;&#10;
				</summary>
			</function>
			<function line="441" name="AddFileToCache">
				<summary>function Files:AddFileToCache(filename, filepath)&#13;&#10;cache all existing filename
				</summary>
				<parameter name="filename"/>
				<parameter name="filepath"/>
			</function>
			<function line="452" name="GetFileFromCache">
				<summary>function Files:GetFileFromCache(filename)&#13;&#10;get the full filename from cache of existing files.
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="457" name="GetShortFileFromLongFile">
				<summary>function Files:GetShortFileFromLongFile(filename)&#13;&#10;get short filename from cache of existing files to their long file path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="463" name="GetRelativePath">
				<summary>function Files.GetRelativePath(filename)&#13;&#10;get file path that is relative to current world directory. if not, it will return as it is. &#13;&#10;in most cases, we will store filenames using relative file path. But we have to pass to game engine the real path. 
				</summary>
				<parameter name="filename"/>
			</function>
			<function line="478" name="GetFilePath">
				<summary>function Files.GetFilePath(filename)&#13;&#10;we will try to find a file in world directory or global directory at all cost and save the result to cache &#13;&#10;so that the next time the same file is requeried, we will return fast for both exist or non-exist ones. &#13;&#10;see also Files.FindFile() it differs with it for non-exist files, this function will also cache non-exist files. &#13;&#10;Files.FindFile does not cache non-exist files.&#13;&#10; &#32; @return it will return the file path or false if not found
				</summary>
				<parameter name="filename"/>
				<returns>return will return the file path or false if not found
				</returns>
			</function>
			<function line="497" name="FindFile">
				<summary>function Files.FindFile(filename, searchpaths)&#13;&#10;find a given file by its file path. &#13;&#10;see also: Files.GetCachedFilePath()&#13;&#10;it will search filename, [worldpath]/filename, &#32;replace [worlds/DesignHouse/last] with current one. &#13;&#10;internally it will use a cache which only last for the current world, to accelerate for repeated calls.&#13;&#10; &#32; @param searchpaths: nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"&#13;&#10; &#32; @return the real file or nil if not exist 
				</summary>
				<parameter name="filename"/>
				<parameter name="searchpaths">nil or additional search path seperated by ";". such as such as "Texture/blocks/human/"
				</parameter>
				<returns>return real file or nil if not exist 
				</returns>
			</function>
			<function line="535" name="ResolveFilePath">
				<summary>function Files.ResolveFilePath(filename)&#13;&#10;resolve filename and return some information. &#13;&#10;&lt;verbatim&gt;&#13;&#10; &#32; @param filename: any file path such as an absolute path during a drag &amp; drop event.&#13;&#10; &#32; @return {&#13;&#10;isExternalFile, &#32;-- boolean: if file is external to SDK&#13;&#10;isInWorldDirectory, -- boolean: if file is inside the current world directory. &#13;&#10;relativeToWorldPath, &#13;&#10;relativeToRootPath, -- only valid if isExternalFile is nil. &#32;&#13;&#10;isAbsoluteFilepath, -- boolean relativeToRootPath, &#13;&#10;filename, -- no directory &#13;&#10;}&lt;/verbatim&gt;
				</summary>
				<parameter name="filename">any file path such as an absolute path during a drag &amp; drop event.
				</parameter>
				<returns>return {&#13;&#10;isExternalFile, &#32;-- boolean: if file is external to SDK&#13;&#10;isInWorldDirectory, -- boolean: if file is inside the current world directory. &#13;&#10;relativeToWorldPath, &#13;&#10;relativeToRootPath, -- only valid if isExternalFile is nil. &#32;&#13;&#10;isAbsoluteFilepath, -- boolean relativeToRootPath, &#13;&#10;filename, -- no directory &#13;&#10;}&lt;/verbatim&gt;
				</returns>
			</function>
			<function line="575" name="NotifyNetworkFileChange">
				<summary>function Files.NotifyNetworkFileChange(filename)&#13;&#10;&#13;&#10; &#32; @param filename: must be relative to Root directory instead of world directory 
				</summary>
				<parameter name="filename">must be relative to Root directory instead of world directory 
				</parameter>
			</function>
			<function line="600" name="UnloadFoldAssets">
				<summary>function Files:UnloadFoldAssets(foldpath)&#13;&#10;
				</summary>
				<parameter name="foldpath"/>
			</function>
		</table>
		<table name="World" src="script/apps/Aries/Creator/Game/World/World.lua">
			<function line="32" name="ctor">
				<summary>function World:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="41" name="Init">
				<summary>function World:Init(server_manager, saveHandler)&#13;&#10;&#13;&#10; &#32; @param server_manager: can be nil for client or standalone&#13;&#10; &#32; @param saveHandler: can be nil for WorldClient
				</summary>
				<parameter name="server_manager">can be nil for client or standalone
				</parameter>
				<parameter name="saveHandler">can be nil for WorldClient
				</parameter>
			</function>
			<function line="57" name="CreateChunkProvider">
				<summary>function World:CreateChunkProvider()&#13;&#10;virtual function: Creates the chunk provider for this world. Called in the constructor. 
				</summary>
			</function>
			<function line="63" name="GetChunkProvider">
				<summary>function World:GetChunkProvider()&#13;&#10;
				</summary>
			</function>
			<function line="67" name="GetServerManager">
				<summary>function World:GetServerManager()&#13;&#10;
				</summary>
			</function>
			<function line="71" name="GetPlayer">
				<summary>function World:GetPlayer()&#13;&#10;
				</summary>
			</function>
			<function line="75" name="OnPreloadWorld">
				<summary>function World:OnPreloadWorld()&#13;&#10;
				</summary>
			</function>
			<function line="79" name="OnSaveWorld">
				<summary>function World:OnSaveWorld()&#13;&#10;
				</summary>
			</function>
			<function line="83" name="OnLoadWorld">
				<summary>function World:OnLoadWorld()&#13;&#10;
				</summary>
			</function>
			<function line="87" name="GetWorldPath">
				<summary>function World:GetWorldPath()&#13;&#10;
				</summary>
			</function>
			<function line="95" name="InitBlockGenerator">
				<summary>function World:InitBlockGenerator()&#13;&#10;world tag "world_generator", "seed"
				</summary>
			</function>
			<function line="146" name="ReplaceWorld">
				<summary>function World:ReplaceWorld(oldWorld)&#13;&#10;
				</summary>
				<parameter name="oldWorld"/>
			</function>
			<function line="154" name="OnWeaklyDestroyWorld">
				<summary>function World:OnWeaklyDestroyWorld()&#13;&#10;this function is called when the world is possibly replaced by another world object&#13;&#10;thus as toggling from client world to server world, without leaving the world.
				</summary>
			</function>
			<function line="158" name="OnExit">
				<summary>function World:OnExit()&#13;&#10;
				</summary>
			</function>
			<function line="164" name="EnableWorldTracker">
				<summary>function World:EnableWorldTracker(bEnabled)&#13;&#10;world trackers may be temporily disabled and then enabled again, for example when client receives&#13;&#10;block change packet and updates the local world. The updated blocks should not be tracked. 
				</summary>
				<parameter name="bEnabled"/>
			</function>
			<function line="171" name="IsClient">
				<summary>function World:IsClient()&#13;&#10;
				</summary>
			</function>
			<function line="176" name="AddWorldTracker">
				<summary>function World:AddWorldTracker(worldTracker)&#13;&#10;
				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="182" name="RemoveWorldTracker">
				<summary>function World:RemoveWorldTracker(worldTracker)&#13;&#10;
				</summary>
				<parameter name="worldTracker"/>
			</function>
			<function line="186" name="ClearWorldTrackers">
				<summary>function World:ClearWorldTrackers()&#13;&#10;
				</summary>
			</function>
			<function line="190" name="FrameMove">
				<summary>function World:FrameMove(deltaTime)&#13;&#10;
				</summary>
				<parameter name="deltaTime"/>
			</function>
			<function line="195" name="SetWorldSize">
				<summary>function World:SetWorldSize(x, y, z, dx, dy, dz)&#13;&#10;set world size by center and extend. &#13;&#10;mostly used on 32/64bits server to prevent running out of memory. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="dx"/>
				<parameter name="dy"/>
				<parameter name="dz"/>
			</function>
			<function line="210" name="GetSpawnPoint">
				<summary>function World:GetSpawnPoint()&#13;&#10;get player home spawn position. 
				</summary>
			</function>
			<function line="224" name="SetSpawnPoint">
				<summary>function World:SetSpawnPoint(x,y,z)&#13;&#10;set player home position.&#13;&#10; &#32; @param x, y, z: if nil, the current player position is used. 
				</summary>
				<parameter name="x">, y, z: if nil, the current player position is used. 
				</parameter>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="246" name="GetWorldInfo">
				<summary>function World:GetWorldInfo()&#13;&#10;
				</summary>
			</function>
			<function line="251" name="SpawnEntityInWorld">
				<summary>function World:SpawnEntityInWorld(entity)&#13;&#10;Called to place all entities as part of a world
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="255" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()&#13;&#10;
				</summary>
			</function>
			<function line="259" name="GetWorldTime">
				<summary>function World:GetWorldTime()&#13;&#10;
				</summary>
			</function>
			<function line="263" name="GetGameRules">
				<summary>function World:GetGameRules()&#13;&#10;
				</summary>
			</function>
			<function line="268" name="GetSaveHandler">
				<summary>function World:GetSaveHandler()&#13;&#10;Returns this world's current save handler
				</summary>
			</function>
			<function line="274" name="GetPlayer">
				<summary>function World:GetPlayer(name)&#13;&#10;get player&#13;&#10; &#32; @param name: if nil or "player", the current player is returned. 
				</summary>
				<parameter name="name">if nil or "player", the current player is returned. 
				</parameter>
			</function>
			<function line="278" name="GetEntityByID">
				<summary>function World:GetEntityByID(id)&#13;&#10;
				</summary>
				<parameter name="id"/>
			</function>
			<function line="284" name="MarkBlockForUpdate">
				<summary>function World:MarkBlockForUpdate(x, y, z)&#13;&#10;On the client, re-renders the block. On the server, sends the block to the client (which will re-render it),&#13;&#10;including the tile entity description packet if applicable. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="291" name="OnChunkGenerated">
				<summary>function World:OnChunkGenerated(chunkX, chunkZ)&#13;&#10;on client does nothing, on server broadcase to observing client
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="298" name="MarkBlockForRenderUpdate">
				<summary>function World:MarkBlockForRenderUpdate(x,y,z)&#13;&#10;On the client, re-renders this block. On the server, does nothing. 
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
			</function>
			<function line="305" name="MarkBlockRangeForRenderUpdate">
				<summary>function World:MarkBlockRangeForRenderUpdate(min_x, min_y, min_z, max_x, max_y, max_z)&#13;&#10;On the client, re-renders all blocks in this range, inclusive. On the server, does nothing.
				</summary>
				<parameter name="min_x"/>
				<parameter name="min_y"/>
				<parameter name="min_z"/>
				<parameter name="max_x"/>
				<parameter name="max_y"/>
				<parameter name="max_z"/>
			</function>
			<function line="311" name="OnEntityAdded">
				<summary>function World:OnEntityAdded(entity)&#13;&#10;
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="317" name="OnEntityRemoved">
				<summary>function World:OnEntityRemoved(entity)&#13;&#10;
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="324" name="OnSetServerEntity">
				<summary>function World:OnSetServerEntity(entity)&#13;&#10;Called when an entity becomes a server entity or vice versa
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="331" name="OnPlaySound">
				<summary>function World:OnPlaySound(soundName, x, y, z, volume, pitch)&#13;&#10;
				</summary>
				<parameter name="soundName"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="volume"/>
				<parameter name="pitch"/>
			</function>
			<function line="339" name="DestroyBlockPartially">
				<summary>function World:DestroyBlockPartially(entityId, x,y,z, damage)&#13;&#10;virtual: set new damage to a given block&#13;&#10; &#32; @param damage: [1-10), other values will remove it. 
				</summary>
				<parameter name="entityId"/>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="damage">[1-10), other values will remove it. 
				</parameter>
			</function>
			<function line="345" name="GetChunkFromChunkCoords">
				<summary>function World:GetChunkFromChunkCoords(chunkX, chunkZ)&#13;&#10;
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="350" name="GetTotalWorldTime">
				<summary>function World:GetTotalWorldTime()&#13;&#10;total number of world ticks since the world is created. 
				</summary>
			</function>
			<function line="355" name="GetWorldTime">
				<summary>function World:GetWorldTime()&#13;&#10;current world time in day-light cycle (repeat in a day).
				</summary>
			</function>
			<function line="359" name="Tick">
				<summary>function World:Tick()&#13;&#10;
				</summary>
			</function>
			<function line="365" name="UpdateEntity">
				<summary>function World:UpdateEntity(entity, bForceUpdate)&#13;&#10;update the entity in the world&#13;&#10; &#32; @param bForceUpdate: default to true. if true, the entity's framemove function will be called.
				</summary>
				<parameter name="entity"/>
				<parameter name="bForceUpdate">default to true. if true, the entity's framemove function will be called.
				</parameter>
			</function>
			<function line="400" name="GetCollidingBoundingBoxes">
				<summary>function World:GetCollidingBoundingBoxes(aabb, entity)&#13;&#10;Returns a list of bounding boxes that collide with aabb including the passed in entity's collision.&#13;&#10; &#32; @param aabb: &#13;&#10;return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</summary>
				<parameter name="aabb">return array list of bounding box (all bounding box is read-only), modifications will lead to unexpected result. 
				</parameter>
				<parameter name="entity"/>
			</function>
			<function line="404" name="RemoveEntity">
				<summary>function World:RemoveEntity(entity)&#13;&#10;
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="409" name="RemovePlayerEntityDangerously">
				<summary>function World:RemovePlayerEntityDangerously(entity)&#13;&#10;Do NOT use this method to remove normal entities- use normal RemoveEntity
				</summary>
				<parameter name="entity"/>
			</function>
			<function line="413" name="GetBlockEntityList">
				<summary>function World:GetBlockEntityList(from_x,from_y,from_z, to_x, to_y, to_z)&#13;&#10;
				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
			<function line="418" name="GetEntityListInChunk">
				<summary>function World:GetEntityListInChunk(chunkX, chunkZ)&#13;&#10;this is a faster way to interate all entities in the chunk. please note that it may contain non-block entities. 
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
			</function>
			<function line="425" name="CreateBlockPieces">
				<summary>function World:CreateBlockPieces(block_template, blockX, blockY, blockZ, granularity, texture_filename, cx, cy, cz, color)&#13;&#10;&#13;&#10; &#32; @param granularity: (0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.&#13;&#10; &#32; @param cx, cy, cz: center of break point. 
				</summary>
				<parameter name="block_template"/>
				<parameter name="blockX"/>
				<parameter name="blockY"/>
				<parameter name="blockZ"/>
				<parameter name="granularity">(0-1), 1 will generate 27 pieces, 0 will generate 0 pieces, default to 1.
				</parameter>
				<parameter name="texture_filename"/>
				<parameter name="cx">, cy, cz: center of break point. 
				</parameter>
				<parameter name="cy"/>
				<parameter name="cz"/>
				<parameter name="color"/>
			</function>
			<function line="433" name="DoPreChunk">
				<summary>function World:DoPreChunk(chunkX, chunkZ, bLoad)&#13;&#10;this function is called when chunk is loaded or unloaded for the first time.&#13;&#10; &#32; @param bLoad: true to create, false to unload
				</summary>
				<parameter name="chunkX"/>
				<parameter name="chunkZ"/>
				<parameter name="bLoad">true to create, false to unload
				</parameter>
			</function>
			<function line="443" name="InvalidateBlockReceiveRegion">
				<summary>function World:InvalidateBlockReceiveRegion(from_x,from_y,from_z, to_x, to_y, to_z)&#13;&#10;this function is called before we apply new chunk data over existing chunks
				</summary>
				<parameter name="from_x"/>
				<parameter name="from_y"/>
				<parameter name="from_z"/>
				<parameter name="to_x"/>
				<parameter name="to_y"/>
				<parameter name="to_z"/>
			</function>
		</table>
		<table name="SelectionManager" src="script/apps/Aries/Creator/Game/SceneContext/SelectionManager.lua">
			<function line="36" name="ctor">
				<summary>function SelectionManager:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="44" name="GetPickingResult">
				<summary>function SelectionManager:GetPickingResult()&#13;&#10;get the current mouse picking result. 
				</summary>
			</function>
			<function line="48" name="SetPickingDist">
				<summary>function SelectionManager:SetPickingDist(dist)&#13;&#10;
				</summary>
				<parameter name="dist"/>
			</function>
			<function line="52" name="GetPickingDist">
				<summary>function SelectionManager:GetPickingDist()&#13;&#10;
				</summary>
			</function>
			<function line="56" name="Clear">
				<summary>function SelectionManager:Clear()&#13;&#10;
				</summary>
			</function>
			<function line="61" name="ClearPickingResult">
				<summary>function SelectionManager:ClearPickingResult()&#13;&#10;
				</summary>
			</function>
			<function line="67" name="MousePickBlock">
				<summary>function SelectionManager:MousePickBlock(bPickBlocks, bPickPoint, bPickObjects, picking_dist)&#13;&#10;&#13;&#10; &#32; @param bPickBlocks, bPickPoint, bPickObjects: default to true&#13;&#10;return result;
				</summary>
				<parameter name="bPickBlocks">, bPickPoint, bPickObjects: default to true&#13;&#10;return result;
				</parameter>
				<parameter name="bPickPoint"/>
				<parameter name="bPickObjects"/>
				<parameter name="picking_dist"/>
			</function>
			<function line="171" name="GetSelectedBlocks">
				<summary>function SelectionManager:GetSelectedBlocks()&#13;&#10;&#13;&#10; &#32; @return nil of a table of selected blocks.
				</summary>
				<returns>return of a table of selected blocks.
				</returns>
			</function>
			<function line="183" name="GetSelectedActor">
				<summary>function SelectionManager:GetSelectedActor()&#13;&#10;get selected movie actor
				</summary>
			</function>
			<function line="188" name="GetLastSelectedActor">
				<summary>function SelectionManager:GetLastSelectedActor()&#13;&#10;get the previously selected actor. 
				</summary>
			</function>
			<function line="192" name="SetSelectedActor">
				<summary>function SelectionManager:SetSelectedActor(actor)&#13;&#10;
				</summary>
				<parameter name="actor"/>
			</function>
		</table>
		<table name="BaseContext" src="script/apps/Aries/Creator/Game/SceneContext/BaseContext.lua">
			<function line="74" name="ctor">
				<summary>function BaseContext:ctor()&#13;&#10;
				</summary>
			</function>
			<function line="84" name="OnSelect">
				<summary>function BaseContext:OnSelect()&#13;&#10;
				</summary>
			</function>
			<function line="91" name="OnUnselect">
				<summary>function BaseContext:OnUnselect()&#13;&#10;virtual function: &#13;&#10;return true if we are not in the middle of any operation and fire unselected signal. &#13;&#10;or false, if we can not unselect the scene tool context at the moment. 
				</summary>
			</function>
			<function line="100" name="GetClickData">
				<summary>function BaseContext:GetClickData()&#13;&#10;
				</summary>
			</function>
			<function line="106" name="handleDropFile">
				<summary>function BaseContext:handleDropFile(filename, fileType)&#13;&#10;user has drag and dropped an existing file to the context&#13;&#10; &#32; @param fileType: "model", "blocktemplate"
				</summary>
				<parameter name="filename"/>
				<parameter name="fileType">"model", "blocktemplate"
				</parameter>
			</function>
			<function line="117" name="EnableMouseDownTimer">
				<summary>function BaseContext:EnableMouseDownTimer(bEnable)&#13;&#10;enable mouse down timer to repeatedly receive OnMouseDownTimer callback. &#13;&#10;mouse down timer is automatically stopped when there is no mouse event. so one only need to enable it in mouse press event. 
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="130" name="EnableMousePickTimer">
				<summary>function BaseContext:EnableMousePickTimer(bEnable)&#13;&#10;
				</summary>
				<parameter name="bEnable"/>
			</function>
			<function line="145" name="OnMouseDownTimer">
				<summary>function BaseContext:OnMouseDownTimer(timer)&#13;&#10;virtual function: called repeatedly whenever mouse button is down. 
				</summary>
				<parameter name="timer"/>
			</function>
			<function line="168" name="handleHookedEvent">
				<summary>function BaseContext:handleHookedEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="175" name="handleHookedMouseEvent">
				<summary>function BaseContext:handleHookedMouseEvent(event)&#13;&#10;return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="206" name="handleItemMouseEvent">
				<summary>function BaseContext:handleItemMouseEvent(event)&#13;&#10;if item accept mousePressEvent, it will also handle mouseMove and mouseRelease on its own. &#13;&#10;if item does not accept mousePressEvent, it will not receive any mouseMove or mouseRelease event, and the default handler is used. &#13;&#10;return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="236" name="handleMouseEvent">
				<summary>function BaseContext:handleMouseEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="270" name="CheckMousePick">
				<summary>function BaseContext:CheckMousePick()&#13;&#10;this function is called repeatedly if MousePickTimer is enabled. &#13;&#10;it can also be called independently.&#13;&#10; &#32; @return the picking result table
				</summary>
				<returns>return picking result table
				</returns>
			</function>
			<function line="309" name="HighlightPickBlock">
				<summary>function BaseContext:HighlightPickBlock(result)&#13;&#10;
				</summary>
				<parameter name="result"/>
			</function>
			<function line="356" name="HighlightPickEntity">
				<summary>function BaseContext:HighlightPickEntity(result)&#13;&#10;
				</summary>
				<parameter name="result"/>
			</function>
			<function line="367" name="ClearBlockPickDisplay">
				<summary>function BaseContext:ClearBlockPickDisplay()&#13;&#10;
				</summary>
			</function>
			<function line="373" name="ClearPickDisplay">
				<summary>function BaseContext:ClearPickDisplay()&#13;&#10;
				</summary>
			</function>
			<function line="383" name="OnLeftMouseHold">
				<summary>function BaseContext:OnLeftMouseHold(fDelta)&#13;&#10;called every 30 milliseconds, when user is holding the left button without releasing it.&#13;&#10; &#32; @param fDelta: 
				</summary>
				<parameter name="fDelta">
				</parameter>
			</function>
			<function line="416" name="OnLeftLongHoldBreakBlock">
				<summary>function BaseContext:OnLeftLongHoldBreakBlock()&#13;&#10;virtual function: when user is holding the left button for long enough. 
				</summary>
			</function>
			<function line="419" name="OnRightMouseHold">
				<summary>function BaseContext:OnRightMouseHold(fDelta)&#13;&#10;
				</summary>
				<parameter name="fDelta"/>
			</function>
			<function line="423" name="UpdateClickStrength">
				<summary>function BaseContext:UpdateClickStrength(fDelta, result)&#13;&#10;
				</summary>
				<parameter name="fDelta"/>
				<parameter name="result"/>
			</function>
			<function line="503" name="BeginMouseClickCheck">
				<summary>function BaseContext:BeginMouseClickCheck()&#13;&#10;call this function in mouse down event and then call EndMouseClickCheck() in mouse up event. &#13;&#10;if the latter return true, it is a mouse click, otherwise the camera has moved during begin/end pair. 
				</summary>
			</function>
			<function line="512" name="EndMouseClickCheck">
				<summary>function BaseContext:EndMouseClickCheck(event)&#13;&#10;&#13;&#10; &#32; @param event: mouse release event&#13;&#10;return true if it is a mouse click
				</summary>
				<parameter name="event">mouse release event&#13;&#10;return true if it is a mouse click
				</parameter>
			</function>
			<function line="541" name="mousePressEvent">
				<summary>function BaseContext:mousePressEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="564" name="mouseMoveEvent">
				<summary>function BaseContext:mouseMoveEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="571" name="mouseReleaseEvent">
				<summary>function BaseContext:mouseReleaseEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="598" name="handleCameraWheelEvent">
				<summary>function BaseContext:handleCameraWheelEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="606" name="mouseWheelEvent">
				<summary>function BaseContext:mouseWheelEvent(event)&#13;&#10;virtual: 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="627" name="handleHookedKeyEvent">
				<summary>function BaseContext:handleHookedKeyEvent(event)&#13;&#10;virtual: return true if handled
				</summary>
				<parameter name="event"/>
			</function>
			<function line="649" name="handleItemKeyEvent">
				<summary>function BaseContext:handleItemKeyEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="656" name="handleKeyEvent">
				<summary>function BaseContext:handleKeyEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="667" name="keyPressEvent">
				<summary>function BaseContext:keyPressEvent(event)&#13;&#10;virtual: actually means key stroke. 
				</summary>
				<parameter name="event"/>
			</function>
			<function line="674" name="keyReleaseEvent">
				<summary>function BaseContext:keyReleaseEvent(event)&#13;&#10;
				</summary>
				<parameter name="event"/>
			</function>
			<function line="679" name="HandleEscapeKey">
				<summary>function BaseContext:HandleEscapeKey()&#13;&#10;virtual function handle escape key
				</summary>
			</function>
			<function line="713" name="TryDestroyBlock">
				<summary>function BaseContext:TryDestroyBlock(result, is_allow_delete_terrain)&#13;&#10;try to destroy the block at picking result&#13;&#10;if the terrain block is hit, click_data.strength must be larger than max_break_time&#13;&#10; &#32; @param is_allow_delete_terrain: true 
				</summary>
				<parameter name="result"/>
				<parameter name="is_allow_delete_terrain">true 
				</parameter>
			</function>
			<function line="746" name="OnCreateSingleBlock">
				<summary>function BaseContext:OnCreateSingleBlock(x,y,z, block_id, result)&#13;&#10;
				</summary>
				<parameter name="x"/>
				<parameter name="y"/>
				<parameter name="z"/>
				<parameter name="block_id"/>
				<parameter name="result"/>
			</function>
			<function line="770" name="OnCreateBlock">
				<summary>function BaseContext:OnCreateBlock(result, event)&#13;&#10;&#13;&#10; &#32; @param event: optional event object
				</summary>
				<parameter name="result"/>
				<parameter name="event">optional event object
				</parameter>
			</function>
			<function line="835" name="HandleQuickSelectKey">
				<summary>function BaseContext:HandleQuickSelectKey(event)&#13;&#10;for Numeric key 1-9
				</summary>
				<parameter name="event"/>
			</function>
			<function line="838" name="handleLeftClickScene">
				<summary>function BaseContext:handleLeftClickScene(event, result)&#13;&#10;
				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="841" name="handleMiddleClickScene">
				<summary>function BaseContext:handleMiddleClickScene(event, result)&#13;&#10;
				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="861" name="handleRightClickScene">
				<summary>function BaseContext:handleRightClickScene(event, result)&#13;&#10;
				</summary>
				<parameter name="event"/>
				<parameter name="result"/>
			</function>
			<function line="900" name="handleHistoryKeyEvent">
				<summary>function BaseContext:handleHistoryKeyEvent(event)&#13;&#10;virtual: undo/redo related key events, such as ctrl+Z/Y&#13;&#10;return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="905" name="handlePlayerKeyEvent">
				<summary>function BaseContext:handlePlayerKeyEvent(event)&#13;&#10;virtual function: handle player controller key event&#13;&#10;return true if processed
				</summary>
				<parameter name="event"/>
			</function>
			<function line="1000" name="close">
				<summary>function BaseContext:close()&#13;&#10;deactivate this context and switch back to default scene context with the current game mode. 
				</summary>
			</function>
			<function line="1006" name="HandleGlobalKey">
				<summary>function BaseContext:HandleGlobalKey(event)&#13;&#10;handle all global key events that should always be available to the user regardless of whatever scene context. &#13;&#10;return true if key is handled. 
				</summary>
				<parameter name="event"/>
			</function>
		</table>
	</tables>
	<globals/>
	<variables>
		<variable name="BlockEngine" type="BlockEngine"/>
		<variable name="GameLogic" type="GameLogic"/>
		<variable name="CmdParser" type="CmdParser"/>
		<variable name="CommandManager" type="CommandManager"/>
		<variable name="EntityManager" type="EntityManager"/>
		<variable name="Entity" type="Entity"/>
		<variable name="ItemClient" type="ItemClient"/>
		<variable name="Item" type="Item"/>
		<variable name="ItemStack" type="ItemStack"/>
		<variable name="block_types" type="block_types"/>
		<variable name="block_model" type="block_model"/>
		<variable name="block" type="block"/>
		<variable name="Files" type="Files"/>
		<variable name="World" type="World"/>
		<variable name="SelectionManager" type="SelectionManager"/>
		<variable name="BaseContext" type="BaseContext"/>
	</variables>
</doc>