<?npl
--[[
Title: debugger
Author: LiXizhi
Date: 2016/4/13
Desc: for demostration of a custom debugger UI, everything is written in one file.
]]

if(is_ajax()) then
	NPL.load("(gl)script/ide/Debugger/HTTPDebugger.lua");
	local HTTPDebugger = commonlib.gettable("commonlib.Debugger.HTTPDebugger");
    local targetFile = "script/ide/Debugger/HTTPDebugger.lua";
	add_action('wp_ajax_attach', function()
		NPL.activate(targetFile, {filename="attach"});
	end)
    add_action('wp_ajax_pause', function()
		NPL.activate(targetFile, {filename="pause"});
	end)
	add_action('wp_ajax_attach', function()
		NPL.activate(targetFile, {filename="attach"});
	end)
	add_action('wp_ajax_stepover', function()
		NPL.activate(targetFile, {filename="over"});
	end)
	add_action('wp_ajax_stepinto', function()
		NPL.activate(targetFile, {filename="step"});
	end)
    add_action('wp_ajax_stepout', function()
		NPL.activate(targetFile, {filename="out"});
	end)
	add_action('wp_ajax_stop', function()
		NPL.activate(targetFile, {filename="Detach"});
	end)
	add_action('wp_ajax_continue', function()
		NPL.activate(targetFile, {filename="continue"});
	end)
    add_action('wp_ajax_evaluate', function()
		NPL.activate(targetFile, {filename="exec", code=request:get("code")});
	end)
    add_action('wp_ajax_listbreakpoint', function()
		NPL.activate(targetFile, {filename="listb"});
	end)
    add_action('wp_ajax_addbreakpoint', function()
		NPL.activate(targetFile, {filename="setb", code={filename=request:get("filename"), line=tonumber(request:get("line"))}});
	end)
    add_action('wp_ajax_removebreakpoint', function()
		NPL.activate(targetFile, {filename="delb", code={filename=request:get("filename"), line=tonumber(request:get("line"))}});
	end)
	add_action('wp_ajax_poll_msg', function()
		local output = {msgs={}};
		local output_queue = HTTPDebugger.GetOutputMsgList();
		local msg = output_queue:first();
		while (msg) do
			output.msgs[#(output.msgs)+1] = msg;
            msg = output_queue:remove(msg);
		end
        wp_send_json(output, true);
	end)
    return;
end
wp_enqueue_script("ace", "/wp-includes/js/ace/ace.js");
wp_enqueue_script("angular", "/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("ngStorage", "/wp-includes/js/angular/ngStorage.js");
wp_enqueue_style("easyui", "/wp-includes/js/jeasyui/themes/default/easyui.css");
wp_enqueue_style("easyui_icon", "/wp-includes/js/jeasyui/themes/icon.css");
wp_enqueue_script("easyui", "/wp-includes/js/jeasyui/jquery.easyui.min.js");
wp_enqueue_script("jqueryui", "/wp-includes/js/jquery/jquery-ui.min.js"); 
wp_enqueue_style("jqueryui_css", "/wp-includes/js/jquery/jquery-ui.min.css");

NPL.load("(gl)script/ide/Files.lua");
echo(format("<script>window.debuggerInfo = {workspaceDir:'%s', devDir:'%s'};</script>", ParaIO.GetCurDirectory(0), commonlib.Files.GetDevDirectory() or ""));
?>
<script>
    angular.module('Debugger', ['ngStorage'])
    .config(['$localStorageProvider', function ($localStorageProvider) {
        $localStorageProvider.setKeyPrefix('NPLDebugger');
    }])
    .filter('filename', function() {
        return function(input) {
            return input.split('/').pop();
        };
    })
	.directive('focusOn', function() {
		return function(scope, elem, attr) {
			scope.$on(attr.focusOn, function(e) {
				elem[0].focus();
			});
		};
	})
	.directive('ngRightClick', function($parse) {
        return function(scope, element, attrs) {
            var fn = $parse(attrs.ngRightClick);
            element.bind('contextmenu', function(event) {
                scope.$apply(function() {
                    event.preventDefault();
                    fn(scope, {$event:event});
                });
            });
        };
    })
    .filter('tolower', function () {
        return function (input) {
            return input.toLowerCase();
        };
    })
    .controller('DebuggerController', function ($scope, $http, $interval, $localStorage) {
        $scope.msgs = [];
        $scope.stackinfo = [];
        $scope.selectedStackLevel = 0;
        $scope.expression = "";
        $scope.last_eval_result = [];
        $scope.status = "";
		$scope.FindWnd = {visible:false, word:""};
        $scope.$storage = $localStorage.$default({
            breakpoints: [], // {filename, line}
            openedfiles: [], // {filename, line}
            currentFilename: "",
        });

        if (!Array.isArray($scope.$storage.breakpoints))
            $scope.$storage.breakpoints = [];
		var workspaceDir = debuggerInfo.workspaceDir;
		var devDir = debuggerInfo.devDir;
		$scope.devDir = devDir;
		$scope.workspaceDir = workspaceDir;
        var pollTimer;

        function uploadBreakpoints() {
            for (var i = 0; i < $scope.$storage.breakpoints.length; i++) {
                $http.get("ajax/debugger?action=addbreakpoint&filename=" + encodeURIComponent($scope.$storage.breakpoints[i].filename) + "&line=" + encodeURIComponent($scope.$storage.breakpoints[i].line)).then(function (response) { });
            }
        }
        $scope.attach = function () {
            $http.get("ajax/debugger?action=attach").then(function (response) {
                uploadBreakpoints();
            });
            $scope.startTimer();
            $scope.status = "running";
        }
        $scope.pause = function () {
            $http.get("ajax/debugger?action=pause").then(function (response) {
                uploadBreakpoints();
            });
            $scope.startTimer();
            $scope.status = "running";
        }
        $scope.stepover = function () {
            $http.get("ajax/debugger?action=stepover").then(function (response) { });
        }
        $scope.stepinto = function () {
            $http.get("ajax/debugger?action=stepinto").then(function (response) { });
        }
        $scope.stepout = function () {
            $http.get("ajax/debugger?action=stepout").then(function (response) { });
        }
        $scope.stop = function () {
            $http.get("ajax/debugger?action=stop").then(function (response) { });
            // $scope.stopTimer();
            $scope.status = "detached";
            $scope.stackinfo = [];
        }
        $scope.continue = function () {
			if($scope.status == "paused")
				$http.get("ajax/debugger?action=continue").then(function (response) { $scope.status = "running"; $scope.stackinfo = [];});
			else if($scope.status == "" || $scope.status == "detached")
				$scope.attach();
        }
        $scope.evaluate = function () {
            $scope.last_eval_result = [];
            var code = $scope.expression;
            if ($scope.expression.indexOf(";") < 0)
                code = "return " + code;
            $http.get("ajax/debugger?action=evaluate&code=" + encodeURIComponent(code)).then(function (response) { });
        }

        // start polling (receive) debug messages from NPL runtime
        $scope.startTimer = function () {
            if (angular.isDefined(pollTimer)) return;
            pollTimer = $interval(function () {
                $http.get("ajax/debugger?action=poll_msg").then(function (response) {
                    var msgs = response.data.msgs;
                    for (var i in msgs) {
                        $scope.handleMessage(msgs[i]);
                    }
                });
            }, 500);
        }
        $scope.stopTimer = function () {
            if (angular.isDefined(pollTimer)) {
                $interval.cancel(pollTimer);
                pollTimer = undefined;
            }
        }
        $scope.$watchCollection('msgs', function () {
            var $list = $('#log');
            var scrollHeight = $list.prop('scrollHeight');
            $list.animate({ scrollTop: scrollHeight }, 120);
        });

        $scope.listBreakpoint = function () {
            $http.get("ajax/debugger?action=listbreakpoint").then(function (response) { });
        }

        $scope.getBreakpointIndex = function (filename, line) {
            for (var i = 0; i < $scope.$storage.breakpoints.length; i++) {
                if ($scope.$storage.breakpoints[i].line == line && $scope.$storage.breakpoints[i].filename.toLowerCase() == filename.toLowerCase())
                    return i;
            }
            return -1;
        }
        $scope.addBreakpoint = function (filename, line) {
            if (filename && filename != "" && line != null && $scope.getBreakpointIndex(filename, line) < 0) {
                $http.get("ajax/debugger?action=addbreakpoint&filename=" + encodeURIComponent(filename) + "&line=" + encodeURIComponent(line)).then(function (response) { });
                $scope.$storage.breakpoints.push({ filename: filename, line: line });
            }
        }
        $scope.removeBreakpoint = function (index) {
            var bp = $scope.$storage.breakpoints[index];
            if (bp.filename != null && bp.filename != "" && bp.line != null) {
                $http.get("ajax/debugger?action=removebreakpoint&filename=" + encodeURIComponent(bp.filename) + "&line=" + encodeURIComponent(bp.line)).then(function (response) { });
                if (index != null)
                    $scope.$storage.breakpoints.splice(index, 1);
            }
        }
		$scope.open_external = function (filename) {
            $http.get("/ajax/viewsource?action=open_external&src=" + encodeURIComponent(filename)).then(function (response) { });
        }
        $scope.openFolder = function (filename) {
            filename = filename.substr(0, filename.lastIndexOf("/")+1);
            $scope.addNotice(filename);
            $http.get("/ajax/viewsource?action=open_external&src=" + encodeURIComponent(filename)).then(function (response) { });
        }
        $scope.copyFullPath = function (filename) {
            var fullpath = workspaceDir + filename;
            $scope.addNotice(fullpath);
        }
        $scope.closeFile = function (index, method) {
			if(method == "others") {
				var count = $scope.$storage.openedfiles.length;
				if(index < count-1)
					$scope.$storage.openedfiles.splice(index+1, count-index-1);
				if(index > 0) 
					$scope.$storage.openedfiles.splice(0, index);
			}
			else{
				$scope.$storage.openedfiles.splice(index, 1);
				if ($scope.$storage.openedfiles.length > 0)
					$scope.gotoSourceLine($scope.$storage.openedfiles[0].filename, $scope.$storage.openedfiles[0].line);
				else
					$scope.gotoSourceLine("");
			}
        }
        $scope.saveFileOpenHistory = function (filename, line) {
            for (var i = 0; i < $scope.$storage.openedfiles.length; i++) {
                if ($scope.$storage.openedfiles[i].filename.toLowerCase() == filename.toLowerCase()) {
                    $scope.$storage.openedfiles[i].line = line;
                    return;
                }
            }
        }
        $scope.addOpenFile = function (filename, line) {
            for (var i = 0; i < $scope.$storage.openedfiles.length; i++) {
                if ($scope.$storage.openedfiles[i].filename.toLowerCase() == filename.toLowerCase())
                    return;
            }
            $scope.$storage.openedfiles.push({ filename: filename, line: line });
        }
		$scope.getRelativePath = function (filename) {
			filename = filename.replace(/\\/g, "/");
			filename = filename.replace(workspaceDir, "");
			filename = filename.replace(workspaceDir.toLowerCase(), "");
			if(devDir!="")
			{
				filename = filename.replace(devDir, "");
				filename = filename.replace(devDir.toLowerCase(), "");
			}
			filename = filename.replace(/.*npl_packages\/[^\/]+\//g, "");
			return filename;
		}
		$scope.gotoline = function(){
			var linenumber = parseInt(prompt("Line number"));
			if(linenumber) {
				var editor = ace.edit("editor");
				editor.gotoLine(linenumber);
			}
		}
        var lastMarker = 0;
        // @param line: undefined or if <= 0, we will only open source file. 
        $scope.gotoSourceLine = function (filename, line, bForceReopen) {
			filename = $scope.getRelativePath(filename);
            var editor = ace.edit("editor");
            function clearLastMarker() {
                if (lastMarker != 0) {
                    editor.session.removeMarker(lastMarker);
                    lastMarker = 0;
                }
            }
            function highlightLine(line) {
                clearLastMarker();
                if (line && line > 0) {
                    editor.gotoLine(line);
                    var Range = ace.require('ace/range').Range;
                    lastMarker = editor.session.addMarker(new Range(line - 1, 0, line - 1, 1000), "currentRunPos", "fullLine");
                    editor.focus();
                }
            }
            function markBreakpoints(filename) {
                editor.session.clearBreakpoints();
                filename = filename.toLowerCase();
                for (var i = 0; i < $scope.$storage.breakpoints.length; i++) {
                    if ($scope.$storage.breakpoints[i].filename.toLowerCase() == filename) {
                        editor.session.setBreakpoint($scope.$storage.breakpoints[i].line - 1);
                    }
                }
            }
            if ($scope.$storage.currentFilename.toLowerCase() != filename.toLowerCase() || bForceReopen) {
                $http.get("ajax/viewsource?action=get_source&src=" + encodeURIComponent(filename)).then(function (response) {
                    $scope.saveFileOpenHistory($scope.$storage.currentFilename, (editor.getCursorPosition() || {row:0}).row);
                    clearLastMarker();
                    editor.session.setValue(response.data.text || "source not available");
                    $scope.$storage.currentFilename = filename;
                    $scope.openFilename = filename;
                    $scope.addOpenFile(filename, line);
                    highlightLine(line);
                    markBreakpoints(filename);
                });
            }
            else
                highlightLine(line);
        }
        
        $scope.gotoStackLevel = function (index) {
            $scope.selectedStackLevel = index;
            if ($scope.stackinfo.length > index) {
                var line = $scope.stackinfo[index];
                $scope.gotoSourceLine(line.source, line.currentline);
            }
        }
		$scope.find = function (bShow) {
			if(bShow!=false)
				bShow = true;
            $scope.FindWnd.visible = bShow;
			if(bShow){
				var editor = ace.edit("editor");
				var position = editor.getCursorPosition();
				if (position) {
					var markedText = editor.session.doc.getTextRange(editor.selection.getRange());
					if (!markedText || markedText == "") {
						var token = editor.session.getTokenAt(position.row, position.column);
						if (token && token.type == "identifier")
							markedText = token.value;
					}
					if (markedText && markedText!= ""){
						$scope.FindWnd.word = markedText;
						$scope.$apply();
					}
					else{
						$scope.$apply();
						$scope.$broadcast('focusSearchText');
					}
				}
			}
        }
		$scope.findNext = function (backwords) {
			if($scope.FindWnd.word!=""){
				var editor = ace.edit("editor");
				editor.find($scope.FindWnd.word,{
				  backwards: backwords == true,
				  wrap: false,
				  caseSensitive: false,
				  wholeWord: false,
				  regExp: false
				});
			}
        }
        $scope.setDirFilter = function () {
            $("#filedir").treegrid('options').url = "ajax/world?action=get_world_files&filter=*.lua&rootdir=" + encodeURIComponent($scope.dirroot);
            $("#filedir").treegrid('reload');
        }
        // handle NPL runtime debug messages
        $scope.handleMessage = function (msg) {
            var cmd = msg.filename;
            if (cmd == "BP") {
                $scope.stackinfo = msg.code.stack_info;
                $scope.gotoStackLevel(0);
                return;
            }
            else if (cmd == "ExpValue") {
                $scope.last_eval_result.push(msg.code);
            }
			else if (cmd == "exit") {
                $scope.stop();
			}
			else if (cmd == "listBreakpoint" && msg.code != null) {
			    //for (var i = 0; i < $scope.$storage.breakpoints.length; i++) {
			    //    $scope.$storage.breakpoints[i].filename;
			    //}
			    if (Array.isArray(msg.code))
			        $scope.$storage.breakpoints = msg.code;
			    else
			        $scope.$storage.breakpoints = [];
			}
            else if (cmd == "DebuggerOutput" && msg.code != null) {
                if (msg.code == "[DEBUG]> ") {
                    $scope.status = "paused";
                }
                else if (msg.code.substring(0, 10) == "Break at: ") {
                    var lineEnd = msg.code.indexOf(" in");
                    if (lineEnd > 0) {
                        var line = Number(msg.code.substr(10, lineEnd - 10));
                        var filename = msg.code.substr(lineEnd + 4, msg.code.length - lineEnd - 4).trim();
                        $scope.addBreakpoint(filename, line);
                    }
                }
                else if (msg.code.substring(0, 29) == "Breakpoint async set in file ")
                {
                    var lineEnd = msg.code.indexOf(" line ", 29);
                    if (lineEnd > 0) {
                        var line = Number(msg.code.substr(lineEnd + 6, msg.code.length - lineEnd - 6).trim());
                        var filename = msg.code.substr(29, lineEnd - 29).trim();
                        filename = $scope.getRelativePath(filename);
                        var bpIndex = $scope.getBreakpointIndex(filename, line);
                        if (bpIndex < 0) {
                            $scope.addBreakpoint(filename, line);
                            $scope.gotoSourceLine(filename, line);
                        }
                    }
                }
            }
            $scope.msgs.push(msg);
        }

        function ToggleBreakPoint(editor, row) {
            if ($scope.$storage.currentFilename != null) {
                var filename = $scope.$storage.currentFilename;
                var line = row + 1;
                var bpIndex = $scope.getBreakpointIndex(filename, line);
                if (bpIndex >= 0) {
                    editor.session.clearBreakpoint(row);
                    $scope.removeBreakpoint(bpIndex);
                }
                else {
                    editor.session.setBreakpoint(row);
                    $scope.addBreakpoint(filename, line);
                }
            }
        }
		$scope.clickFileTabMenu = function ($index, file, $event) {
            // right click tab for context menu
            $('#cmTabFile').find('#filename').text(file.filename.split('/').pop());
            $('#cmTabFile').menu({
                onClick: function (item) {
                    if (item.name == "close")
                        $scope.closeFile($index);
					else if (item.name == "closeOthers")
						$scope.closeFile($index, "others");
                    else if (item.name == "refresh")
                        $scope.gotoSourceLine(file.filename, null, true)
                    else if (item.name == "openFolder")
                        $scope.openFolder(file.filename);
                    else if (item.name == "openExternal")
                        $scope.open_external(file.filename);
                    else if (item.name == "copyFullPath")
                        $scope.copyFullPath(file.filename);
                    $scope.$apply();
                }
            });
            $('#cmTabFile').menu('show', { left: $event.pageX - 5, top: $event.pageY - 10 });
        }
		$scope.watchForSelection = function() {
			var editor = ace.edit("editor");
			var position = editor.getCursorPosition();
            if (position) {
                var markedText = editor.session.doc.getTextRange(editor.selection.getRange());
                if (!markedText || markedText == "") {
                    var token = editor.session.getTokenAt(position.row, position.column);
                    if (token && token.type == "identifier")
                        markedText = token.value;
                }
                if (markedText && markedText!= "") {
                    $scope.expression = markedText;
                    $scope.$apply();
                    $scope.evaluate();
                    $('#watch').accordion('select', "Watch");
                }
            }
		}
        // binding editor
        function initEditor() {
            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/github");
            editor.setOptions({ readOnly: true, });
            editor.session.setMode("ace/mode/lua");
            editor.on("guttermousedown", function (e) {
                var target = e.domEvent.target;
                if (target.className.indexOf("ace_gutter-cell") == -1)
                    return;
                var row = e.getDocumentPosition().row;
                ToggleBreakPoint(e.editor, row);
            });
            editor.commands.addCommand({name: 'cmdToggleBreakpoint',bindKey: { win: 'F9'},readOnly: true, exec: function (editor) {ToggleBreakPoint(editor, editor.getSelectionRange().start.row);}, });
            editor.commands.addCommand({ name: 'cmdStepOver', bindKey: { win: 'F10' }, exec: function (editor) { $scope.stepover(); }, readOnly: true });
            editor.commands.addCommand({ name: 'cmdStepInto', bindKey: { win: 'F11' }, exec: function (editor) { $scope.stepinto(); }, readOnly: true });
            editor.commands.addCommand({ name: 'cmdStepOut', bindKey: { win: 'Shift+F11' }, exec: function (editor) { $scope.stepout(); }, readOnly: true });
            editor.commands.addCommand({ name: 'cmdStepRun', bindKey: { win: 'F5' }, exec: function (editor) { $scope.continue(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdGotoline', bindKey: { win: 'Ctrl+G' }, exec: function (editor) { $scope.gotoline(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdWatchSelection', bindKey: { win: 'Shift+F9' }, exec: function (editor) { $scope.watchForSelection(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdFind', bindKey: { win: 'Ctrl+F' }, exec: function (editor) { $scope.find(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdFindSelection', bindKey: { win: 'Ctrl+F3' }, exec: function (editor) { $scope.find(); $scope.findNext(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdFindNext', bindKey: { win: 'F3' }, exec: function (editor) { $scope.findNext(); }, readOnly: true });
			editor.commands.addCommand({ name: 'cmdFindPrev', bindKey: { win: 'Shift+F3' }, exec: function (editor) { $scope.findNext(true); }, readOnly: true });

            $("#resizable").resizable({
                maxHeight: 1200,
                minHeight: 300,
                handles: 's',
                resize: function (event, ui) {
                    editor.resize();
                }
            });
           
            // right click code for context menu
            $('#cmDebugger').menu({
                onClick: function (item) {
                    if (item.name == "watch") {
                        $scope.watchForSelection();
                    }
                    else if (item.name == "bp") {
                        var position = editor.getCursorPosition();
                        if (position)
                            ToggleBreakPoint(editor, position.row);
                    }
                    else if (item.name == "stepover")
                        $scope.stepover();
                    else if (item.name == "stepinto")
                        $scope.stepinto();
                    else if (item.name == "stepout")
                        $scope.stepout();
                    else if (item.name == "attach")
                        $scope.attach();
                    else if (item.name == "stop")
                        $scope.stop();
                    else if (item.name == "continue")
                        $scope.continue();
					else if (item.name == "goto")
						$scope.gotoline();
					else if (item.name == "find")
						$scope.find();
                }
            });
            editor.container.addEventListener("contextmenu", function (e) {
                e.preventDefault();
                $('#cmDebugger').menu('show', { left: e.pageX - 5, top: e.pageY - 10 });
                return false;
            }, false);

            
            $('#filedir').treegrid({
                onClickRow: function (row) {
                    var filename = row.id.replace(/#/g, "/");
                    if (filename.endsWith(".lua"))
                        $scope.gotoSourceLine(filename, -1);
                    else {
                        if(row.state == "closed")
                            $('#filedir').treegrid("expand", row.id);
                        else if(row.state == "open")
                            $('#filedir').treegrid("collapse", row.id);
                    }
                }
            });

            if ($scope.$storage.currentFilename)
                $scope.gotoSourceLine($scope.$storage.currentFilename, null, true);
        }
        initEditor();
		if(typeof Page != 'undefined')
		    Page.ShowSideBar(false);
        // start timer
		$scope.startTimer();
    });
</script>
<h1>NPL Debugger</h1>
<style type="text/css" media="screen">
.ace_gutter-cell.ace_breakpoint{
    border-radius: 20px 0px 0px 20px;
    box-shadow: 0px 0px 1px 1px red inset;
}
.currentRunPos {
  position:absolute;
  background:rgba(100,200,100,0.5);
  z-index:20
}
.stackline-true{
    background:rgba(100,200,100,0.5);
}
.editorbgpaused{
    background:rgba(200,0,0,0.6);
}
.editorbgrunning{
    background:rgba(200,200,0,0.4);
}
</style>
<div ng-app="Debugger" ng-controller="DebuggerController as Debugger" style="margin-top:10px;" class="form-horizontal">
    <div class="row" style="min-height:500px" >
        <div class="col-md-4">
			<div>{{workspaceDir}}</div>
			<div ng-show="devDir!=''">dev:{{devDir}}</div>
            <table id="filedir" style="height:500px;overflow: auto;width:100%" class="easyui-treegrid"
                   url="ajax/world?action=get_world_files&filter=*.lua&rootdir="
                   idField="id" treeField="filename" remoteSort="false" singleSelect="true">
                <thead>
                    <tr>
                        <th field="filename" width="100%" sortable="true">Filename</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class='col-md-8 editorbg{{status}}' >
            <form id="openfileForm" style="margin-bottom:0px">
                <input type="text" placeholder="enter filename" style="width:calc(100% - 70px)" ng-model="openFilename" />
                <button type="submit" ng-click="gotoSourceLine(openFilename, -1)">open</button>
            </form>
            <ul class="nav nav-tabs" style="margin-top:5px;margin-bottom:0px;">
                <li ng-repeat="file in $storage.openedfiles" ng-class="{active:(file.filename | tolower) == ($storage.currentFilename | tolower)}">
                    <a ng-right-click="clickFileTabMenu($index, file, $event)" ng-click="gotoSourceLine(file.filename, file.line)">{{file.filename | filename}}<span ng-click="closeFile($index)"><i class="glyphicon glyphicon-remove-sign"></i></span></a>
                </li>
            </ul>
			<div ng-if="FindWnd.visible" class="bg-info" style="padding-left:5px;">
				<form id="searchTextForm" style="margin-bottom:0px">
					<input type="text" focus-on="focusSearchText" placeholder="Enter Search Text" style="min-width:300px" ng-model="FindWnd.word" />
					<div class="btn-group">
						<button class="btn btn-default" ng-click="findNext(true)"><i class="glyphicon glyphicon-arrow-up"></i></button>
						<button class="btn btn-default" type="submit" ng-click="findNext()"><i class="glyphicon glyphicon-arrow-down"></i></button>
						<button class="btn btn-default" ng-click="find(false)"><i class="glyphicon glyphicon-remove"></i></button>
					</div>
				</form>
			</div>
            <div id="resizable" style="position:relative;height:400px;padding-bottom:3px;border-bottom:3px solid #bbbbbb">
                <div id="editor" style="position: absolute; top:0;left:0;right:0;bottom:0;"></div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:10px" >
		<div class="col-sm-12">
		<div>
			<button ng-click="pause()"><i class="glyphicon glyphicon-pause"></i>pause</button>
			<button ng-click="stop()"><i class="glyphicon glyphicon-stop"></i>stop</button>
			<button ng-click="stepover()" title="step over (in source code F10)"><i class="glyphicon glyphicon-step-forward"></i>step</button>
			<button ng-click="stepinto()" title="step into (in source code F11)">in</button>
			<button ng-click="stepout()" title="step out (in source code Shift+F11)">out</button>
			<button ng-click="continue()" title="resume (in source code F5)"><i class="glyphicon glyphicon-play"></i>continue</button>
			<span style="color:forestgreen">{{status}}</span>
		</div>
        <div id="watch" class="easyui-accordion" data-options="multiple:true,selected:-1" style="margin-bottom:0px;width:100%;height:auto;">
            <div title="Watch" style="padding:10px;">
                <div style="max-height:120px;overflow: auto;">
					<form id="watchForm" style="margin-bottom:0px">
						<input type="text" style="width:500px;" ng-model="expression" placeholder="enter parameter name or expression" />
						<button type="submit" ng-click="evaluate()">Evaluate</button>
					</form>
                    <div ng-repeat="msg in last_eval_result">
                        {{msg}}
                    </div>
                </div>
            </div>
        </div>
        <div id="callstack" class="easyui-accordion" data-options="multiple:true" style="margin-bottom:0px;width:100%;height:auto;">
            <div title="Call Stack" style="padding:10px;">
                <div style="min-height:50px;overflow: auto;">
                    <div ng-repeat="line in stackinfo">
                        <a class="stackline-{{$index==selectedStackLevel}}" ng-click="gotoStackLevel($index)">
                            {{line.source}}:{{line.currentline}} in function {{line.name}}()
                        </a>
                    </div>
                    <div ng-if="stackinfo.length == 0" style="color:gray">Not Paused</div>
                </div>
            </div>
        </div>
        <div id="bps" class="easyui-accordion" data-options="multiple:true" style="margin-bottom:0px;width:100%;height:auto;">
            <div title="Breakpoints" style="padding:10px;">
                <div style="position:relative;float:right">
                    <button ng-click="listBreakpoint()" title="refresh(list) all active breakpoints"><i class="glyphicon glyphicon-refresh"></i></button>
                </div>
                <div style="overflow: auto;">
                    <div ng-repeat="line in $storage.breakpoints">
                        <button style="margin-right:10px;" ng-click="removeBreakpoint($index)"><i class="glyphicon glyphicon-remove-sign"></i></button>
                        <a ng-click="gotoSourceLine(line.filename, line.line)">
                            {{line.filename}} line {{line.line}}
                        </a>
                    </div>
                    <div ng-if="$storage.breakpoints.length == 0" style="color:gray">No Breakpoints</div>
                </div>
            </div>
        </div>
        <div id="others_tabs" class="easyui-tabs" style="width:100%;height:auto">
            <div title="Output" style="padding:10px">
                <div id="log" style="overflow: auto;height:120px;">
                    <div ng-repeat="msg in msgs">
                        {{msg.filename}}:{{msg.param1}},{{msg.param2}},{{msg.code}}
                    </div>
                </div>
            </div>
			<div title="Log">
                <div id="logwin" style="overflow: hidden;">
                    <? include("./log.page") ?>
                </div>
            </div>
        </div>
		</div>
    </div>
</div>
<div id="cmDebugger" class="easyui-menu" style="">
    <div data-options="name:'watch',iconCls:'icon-print'">Watch selection (Shift+F9)</div>
    <div data-options="name:'bp'">Toggle Breakpoint (F9)</div>
    <div class="menu-sep"></div>
    <div data-options="name:'stepover',iconCls:'glyphicon glyphicon-step-forward'">Step Over (F10)</div>
    <div data-options="name:'stepinto'">Step Into (F11)</div>
    <div data-options="name:'stepout'">Step Out(Shift+F11)</div>
    <div data-options="name:'continue',iconCls:'glyphicon glyphicon-play'">Continue (F5)</div>
    <div class="menu-sep"></div>
    <div data-options="name:'stop',iconCls:'glyphicon glyphicon-stop'">Stop Debugging</div>
	<div class="menu-sep"></div>
	<div data-options="name:'find',iconCls:''">Find... (Ctrl+F)</div>
	<div data-options="name:'goto',iconCls:''">Go To... (Ctrl+G)</div>
</div>
<div id="cmTabFile" class="easyui-menu" style="">
    <div data-options="name:'close',iconCls:'glyphicon glyphicon-remove-sign'">Close File</div>
	<div data-options="name:'closeOthers'">Close All But This</div>
    <div data-options="name:'refresh',iconCls:'glyphicon glyphicon-refresh'">Reload File</div>
    <div class="menu-sep"></div>
    <div data-options="name:'openFolder'">Open Containing Folder</div>
    <div data-options="name:'openExternal',iconCls:'glyphicon glyphicon-new-window'">Open In External Editor</div>
    <div data-options="name:'copyFullPath'">Copy Full Path</div>
</div>