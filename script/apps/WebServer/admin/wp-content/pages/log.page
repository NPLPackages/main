<?npl
--[[
Title: show interactive log
Author: LiXizhi
Date: 2015/6/23
Desc: ajax/log?action=log
]]
if(not is_admin()) then
  exit("access denied")
end
PAGE_NO_SIDE_BAR = true;

if(is_ajax()) then
	-- get log file content between from and to position
	add_action('wp_ajax_getlog', function()
		local curPos = commonlib.log.GetLogPos();
		local from = tonumber(request:get("from") or 0);
		if(curPos < from) then
			from = 0;
		end
		local to = tonumber(request:get("to") or curPos);
		local text;
		if(to > from) then
			text = ParaGlobal.GetLog(from, to);
		end
		response:send({from = from, to = to, text = text});
    end)

	-- print request to log file
	add_action('wp_ajax_log', function()
		log("http request "..request:url().."---------------\n")
		log("headers---------------\n")
		log(request.headers)
		log(request:getparams())
		log("End of request---------------\n")
		response:send({success = true});
    end)

	-- return the current log position at the time of calling
	add_action('wp_ajax_getlogpos', function()
		response:send({pos = commonlib.log.GetLogPos()});
    end)
	return;
end
wp_enqueue_script("ace", "/wp-includes/js/ace/ace.js"); 
?>
<div class="row">
<div class="col-md-12">
	<div class="pull-left">
		<button id="btnClearLog" title="clear log" class="btn btn-default"><span class="glyphicon glyphicon-ban-circle"></span></button>
	</div>
	<div class="pull-left" style="margin-left:10px;">
		<div class="btn-group">
			<button id="btnGotoBegin" class="btn btn-default"><i class="glyphicon glyphicon-fast-backward"></i></button>
			<button id="btnGotoEnd" class="btn btn-default"><i class="glyphicon glyphicon-fast-forward"></i></button>
		</div>
		<input id="txtSearchText" type="text" placeholder="Enter Search Text" style="max-width:300px" />
		<div class="btn-group">
			<button id="btnSearchBackward" class="btn btn-default"><i class="glyphicon glyphicon-arrow-up"></i></button>
			<button id="btnSearchForward" class="btn btn-default"><i class="glyphicon glyphicon-arrow-down"></i></button>
		</div>
	</div>
	<div class="pull-left" style="margin-left:10px;margin-top:5px;">
		<span id="btnError" style="color:#c00;display:none"><i class="glyphicon glyphicon-remove-sign"></i><span id="txtErrorCount">0</span></span>
		<span id="btnWarn" style="margin-left:5px;color:#cc0;display:none"><i class="glyphicon glyphicon-info-sign"></i><span id="txtWarnCount">0</span></span>
	</div>
    <div class="pull-right" style="margin-top:5px;">
        <label style="font-weight:normal"><input type="checkbox" id="preservelog" />preserve log</label>
        <label style="font-weight:normal;margin-left:5px;"><input type="checkbox" id="wordwrap" />word wrap</label>
    </div>
</div>
<div class="col-md-12" style="margin-top:5px">
	<div id="logwindow"></div>
</div>
</div>
<script>
$(function(){
	var editor = ace.edit("logwindow");
	editor.setTheme("ace/theme/github");
	editor.setAutoScrollEditorIntoView(true);
	editor.setOption("maxLines", 30);
	editor.setOption("minLines", 5);

	var from = 0;
	var errorCount = 0;
	var warnCount = 0;
	var bPreserveLog = false; // preserve log when application restart.

	var SetErrorCount = function(nError, nWarn, bAdding) {
		errorCount = bAdding ? (errorCount + nError) : nError;
		warnCount = bAdding ? (warnCount + nWarn) : nWarn;
		if(errorCount > 0)
			$("#btnError").show();
		else
		    $("#btnError").hide();
		$("#txtErrorCount").text(errorCount);
		
		if(warnCount > 0)
			$("#btnWarn").show();
		else
		    $("#btnWarn").hide();
		$("#txtWarnCount").text(warnCount);
	}

	var clearAll = function () {
	    editor.session.setValue("");
	    SetErrorCount(0, 0);
	};
	
    // called every 2 seconds
	var onTimer = function() {
		$.post("/ajax/log", {from:from, action:"getlog"})
		.done(function(data) {
			if(data.text){
			    if (data.to < from) {
			        if (!bPreserveLog)
					    clearAll();
					from = 0;
				}
				else {
				    
				    var errorCount_ = (data.text.match(/error>/g) || []).length;
				    var warnCount_ = (data.text.match(/error/gi) || []).length;
				    warnCount_ = (data.text.match(/warn/gi) || []).length + (warnCount_ - errorCount_);
				    
				    if (warnCount_ > 0 || errorCount_ > 0)
				        SetErrorCount(errorCount_, warnCount_, true);
					from = data.to;
					editor.session.insert({
					   row: editor.session.getLength(),
					   column: 0
					}, data.text);
				}
			}
		})
	}
	setInterval(onTimer, 2000);

	$( "#btnClearLog" ).click(clearAll);
	
	var findNext = function (backwords) {
		var word = $("#txtSearchText").val();
		if(word != "") {
			var range = editor.find(word,{
				backwards: backwords == true,
				wrap: false,
				caseSensitive: false,
				wholeWord: false,
				regExp: false
			});
		}
    }
	$("#btnGotoBegin").click(function () {
	    editor.gotoLine(1, 0)
	});
	$("#btnGotoEnd").click(function () {
	    var row = editor.session.getLength() - 1
		var column = editor.session.getLine(row).length 
		editor.gotoLine(row + 1, column);
		$('html, body').animate({scrollTop: $("#logwindow").offset().top}, 300);
	});
	$( "#btnSearchBackward" ).click(function() {
		findNext(true);
	});
	$( "#btnSearchForward" ).click(function() {
		findNext(false);
	});
	$("#btnError").click(function () {
	    $("#txtSearchText").val("error>");
	    findNext(true);
	});
	$("#btnWarn").click(function () {
	    $("#txtSearchText").val("warn");
	    findNext(true);
	});
	$("#wordwrap").click(function () {
	    editor.session.setUseWrapMode($("#wordwrap").is(":checked"));
	});
	$("#preservelog").click(function () {
	    bPreserveLog = $("#preservelog").is(":checked");
	});
	$("#txtSearchText").keyup(function(event){
		if(event.keyCode == 13){
			findNext(true);
		}
	});
});
</script>

