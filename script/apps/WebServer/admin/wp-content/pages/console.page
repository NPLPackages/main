<?npl
--[[
Title: run any NPL code from web page
Author: LiXizhi
Date: 2015/6/23
Desc: 
- ajax/console?action=runcode&text=poststring&src=filename

Print all url params
- ajax/?action=getparams 

-- print request
- ajax/console?action=printrequest
]]
if(not is_admin()) then
  exit("access denied")
end

local code = request:get("text");
local function GetCode()
  return code or "";
end

local function CreateSandBoxEnv()
  local env = {
    alert = _guihelper and _guihelper.MessageBox or commonlib.echo,
    GameLogic = commonlib.gettable("GameLogic"),
    cmd = GameLogic and GameLogic.RunCommand or commonlib.echo,
  };
  local meta = {__index = _G};
	setmetatable (env, meta);
  return env;
end

-- Run code and print result
local function RunWithResult(output)
  if(not code or code == "") then
    return;
  end
  if(not request:get("btnRunPage")) then
    local fromLogPos = commonlib.log.GetLogPos();
    local code_func, errormsg = loadstring(code, request:get("src"));
    if(code_func) then
	  local env = CreateSandBoxEnv();
      setfenv(code_func, env);
	    local ok, result = pcall(code_func);
		if(output) then
			if(ok) then
				if(type(env.main) == "function") then
					setfenv(env.main, env);
					ok, result = pcall(env.main);
				end
			end
			output.success = ok;
			if(not ok) then
				output.error = result;
			else
				output.result = result or ParaGlobal.GetLog(fromLogPos, -1);
			end
		else
			if(ok) then
			  echo("<p style='color:green'>success!</p>")
			  echo(string.gsub(sanitize(ParaGlobal.GetLog(fromLogPos, -1) or ""), "\n", "<br/>"));
			else
			  echo("<p style='color:red'>Runtime error: </p>")
			  echo(sanitize(result));
			end
		end
    else
		if(output) then
			output.error = errormsg;
		else
			echo("<p style='color:red'>Syntax error: </p>")
			echo(sanitize(errormsg));
		end
    end
  else
	if(not output) then
		include_pagecode(code);
	end
  end
end

if(is_ajax()) then
	add_action('wp_ajax_runcode', function()
		if(request:get("btnRunPage")) then
			include_pagecode(code);
		else
			local output = {};
			RunWithResult(output);
			wp_send_json(output);
		end
    end)
	add_action('wp_ajax_getparams', function()
		wp_send_json(request:getparams());
    end)

	-- print raw http request to log. url: "ajax/console?action=printrequest"
	add_action('wp_ajax_printrequest', function()
		log("request url:" .. request:url());
		log("http method:" .. request:GetMethod());
		log("http headers:");
		log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		for name, value in pairs(request.headers) do
			if(name ~= "body") then
				log(name .. ": " .. value); 
			end
		end
		log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		log(request.headers.body);
		response:status(200):send({"please check log.txt"});
    end)
	return;
end
?>
<style type="text/css" media="screen">
  .ace_editor {
  border: 1px solid lightgray;
  margin: auto;
  height: 200px;
  width: 100%;
  }
</style>
<?npl
wp_enqueue_script("ace", "/wp-includes/js/ace/ace.js"); 
wp_enqueue_script("angular", "/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("ngStorage", "/wp-includes/js/angular/ngStorage.js");
wp_enqueue_script("ngSanitize", "/wp-includes/js/angular/angular-sanitize.min.js");
?>
<div class="title">NPL console</div>
<p>Type NPL code below, press F5 to run</p>
<script>
	angular.module('Console', ['ngStorage', 'ngSanitize'])
    .config(['$localStorageProvider', function ($localStorageProvider) {
        $localStorageProvider.setKeyPrefix('NPLConsole');
    }])
	.controller('ConsoleController', function ($scope, $http, $interval, $localStorage) {
		$scope.isModified = false;
		$scope.$storage = $localStorage.$default({
			currentFileIndex: 0,
            openedfiles: [{filename:"1", text:"echo('hello')"}, {filename:"2",text:"alert('hello')"}, {filename:"3"}, {filename:"4"}, {filename:"5"}], // {filename, line}
        });
		$scope.save = function(text){
			if(!($scope.isModified))
				return;

			if(!text){
				var editor = ace.edit("editor");
				text = editor.getValue();
			}
			var file = $scope.$storage.openedfiles[$scope.$storage.currentFileIndex]
			if(file)
				file.text = text;
			var editor = ace.edit("editor");
			editor.session.getUndoManager().markClean();
            $scope.isModified = false;
		};
		$scope.openFile = function (index, line, bForceReopen, bForceNoPrompt) {
            var editor = ace.edit("editor");
            if ($scope.$storage.currentFileIndex != index || bForceReopen) {
				if (!bForceNoPrompt && !editor.session.getUndoManager().isClean()) {
                    if (confirm("Content is modified. Do you want to discard the changes?")) {
                        $scope.openFile(index, line, bForceReopen, true);
                    }
                    return;
                }
            	var file = $scope.$storage.openedfiles[index];
				if(file){
					editor.session.setValue(file.text || "");
					$scope.$storage.currentFileIndex = index;
					if (line && line > 0)
						editor.gotoLine(line);
				}
            }
        }

		var editor = ace.edit("editor");
		// binding editor
        function initEditor() {
			editor.setTheme("ace/theme/github");
			editor.session.setMode("ace/mode/lua");
			editor.setAutoScrollEditorIntoView(true);
			editor.setOption("maxLines", 30);
			editor.setOption("minLines", 5);
			editor.commands.addCommand({name: 'myRunCode', bindKey: {win: 'F5'}, exec: function(editor) { $scope.runcode(); }, readOnly: true });
			editor.commands.addCommand({name: 'myRunCode1', bindKey: {win: 'Ctrl+R'}, exec: function(editor) { $scope.runcode(); }, readOnly: true });
			editor.commands.addCommand({name: 'mySave', bindKey: {win: 'Ctrl+S'}, exec: function(editor) { $scope.save();$scope.$apply(); }, readOnly: true });
			editor.on("input", function () {
				if($scope.isModified != !editor.session.getUndoManager().isClean()){
					$scope.isModified = !($scope.isModified);
					$scope.$apply();
				}
            });
			var hasCode = <?=GetCode()~=""?>;
			if(!hasCode)
				$scope.openFile($scope.$storage.currentFileIndex, null, true);
		}
		initEditor();

		$scope.runcode = function(){
			var text = editor.getValue();
			$scope.save(text);
			$.post("/ajax/console?action=runcode", {text:text})
			.done(function(data){
				$scope.success = data.success;
				$scope.error = data.error;
				$("#result").html(data.result || "");
				$scope.$apply();
			})
		}
		$scope.runpage = function(){
			var text = editor.getValue();
			$scope.save(text);
			$.post("/ajax/console?action=runcode", {text:text, btnRunPage:true})
			.done(function(data){
				$scope.success = data.success;
				$scope.error = data.error;
				$("#result").html(data || "");
				$scope.$apply();
			})
		}

		if(typeof Page != 'undefined')
            Page.ShowSideBar(false);
	 });
</script>

<div ng-app="Console" ng-controller="ConsoleController as Console" style="margin-top:10px;" class="form-horizontal">
	<ul class="nav nav-tabs" style="margin-top:5px;margin-bottom:0px;">
        <li ng-repeat="file in $storage.openedfiles" ng-class="{active:$index == $storage.currentFileIndex}">
            <a ng-click="openFile($index, file.line)">{{file.filename}}<span ng-if="isModified && $index == $storage.currentFileIndex">*</span></a>
        </li>
    </ul>
	<div id="editor"><?npl echo(sanitize(GetCode())); ?></div>
	<div>
	  <p>
		<button class="btn btn-primary" name="btnRunCode" ng-click='runcode()' title="Run code (Ctrl+R)">Run as code (F5)</button>
		<button class="btn" name="btnRunPage" ng-click='runpage()'>Run as page</button>
	  </p>
	</div>
	<p style='color:green' ng-show="success==true">success!</p>
	<p style='color:red' ng-show="error">{{error}}</p>
</div>
<div id="result"></div>
<hr/>
<? include("log.page") ?>