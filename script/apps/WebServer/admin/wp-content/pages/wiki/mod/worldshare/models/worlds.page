<?npl
--[[
Title: worlds
Author: Big
Date: 2016/12/07
]]

include_once(WIKI_ROOT .. "models/abstract/multi_user_base.page");
include_once(WIKI_ROOT .. "models/user.page");
include_once("./worlds_stats.page");
include_once("./worlds_star.page");

NPL.load("(gl)script/ide/System/Encoding/base64.lua");

local worlds    = inherit(models.abstract.multi_user_base, gettable("models.worlds"));
local EncodingS = commonlib.gettable("System.Encoding");

worlds.db_name = "worlds";

function worlds:ctor()
	self:addfield("userid","number",false,10);
	--giturl
	self:addfield("giturl", "string", false, 300);
	--worlds name
	self:addfield("worldsName","string",false,30);
	--worlds modify date
	self:addfield("revision","string",false,30);
	--worlds update data
	self:addfield("modDate","string",false,30);
	--worlds id
	self:addfield("opusId","number",false,10);
	--recommend world
	self:addfield("isRecommend","string",false,10);

	---------- following is query only, not saved to columns ----------------
	--page number
	self:addfield("page","number",false,10);
	--page amount
	self:addfield("amount","number",false,10);
	--sort method
	self:addfield("sort","string",false,10);
end

function worlds:get(params)
	local err, query = self:validateQuery(params);
	local userid;

	if(not query.userid)then
		self:ensureAuthenticated();
		userid = self:getUserId();

		if(not userid) then
			return {error=-1,msg="user is not exist"};
		end
	else
		userid = query.userid;
	end

	if(not query.page) then
		query.page = 1;
	end

	if(not query.amount) then
		query.amount = 2;
	end

	if(not query.sort) then
		query.sort = nil;
	end

	local skip  = query.page == 1 and 0 or query.page*query.amount-query.amount;
	local limit = query.amount;

	self:db():find({["+userid"] = {userid,limit=limit,skip=skip}},resume);
	local err,response = yield(true);

	LOG.std(nil,"debug","modDate",query.sort);

	if(not err) then
		if(query.sort == nil) then
			return response;
		elseif(query.sort == "modDate") then
			local modDateTable = {};

			for key,value in ipairs(response) do
				for modDateEle in string.gmatch(value.modDate,"[^-]+") do
					modDateTable[#modDateTable+1] = modDateEle;
				end

				value.formatDate = tonumber(self:formatDate(modDateTable));

				modDateTable = {};
			end

			LOG.std(nil,"debug","response[i].value",{"AAAA",response});

			local compareResponse = commonlib.copy(response);

			for i=1,#response do
				-- LOG.std(nil,"debug","response[i].value",{"AAAA",response[i]});

				for j=i+1,#compareResponse do
					-- LOG.std(nil,"debug","response[j].value",{"BBBB",compareResponse[j]});

					if(response[i].formatDate > compareResponse[j].formatDate) then
						local new   = response[i];
						-- LOG.std(nil,"debug","newnewnew",new);
						response[i] = compareResponse[j];
						response[j] = new;
					end
				end
			end

			return response;
		end
	else
		return {error=-1,msg="database err"};
	end
end

function worlds:formatDate(modDateTable)
	local newModDate = "";

	if(#modDateTable[1] ~= 4 and #modDateTable[1] < 4) then
		local num = 4 - #modDateTable[1];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[1];
	elseif(#modDateTable[1] == 4) then
		newModDate = newModDate .. modDateTable[1];
	end

	if(#modDateTable[2] ~= 2 and #modDateTable[2] < 2) then
		local num = 2 - #modDateTable[2];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[2];
	elseif(#modDateTable[2] == 2) then
		newModDate = newModDate .. modDateTable[2];
	end

	if(#modDateTable[3] ~= 2 and #modDateTable[3] < 2) then
		local num = 2 - #modDateTable[3];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[3];
	elseif(#modDateTable[3] == 2) then
		newModDate = newModDate .. modDateTable[2];
	end

	if(#modDateTable[4] ~= 2 and #modDateTable[4] < 2) then
		local num = 2 - #modDateTable[4];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[4];
	elseif(#modDateTable[4] == 2) then
		newModDate = newModDate .. modDateTable[4];
	end

	if(#modDateTable[5] ~= 2 and #modDateTable[5] < 2) then
		local num = 2 - #modDateTable[5];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[5];
	elseif(#modDateTable[5] == 2) then
		newModDate = newModDate .. modDateTable[5];
	end

	return newModDate;
end

function worlds:api_getOneOpus(params)
	local err, query = self:validateQuery(params);
	LOG.std(nil,"debug","queryapi_getOneOpus",query);

	if(not query.opusId) then
		return {error = -1,msg = "opusId is not set"};
	end

	self:db():findOne({_id=query.opusId},resume);
	local err,opusResponse = yield(true);

	-- LOG.std(nil,"debug","opusResponse",opusResponse);

	if(not err) then
		local userParams = {};
		userParams._id   = response.userid;

		local userInfor  = models.user:new():api_getminiprofile(userParams);

		for key,value in pairs(userInfor) do
			if(key ~= "_id") then
				opusResponse[key] = value;
			end
		end

		return {error=0,data=opusResponse};
	else
		return {error=0,msg="database err"};
	end
end

function worlds:api_recommendOpus(params)
	local err, query = self:validateQuery(params);
	local userid;

	self:ensureAuthenticated();
	userid = self:getUserId();

	if(not userid) then
		return {error=-1,msg="user is not exist"};
	end

	local userinfor = models.user:new():get({});

	if(userinfor.isadmin == nil or userinfor == false) then
		return {error=-1,msg="prohibit not administrator operation"};
	end

	if(not query.opusId) then
		return {error=-1,msg="opusId is not set"};
	end

	if(not query.isRecommend) then
		return {error=-1,msg="isRecommend is not set"};
	end

	if(query.isRecommend == "true")then
		local params  = {};
		params.method = "add";

		params.statsType = "worldsRecommendTotals";
		models.worlds_stats:new():inside_update(params);

		params.statsType = "worldsRecommendTotalsUser" .. userid;
		models.worlds_stats:new():inside_update(params);
	elseif(query.isRecommend == "false")then
		local params  = {};
		params.method = "minus";

		params.statsType = "worldsRecommendTotals";
		models.worlds_stats:new():inside_update(params);

		params.statsType = "worldsRecommendTotalsUser" .. userid;
		models.worlds_stats:new():inside_update(params);
	end

	self:db():updateOne({_id = query.opusId},
					    {isRecommend = query.isRecommend},resume);

	local err,response = yield(true);

	if(not err) then
		return {error=0,msg="set successful"};
	else
		return {error=-1,msg="set fail"};
	end
end

function worlds:api_getRecommendOpus(params)
	local err, query = self:validateQuery(params);
	-- LOG.std(nil,"debug","queryapi_getRecommendOpus",query);

	self:ensureAuthenticated();
	local userid = self:getUserId();

	if(not query.opusId) then
		return {error=-1,msg="opusId is not set"};
	end

	if(not query.page) then
		query.page = 1;
	end

	if(not query.amount) then
		query.amount = 2;
	end

	if(not query.sort) then
		query.sort = "_id";
	end

	local skip  = query.page == 1 and 0 or query.page*query.amount-query.amount;
	local limit = query.amount;

	self:db():findOne({_id = query.opusId},resume);
	local err,responseA = yield(true);

	-- LOG.std(nil,"debug","responseA",responseA);

	if(not err) then
		self:db():find({["+userid+isRecommend"] = {responseA.userid,"true",limit=limit,skip=skip}},resume);
		local err,responseB = yield(true);

		-- LOG.std(nil,"debug","responseB",responseB);

		if(not err) then
			for key,value in ipairs(responseB) do
				local params = {};
				params.statsType = "worldsStarTotals" .. value._id;

				local stats = models.worlds_stats:new():get(params);
				value.starTotals = stats;

				if(userid)then
					local starParams = {};
					starParams.opusId = value._id;

					local res = models.worlds_star:new():get(starParams);
					
					if(res.error == 1)then
						value.isMyStar = false;
					elseif(res.error == 0)then
						value.isMyStar = true;
					end
				end
			end

			return {error=0,data=responseB};
		else
			return {error=-1,msg="database err"};
		end
	end
end

function worlds:api_refresh(params)
	local err, query = self:validateQuery(params);
	local userid;

	self:ensureAuthenticated();
	userid = self:getUserId();

	if(not userid) then
		return {error=-1,msg="user is not exist"};
	end

	local userinfor = models.user:new():get({});

	self:db():findOne({["+userid+worldsName"] = {userid,query.worldsName}},resume);
	local err,response = yield(true);

	if(not err) then
		-- log({"response",response});
		if(not response or not next(response)) then
			--LOG.std(nil,"debug","modDateTable",modDateTable);

			local insertParams      = {};
			insertParams.modDate    = query.modDate;
			insertParams.worldsName = query.worldsName;
			insertParams.giturl     = "https://github.com/"..userinfor["login"].."/".. worlds.base64(query.worldsName);
			insertParams.revision   = query.revision;

			worlds._super.create(self, insertParams);

			local params  = {};
			params.statsType = "worldsTotals";
			params.method = "add";

			models.worlds_stats:new():inside_update(params);

			params.statsType = "worldsTotalsUser" .. userid;
			models.worlds_stats:new():inside_update(params);
		else
			self:db():updateOne({["+userid+worldsName"] = {userid,query.worldsName}},
								 {revision = query.revision},resume);

			local err,response = yield(true);
		end
	end
end

function worlds:create()
end

function worlds:delete(params)
	local err, query = self:validateQuery(params);
	local userid;

	self:ensureAuthenticated();
	userid = self:getUserId();

	if(not userid) then
		return {error=-1,msg="user is not exist"};
	end

	self:db():deleteOne(query,resume);

	local err,response = yield(true);

	if(not err)then
		local params  = {};
		params.method = "minus";

		models.worlds_stats:new():update(params);
	end
end

function worlds:update()
end

function worlds:backup()
	local userinfor = models.user:new():get({});

	if(not query["worldsNameForm"]) then
		return {error=-1,msg="worlds name form is nil"};
	end

	local worldsNameForm = query["worldsNameForm"];

	-- log({"worldsNameForm",worldsNameForm});
	for key,value in ipairs(worldsNameForm) do
		-- log(value);
		self:db():findOne({["+userid+worldsName"] = {userid,value["worldsName"]}},resume);
		local err,response = yield(true);

		if(not err) then
			-- log({"response",response});
			if(not response or not next(response)) then
				local insertParams      = {};
				insertParams.worldsName = value["worldsName"];
				insertParams.giturl     = "https://github.com/"..userinfor["login"].."/"..value["worldsName"];
				insertParams.date 		= value["date"];

				worlds._super.create(self, insertParams);
			else
				local rDate = string.gsub(response["date"],"-","");
				local vDate = string.gsub(value["date"],"-","");

				if(tonumber(rDate) < tonumber(vDate)) then
					self:db():updateOne({["+userid+worldsName"] = {userid,value["worldsName"]}},
										 {date = value["date"]},resume);

					local err,response = yield(true);
				end
			end
		end
	end
end

-- =转成-p1p  +转成-p2p  /转成-p3p
function worlds.base64(text)
	if(text) then
		text = EncodingS.base64(text);
		text = text:gsub("[=]" ,"-p1p");
		text = text:gsub("[%+]","-p2p");
		text = text:gsub("[/]" ,"-p3p");

		--LOG.std(nil,"debug","text",text);

		return text;
	else
		return nil;
	end
end

function worlds.unbase64(text)
	if(text) then
		text = text:gsub("[-p1p]","=");
		text = text:gsub("[-p2p]","+");
		text = text:gsub("[-p3p]","/");

		return EncodingS.unbase64(text);
	else
		return nil;
	end
end

function worlds.strRepeat(num,str)
	local strRepeat = "";

	for i=1,num do
		strRepeat = strRepeat .. str;
	end

	return strRepeat;
end