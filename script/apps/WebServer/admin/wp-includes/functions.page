<?npl
--[[
Title: global API functions
Author: LiXizhi
Date: 2015/6/10
Desc: 
]]

-- call a function with any arguments
-- @param func: function or function name or {class_object, class_method_or_name}
function call_user_func(func, ...)
	local func_type = type(func);
	if(func_type == "function") then
		return func(...);
	elseif(func_type == "string") then
		func = _GLOBAL[func];
		if(type(func) == "function") then
			return func(...);
		end
	elseif(func_type == "table") then
		if(type(func[1]) == "table" and func[2]) then
			local func_body;
			if(type(func[2]) == "string") then
				func_body = func[1][func[2]];
			elseif(type(func[2]) == "function") then
				func_body = func[2];
			end
			
			if(type(func_body) == "function") then
				return call_user_func(func_body, func[1], ...);
			else
				log("call_user_func with unknown function:"..tostring(func[2]));
			end
		end
	end
end


-- Set up the query.
function wp()
	wp_query:parse_query();
end

-- Kill execution and display HTML message with error message.
function wp_die(message, title, ...)
	exit(message);
end


function esc_url(url)
	return url;
end

function esc_attr(attr)
	return attr;
end

wp_scripts = wp_scripts or {};
 -- Registers the script if src provided (does NOT overwrite), and enqueues it.
 -- duplicated calls to the same script will be ignored.
 -- @param handle    Name of the script.
 -- @param src       Path to the script from the root directory of WordPress. Example: '/js/myscript.js'.
 -- @param deps      An array of registered handles this script depends on. Default empty array.
 -- @param ver       Optional. String specifying the script version number, if it has one. 
 function wp_enqueue_script( handle, src, deps, ver)
	if(wp_scripts[handle]) then
		return;
	end
	if ( src ) then
		if(ver) then
			src = src.."?ver="..ver;
		end
		wp_scripts[handle] = src;
		echo(format('<script type="text/javascript" src="%s" charset="utf-8"></script>\n', src));
	end
end

wp_styles = wp_styles or {};
-- similar to wp_enqueue_script
-- @param media: default to "all"
function wp_enqueue_style(handle, src, deps, ver, media)
	if(wp_styles[handle]) then
		return;
	end
	if ( src ) then
		if(ver) then
			src = src.."?ver="..ver;
		end
		media = media or "all";
		wp_styles[handle] = src;
		echo(format('<link rel="stylesheet" type="text/css" href="%s" media="%s">\n', src, media));
	end
end


-- Get the header information to prevent caching.
-- The several different headers cover the different ways cache prevention
-- is handled by different browsers
-- @return array The associative array of header names and field values.
function wp_get_nocache_headers()
	local headers = {
		['Expires'] = 'Wed, 11 Jan 1984 05:00:00 GMT',
		['Cache-Control'] = 'no-cache, must-revalidate, max-age=0',
		['Pragma'] = 'no-cache',
	};
	return headers;
end

-- Set the headers to prevent caching for the different browsers.
-- Different browsers support different nocache headers, so several
-- headers must be sent so that all of them get the point that no
-- caching should occur.
function nocache_headers()
	response:nocache_headers();
end

-- Send a HTTP header to disable content type sniffing in browsers which support it.
-- @see http://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx
-- @see http://src.chromium.org/viewvc/chrome?view=rev&revision=6985
function send_nosniff_header()
	addheader("X-Content-Type-Options", "nosniff");
end

-- Send a JSON response back to an Ajax request.
-- @param bUseEmptyArray: by default, empty table is serialized to json as object {}. 
-- set this to true will be serialized to json as array []
function wp_send_json(value, bUseEmptyArray)
	-- response:set_header('Content-Type', 'application/json');
	response:send(value, bUseEmptyArray);
end

--Serialize data, if needed.
function maybe_serialize( data )
	return commonlib.serialize(data);
end
--Unserialize value only if it was serialized.
function maybe_unserialize(data)
    return commonlib.LoadTableFromString(data);
end
--Join array elements with a string
--Join array elements with a glue string.
function implode(glue, pieces)
    glue = glue or "";
    local k,v;
    local result = "";
    for k,v in ipairs(pieces)do
        if(k == 1)then
            result = tostring(v);
        else
            result = string.format("%s%s%s",result,glue,tostring(v));
        end
    end
    return result;
end
function add_query_arg(...)
    local args = {...};
    local uri;
    if(type(args[1]) == "table")then
        if(#args < 2 or not args[2])then
            uri = request:url();
        else
            uri = args[2];
        end
    else
        if(#args < 3 or not args[3])then
            uri = request:url();
        else
            uri = args[3];
        end
    end
    local frag;
    local protocol;
    local base;
    local query;
    if(string.find(uri,"#"))then
        uri,__ = string.match(uri,"(.+)#(.+)");
    else
        frag = ""
    end
    if(not string.find(uri,"http://"))then
        protocol = 'http://';
		uri = string.sub( uri, 7 , string.len(uri));
    elseif(not string.find(uri,"https://"))then
        protocol = 'https://';
		uri = string.sub( uri, 8 , string.len(uri));
    else
        protocol = '';
    end
    if(string.find(uri,"?"))then
        base,query = string.match(uri,"(.+)%?(.+)")
		base = base .. '?';
    elseif(protocol or not string.find(uri,"="))then
        base = uri .. '?';
		query = '';
    else
        base = '';
		query = uri;
    end
    local qs = wp_parse_str( query);
    if(type(args[1]) == "table")then
        local k,v;
        for k,v in ipairs(args[1]) do
            qs[k] = v;
        end
    else
        qs[args[1]] = args[2];
    end
    local k,v;
    for k,v in pairs(qs) do
        if(v == false)then
            qs[k] = nil;
        end
    end
    local ret = build_query( qs );
    ret = protocol .. base .. ret .. frag;
    return ret;
end
function remove_query_arg(key, query )
    if(type(key) == "table")then

        local k,v;
        for k,v in ipairs(key) do
            query = add_query_arg( v, false, query );          
        end
        return query;
    end
    return add_query_arg( key, false, query );
end
function build_query( data ) 
    if(not data)then
        return
    end
    local s = "";
    local k,v;
    for k,v in pairs(data)do
        if(s=="")then
            s = string.format("%s=%s",k,v);
        else
            s = string.format("%s&%s=%s",s,k,v);
        end
    end
    return s;
end